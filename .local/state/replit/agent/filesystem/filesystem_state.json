{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Overview\n\nThis is a full-stack web application for a Police Rabbinate system (רבנות המשטרה) built with React, Express, and PostgreSQL. The application serves as a platform for police officers to ask religious questions to rabbis, access synagogue information, view religious videos, and stay updated with news. The system includes user registration with approval workflow and admin functionality.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React 18 with TypeScript\n- **Routing**: Wouter for client-side routing\n- **State Management**: TanStack Query (React Query) for server state management\n- **UI Components**: Radix UI primitives with shadcn/ui component library\n- **Styling**: Tailwind CSS with custom police theme colors\n- **Build Tool**: Vite for development and bundling\n\n### Backend Architecture\n- **Framework**: Express.js with TypeScript\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Session Management**: Built-in device-based authentication using localStorage\n- **API Design**: RESTful API with JSON responses\n\n### Mobile-First Design\n- Responsive design optimized for mobile devices\n- Bottom navigation pattern for mobile UX\n- Hebrew language interface (RTL support)\n- Police-themed color scheme with blue accent colors\n\n## Key Components\n\n### Authentication System\n- Device-based authentication using unique device IDs\n- User registration requires approval by admin\n- Three user states: pending, approved, rejected\n- No traditional password-based authentication\n\n### Question & Answer System\n- Users can submit religious questions to rabbis\n- Questions are categorized and can be marked as urgent\n- Admin interface for managing and answering questions\n- Question status tracking (pending, answered, closed)\n\n### Content Management\n- News system for announcements and updates\n- Synagogue directory with location information\n- Video library with YouTube integration\n- Daily Halacha (religious law) content\n\n### Admin Panel\n- User approval/rejection workflow\n- Question management and answering\n- Content creation and management\n\n## Data Flow\n\n1. **User Registration**: Device ID generated → Registration form → Admin approval → User activated\n2. **Question Submission**: Authenticated user → Question form → Database → Admin notification\n3. **Content Consumption**: User requests → API endpoints → Database queries → JSON response\n4. **Admin Operations**: Admin login → Management interface → Database updates → User notifications\n\n## External Dependencies\n\n### Database\n- **Neon PostgreSQL**: Serverless PostgreSQL database\n- **Connection**: WebSocket-based connection using `@neondatabase/serverless`\n\n### UI Libraries\n- **Radix UI**: Accessible component primitives\n- **Lucide React**: Icon library\n- **Tailwind CSS**: Utility-first CSS framework\n\n### Development Tools\n- **TypeScript**: Type safety across frontend and backend\n- **Drizzle Kit**: Database migration and schema management\n- **ESBuild**: Fast JavaScript bundler for production\n\n## Deployment Strategy\n\n### Development\n- Vite dev server for frontend with HMR\n- Express server with TypeScript compilation via tsx\n- Shared schema between frontend and backend\n\n### Production Build\n- Frontend: Vite build to static assets\n- Backend: ESBuild bundling to single JavaScript file\n- Environment variables for database connection\n- Static file serving from Express\n\n### File Structure\n- `/client`: Frontend React application\n- `/server`: Backend Express application  \n- `/shared`: Shared TypeScript schemas and types\n- `/migrations`: Database migration files\n\nThe application follows a monorepo structure with clear separation between frontend, backend, and shared code, enabling type safety across the full stack while maintaining modularity.","size_bytes":3939},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedAdmin } from \"./seedAdmin\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Create admin user if not exists\n  await seedAdmin();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2168},"server/replitAuth.ts":{"content":"import * as client from \"openid-client\";\nimport { Strategy, type VerifyFunction } from \"openid-client/passport\";\n\nimport passport from \"passport\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport memoize from \"memoizee\";\nimport connectPg from \"connect-pg-simple\";\nimport { storage } from \"./storage\";\n\nif (!process.env.REPLIT_DOMAINS) {\n  throw new Error(\"Environment variable REPLIT_DOMAINS not provided\");\n}\n\nconst getOidcConfig = memoize(\n  async () => {\n    return await client.discovery(\n      new URL(process.env.ISSUER_URL ?? \"https://replit.com/oidc\"),\n      process.env.REPL_ID!\n    );\n  },\n  { maxAge: 3600 * 1000 }\n);\n\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: true,\n      maxAge: sessionTtl,\n    },\n  });\n}\n\nfunction updateUserSession(\n  user: any,\n  tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers\n) {\n  user.claims = tokens.claims();\n  user.access_token = tokens.access_token;\n  user.refresh_token = tokens.refresh_token;\n  user.expires_at = user.claims?.exp;\n}\n\nasync function upsertUser(\n  claims: any,\n) {\n  await storage.upsertUser({\n    id: claims[\"sub\"],\n    email: claims[\"email\"],\n    firstName: claims[\"first_name\"],\n    lastName: claims[\"last_name\"],\n    profileImageUrl: claims[\"profile_image_url\"],\n  });\n}\n\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  const config = await getOidcConfig();\n\n  const verify: VerifyFunction = async (\n    tokens: client.TokenEndpointResponse & client.TokenEndpointResponseHelpers,\n    verified: passport.AuthenticateCallback\n  ) => {\n    const user = {};\n    updateUserSession(user, tokens);\n    await upsertUser(tokens.claims());\n    verified(null, user);\n  };\n\n  for (const domain of process.env\n    .REPLIT_DOMAINS!.split(\",\")) {\n    const strategy = new Strategy(\n      {\n        name: `replitauth:${domain}`,\n        config,\n        scope: \"openid email profile offline_access\",\n        callbackURL: `https://${domain}/api/callback`,\n      },\n      verify,\n    );\n    passport.use(strategy);\n  }\n\n  passport.serializeUser((user: Express.User, cb) => cb(null, user));\n  passport.deserializeUser((user: Express.User, cb) => cb(null, user));\n\n  app.get(\"/api/login\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      prompt: \"login consent\",\n      scope: [\"openid\", \"email\", \"profile\", \"offline_access\"],\n    })(req, res, next);\n  });\n\n  app.get(\"/api/callback\", (req, res, next) => {\n    passport.authenticate(`replitauth:${req.hostname}`, {\n      successReturnToOrRedirect: \"/\",\n      failureRedirect: \"/api/login\",\n    })(req, res, next);\n  });\n\n  app.get(\"/api/logout\", (req, res) => {\n    req.logout(() => {\n      res.redirect(\n        client.buildEndSessionUrl(config, {\n          client_id: process.env.REPL_ID!,\n          post_logout_redirect_uri: `${req.protocol}://${req.hostname}`,\n        }).href\n      );\n    });\n  });\n}\n\nexport const isAuthenticated: RequestHandler = async (req, res, next) => {\n  const user = req.user as any;\n\n  if (!req.isAuthenticated() || !user.expires_at) {\n    return res.status(401).json({ message: \"Unauthorized\" });\n  }\n\n  const now = Math.floor(Date.now() / 1000);\n  if (now <= user.expires_at) {\n    return next();\n  }\n\n  const refreshToken = user.refresh_token;\n  if (!refreshToken) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n\n  try {\n    const config = await getOidcConfig();\n    const tokenResponse = await client.refreshTokenGrant(config, refreshToken);\n    updateUserSession(user, tokenResponse);\n    return next();\n  } catch (error) {\n    res.status(401).json({ message: \"Unauthorized\" });\n    return;\n  }\n};","size_bytes":4220},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertUserSchema, insertQuestionSchema, insertAnswerSchema, insertNewsSchema, insertSynagogueSchema, insertDailyHalachaSchema, insertVideoSchema, insertContactMessageSchema, insertNotificationSchema } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Admin middleware to check if user is admin\nconst requireAdmin = async (req: any, res: any, next: any) => {\n  try {\n    const { deviceId } = req.body;\n    if (!deviceId) {\n      return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n    }\n\n    const user = await storage.getUserByDeviceId(deviceId);\n    if (!user || !user.isAdmin) {\n      return res.status(403).json({ message: \"Forbidden - Admin access required\" });\n    }\n\n    req.adminUser = user;\n    next();\n  } catch (error) {\n    res.status(500).json({ message: \"Server error\" });\n  }\n};\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  \n  // Auth routes with Hebrew validation\n  app.post(\"/api/auth/register\", async (req, res) => {\n    try {\n      const userData = insertUserSchema.parse(req.body);\n      \n      // Check if device already registered\n      const deviceId = req.body.deviceId;\n      if (deviceId) {\n        const existingUser = await storage.getUserByDeviceId(deviceId);\n        if (existingUser) {\n          return res.json({ user: existingUser });\n        }\n      }\n\n      // Check if personal ID already exists\n      if (userData.personalId) {\n        const existingPersonalId = await storage.getUserByPersonalId(userData.personalId);\n        if (existingPersonalId) {\n          return res.status(400).json({ message: \"מספר אישי זה כבר רשום במערכת\" });\n        }\n      }\n\n      const user = await storage.createUser(userData);\n      res.json({ user });\n    } catch (error) {\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => e.message).join(\", \")\n        : \"שגיאה ברישום המשתמש\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  app.post(\"/api/auth/login\", async (req, res) => {\n    try {\n      const { email, password, deviceId } = req.body;\n      \n      console.log('Login attempt:', { email, deviceId, password: '***' });\n      \n      // Find user by email\n      const user = await storage.getUserByEmail(email);\n      \n      if (!user) {\n        console.log('User not found:', email);\n        return res.status(404).json({ message: \"כתובת אימייל לא רשומה במערכת\" });\n      }\n\n      console.log('User found:', { id: user.id, email: user.email, status: user.status });\n\n      // Check password (in production, use proper password hashing)\n      if (user.password !== password) {\n        console.log('Password mismatch:', { expected: user.password, received: password });\n        return res.status(401).json({ message: \"סיסמה לא נכונה\" });\n      }\n\n      if (user.status !== \"approved\") {\n        console.log('User not approved:', user.status);\n        return res.status(403).json({ message: \"החשבון לא אושר עדיין על ידי מנהל המערכת\" });\n      }\n\n      // Update the user's device ID for this login only if different\n      let updatedUser = user;\n      if (user.deviceId !== deviceId) {\n        try {\n          updatedUser = await storage.updateUserDeviceId(user.id, deviceId);\n          console.log('Device ID updated successfully:', deviceId);\n        } catch (error) {\n          console.error('Device ID update error:', error);\n          // If device ID conflict or other error, try generating a unique one\n          try {\n            const uniqueDeviceId = `${deviceId}-${Date.now()}`;\n            console.log('Trying unique device ID:', uniqueDeviceId);\n            updatedUser = await storage.updateUserDeviceId(user.id, uniqueDeviceId);\n          } catch (secondError) {\n            console.error('Failed to update device ID even with unique ID:', secondError);\n            // If all else fails, continue with original user (without device ID update)\n            console.log('Continuing login without device ID update');\n            updatedUser = user;\n          }\n        }\n      } else {\n        console.log('Device ID unchanged, no update needed:', deviceId);\n      }\n      \n      console.log('Login successful for user:', updatedUser.email);\n      res.json({ user: updatedUser });\n    } catch (error) {\n      console.error('Login error:', error);\n      res.status(400).json({ message: \"שגיאה בהתחברות\" });\n    }\n  });\n  \n  app.get(\"/api/auth/user\", async (req, res) => {\n    try {\n      const { deviceId } = req.query;\n      if (!deviceId) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      const user = await storage.getUserByDeviceId(deviceId as string);\n      if (!user) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n      \n      if (user.status !== \"approved\") {\n        return res.status(401).json({ message: \"User not approved\" });\n      }\n      \n      res.json(user);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch user\" });\n    }\n  });\n\n  // Admin routes - both endpoints for compatibility\n  app.get(\"/api/users/pending\", async (req, res) => {\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      console.log('Pending users found:', pendingUsers.length);\n      res.json(pendingUsers);\n    } catch (error) {\n      console.error('Error fetching pending users:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת משתמשים ממתינים\" });\n    }\n  });\n\n  app.get(\"/api/admin/pending-users\", async (req, res) => {\n    try {\n      const pendingUsers = await storage.getPendingUsers();\n      res.json(pendingUsers);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת משתמשים ממתינים\" });\n    }\n  });\n\n  // Multiple endpoints for user approval compatibility\n  app.post(\"/api/users/approve/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approvedBy } = req.body;\n      console.log('Approving user:', { id, approvedBy });\n      const user = await storage.updateUserStatus(id, \"approved\", approvedBy || \"admin\");\n      console.log('User approved successfully:', user.email, user.status);\n      res.json({ user });\n    } catch (error) {\n      console.error('Error approving user:', error);\n      res.status(500).json({ message: \"שגיאה באישור משתמש\" });\n    }\n  });\n\n  app.post(\"/api/admin/approve-user/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approvedBy } = req.body;\n      const user = await storage.updateUserStatus(id, \"approved\", approvedBy);\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה באישור משתמש\" });\n    }\n  });\n\n  // Multiple endpoints for user rejection compatibility  \n  app.post(\"/api/users/reject/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approvedBy } = req.body;\n      console.log('Rejecting user:', { id, approvedBy });\n      const user = await storage.updateUserStatus(id, \"rejected\", approvedBy || \"admin\");\n      console.log('User rejected successfully:', user.email, user.status);\n      res.json({ user });\n    } catch (error) {\n      console.error('Error rejecting user:', error);\n      res.status(500).json({ message: \"שגיאה בדחיית משתמש\" });\n    }\n  });\n\n  app.post(\"/api/admin/reject-user/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approvedBy } = req.body;\n      const user = await storage.updateUserStatus(id, \"rejected\", approvedBy);\n      res.json({ user });\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בדחיית משתמש\" });\n    }\n  });\n\n  // Questions routes\n  app.post(\"/api/questions\", async (req, res) => {\n    try {\n      console.log('Question submission attempt:', req.body);\n      const questionData = insertQuestionSchema.parse(req.body);\n      console.log('Parsed question data:', questionData);\n      const question = await storage.createQuestion(questionData);\n      console.log('Question created successfully:', question.id);\n      res.json({ question });\n    } catch (error) {\n      console.error('Error creating question:', error);\n      res.status(400).json({ message: \"שגיאה בשליחת השאלה\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Admin-only: Get all questions for management\n  app.get(\"/api/admin/questions\", async (req, res) => {\n    try {\n      const questions = await storage.getAllQuestions();\n      console.log(`Admin fetching all ${questions.length} questions`);\n      res.json(questions);\n    } catch (error) {\n      console.error('Error fetching admin questions:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת השאלות למנהל\" });\n    }\n  });\n\n  app.get(\"/api/questions/user/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const questions = await storage.getQuestionsByUser(userId);\n      // Return all questions for the specific user (their own questions)\n      res.json(questions);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת השאלות\" });\n    }\n  });\n\n  // Get single question with answers\n  app.get(\"/api/questions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const question = await storage.getQuestionWithAnswers(id);\n      \n      if (!question) {\n        return res.status(404).json({ message: \"השאלה לא נמצאה\" });\n      }\n      \n      res.json(question);\n    } catch (error) {\n      console.error('Error fetching question:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת השאלה\" });\n    }\n  });\n\n  app.get(\"/api/questions\", async (req, res) => {\n    try {\n      const questions = await storage.getAllQuestions();\n      // Filter only public, answered questions for regular users\n      const publicAnsweredQuestions = questions.filter(q => \n        q.isVisible === true && \n        q.isPrivate === false && \n        q.status === \"answered\"\n      );\n      console.log(`Returning ${publicAnsweredQuestions.length} public answered questions out of ${questions.length} total`);\n      res.json(publicAnsweredQuestions);\n    } catch (error) {\n      console.error('Error fetching questions:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת השאלות\" });\n    }\n  });\n\n  // Approve question (admin only)\n  app.post(\"/api/questions/:id/approve\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { approvedBy } = req.body;\n      const question = await storage.approveQuestion(id, approvedBy || \"admin\");\n      res.json({ question });\n    } catch (error) {\n      console.error('Error approving question:', error);\n      res.status(500).json({ message: \"שגיאה באישור השאלה\" });\n    }\n  });\n\n  // Update question (admin only)\n  app.put(\"/api/questions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const updateData = req.body;\n      const question = await storage.updateQuestion(id, updateData);\n      res.json({ question });\n    } catch (error) {\n      console.error('Error updating question:', error);\n      res.status(500).json({ message: \"שגיאה בעדכון השאלה\" });\n    }\n  });\n\n  // Update answer (admin only)\n  app.put(\"/api/answers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { content } = req.body;\n      const answer = await storage.updateAnswer(id, { content });\n      res.json({ answer });\n    } catch (error) {\n      console.error('Error updating answer:', error);\n      res.status(500).json({ message: \"שגיאה בעדכון התשובה\" });\n    }\n  });\n\n  app.get(\"/api/questions/search\", async (req, res) => {\n    try {\n      const { q } = req.query;\n      if (!q || typeof q !== 'string') {\n        return res.status(400).json({ message: \"נדרש מונח חיפוש\" });\n      }\n      const questions = await storage.searchQuestions(q);\n      res.json(questions);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בחיפוש\" });\n    }\n  });\n\n  // Admin-only: Answer questions\n  app.post(\"/api/admin/answers\", async (req, res) => {\n    try {\n      const { questionId, content } = req.body;\n      \n      if (!questionId || !content) {\n        return res.status(400).json({ error: \"Missing required fields\" });\n      }\n\n      const answer = await storage.createAnswer({\n        questionId,\n        content,\n        answeredBy: \"admin\"\n      });\n\n      // Update question status to answered and mark as having new answer\n      await storage.updateQuestionStatus(questionId, \"answered\");\n      await storage.markQuestionAnswered(questionId);\n\n      // Get the question to create notification for the user\n      const question = await storage.getQuestionById(questionId);\n      if (question) {\n        // Create notification for the user\n        await storage.createNotification({\n          userId: question.userId,\n          type: \"question_answered\",\n          title: \"שאלתך נענתה!\",\n          message: `התקבלה תשובה לשאלה שלך: \"${question.content.substring(0, 50)}...\"`,\n          relatedId: questionId\n        });\n      }\n\n      res.json({ answer });\n    } catch (error) {\n      console.error(\"Error creating answer:\", error);\n      res.status(500).json({ error: \"Failed to create answer\" });\n    }\n  });\n\n  app.get(\"/api/answers/question/:questionId\", async (req, res) => {\n    try {\n      const { questionId } = req.params;\n      const answers = await storage.getAnswersByQuestion(questionId);\n      res.json(answers);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת התשובות\" });\n    }\n  });\n\n  // Admin-only: Update answer\n  app.put(\"/api/admin/answers/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { content } = req.body;\n      \n      if (!content) {\n        return res.status(400).json({ error: \"Missing content field\" });\n      }\n\n      const answer = await storage.updateAnswer(id, { content });\n      res.json({ answer });\n    } catch (error) {\n      console.error(\"Error updating answer:\", error);\n      res.status(500).json({ error: \"Failed to update answer\" });\n    }\n  });\n\n  // News routes\n  app.get(\"/api/news\", async (req, res) => {\n    try {\n      const limit = req.query.limit ? parseInt(req.query.limit as string) : undefined;\n      const news = limit ? await storage.getRecentNews(limit) : await storage.getAllNews();\n      res.json(news);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת החדשות\" });\n    }\n  });\n\n  // Admin-only: Create news\n  app.post(\"/api/admin/news\", async (req, res) => {\n    try {\n      const { deviceId, ...newsBody } = req.body;\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      const newsData = insertNewsSchema.parse({\n        ...newsBody,\n        createdBy: \"admin\"\n      });\n      const news = await storage.createNews(newsData);\n      res.json(news);\n    } catch (error) {\n      console.error(\"News creation error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => e.message).join(\", \")\n        : \"Failed to create news\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Update news\n  app.put(\"/api/admin/news/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { deviceId, ...newsBody } = req.body;\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      const newsData = insertNewsSchema.parse(newsBody);\n      const news = await storage.updateNews(id, newsData);\n      res.json(news);\n    } catch (error) {\n      console.error(\"News update error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => e.message).join(\", \")\n        : \"Failed to update news\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Delete news\n  app.delete(\"/api/admin/news/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteNews(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete news\" });\n    }\n  });\n\n  // Synagogues routes\n  app.get(\"/api/synagogues\", async (req, res) => {\n    try {\n      const synagogues = await storage.getAllSynagogues();\n      res.json(synagogues);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת בתי הכנסת\" });\n    }\n  });\n\n  // Admin-only: Create synagogue\n  app.post(\"/api/admin/synagogues\", async (req, res) => {\n    try {\n      const { deviceId, ...synagogueBody } = req.body;\n      console.log(\"Synagogue creation request:\", { deviceId, synagogueBody });\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      console.log(\"About to validate synagogue data...\");\n      const synagogueData = insertSynagogueSchema.parse(synagogueBody);\n      console.log(\"Synagogue data validated:\", synagogueData);\n      \n      const synagogue = await storage.createSynagogue(synagogueData);\n      console.log(\"Synagogue created successfully:\", synagogue);\n      res.json(synagogue);\n    } catch (error) {\n      console.error(\"Detailed synagogue creation error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(\", \")\n        : error instanceof Error ? error.message : \"Failed to create synagogue\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Update synagogue\n  app.put(\"/api/admin/synagogues/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { deviceId, ...synagogueBody } = req.body;\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      const synagogueData = insertSynagogueSchema.parse(synagogueBody);\n      const synagogue = await storage.updateSynagogue(id, synagogueData);\n      res.json(synagogue);\n    } catch (error) {\n      console.error(\"Synagogue update error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => e.message).join(\", \")\n        : \"Failed to update synagogue\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Delete synagogue\n  app.delete(\"/api/admin/synagogues/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteSynagogue(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete synagogue\" });\n    }\n  });\n\n  // Daily Halacha routes\n  app.get(\"/api/daily-halacha\", async (req, res) => {\n    try {\n      const halacha = await storage.getTodayHalacha();\n      if (!halacha) {\n        return res.status(404).json({ message: \"לא נמצאה הלכה יומית\" });\n      }\n      res.json(halacha);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת ההלכה היומית\" });\n    }\n  });\n\n  // Get all daily halachot (for the halacha page)\n  app.get(\"/api/daily-halacha/all\", async (req, res) => {\n    try {\n      const halachot = await storage.getAllHalachot();\n      res.json(halachot);\n    } catch (error) {\n      console.error(\"Error fetching all halachot:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת הלכות\" });\n    }\n  });\n\n  // Admin-only: Create daily halacha\n  app.post(\"/api/admin/daily-halacha\", async (req, res) => {\n    try {\n      const { deviceId, ...halachaBody } = req.body;\n      console.log(\"Halacha creation request:\", { deviceId, halachaBody });\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      console.log(\"About to validate halacha data...\");\n      const halachaData = insertDailyHalachaSchema.parse({\n        ...halachaBody,\n        date: new Date(halachaBody.date),\n        createdBy: \"admin\"\n      });\n      console.log(\"Halacha data validated:\", halachaData);\n      \n      const halacha = await storage.createDailyHalacha(halachaData);\n      console.log(\"Halacha created successfully:\", halacha);\n      res.json(halacha);\n    } catch (error) {\n      console.error(\"Detailed halacha creation error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(\", \")\n        : error instanceof Error ? error.message : \"Failed to create daily halacha\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Update daily halacha\n  app.put(\"/api/admin/daily-halacha/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { deviceId, ...halachaBody } = req.body;\n      console.log(\"Halacha update request:\", { id, deviceId, halachaBody });\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      const halachaData = insertDailyHalachaSchema.parse({\n        ...halachaBody,\n        date: new Date(halachaBody.date),\n        createdBy: \"admin\"\n      });\n      const halacha = await storage.updateDailyHalacha(id, halachaData);\n      res.json(halacha);\n    } catch (error) {\n      console.error(\"Detailed halacha update error:\", error);\n      const errorMessage = error instanceof z.ZodError \n        ? error.errors.map(e => `${e.path.join('.')}: ${e.message}`).join(\", \")\n        : error instanceof Error ? error.message : \"Failed to update daily halacha\";\n      res.status(400).json({ message: errorMessage });\n    }\n  });\n\n  // Admin-only: Delete daily halacha\n  app.delete(\"/api/admin/daily-halacha/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      // Get deviceId from body, query params, or headers\n      const deviceId = req.body?.deviceId || req.query.deviceId || req.headers['x-device-id'];\n      \n      console.log(\"Delete halacha request:\", { id, deviceId, body: req.body });\n      \n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized - No device ID\" });\n      }\n\n      await storage.deleteDailyHalacha(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Halacha deletion error:\", error);\n      res.status(400).json({ message: \"Failed to delete daily halacha\" });\n    }\n  });\n\n  // Videos routes\n  app.get(\"/api/videos\", async (req, res) => {\n    try {\n      const videos = await storage.getAllVideos();\n      res.json(videos);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת הסרטונים\" });\n    }\n  });\n\n  // Admin-only: Create video\n  app.post(\"/api/admin/videos\", requireAdmin, async (req, res) => {\n    try {\n      const videoData = insertVideoSchema.parse({\n        ...req.body,\n        addedBy: (req as any).adminUser?.id || \"admin\"\n      });\n      const video = await storage.createVideo(videoData);\n      res.json(video);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to create video\" });\n    }\n  });\n\n  // Admin-only: Update video\n  app.put(\"/api/admin/videos/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      const videoData = insertVideoSchema.parse(req.body);\n      const video = await storage.updateVideo(id, videoData);\n      res.json(video);\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to update video\" });\n    }\n  });\n\n  // Admin-only: Delete video\n  app.delete(\"/api/admin/videos/:id\", requireAdmin, async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteVideo(id);\n      res.json({ success: true });\n    } catch (error) {\n      res.status(400).json({ message: \"Failed to delete video\" });\n    }\n  });\n\n  // Helper functions for sun calculations\n  const calculateSunTimes = (date: Date, lat: number, lng: number) => {\n    const dayOfYear = Math.floor((date.getTime() - new Date(date.getFullYear(), 0, 1).getTime()) / 86400000) + 1;\n    \n    // Solar declination angle\n    const declination = 23.45 * Math.sin((360 / 365) * (dayOfYear - 81) * Math.PI / 180);\n    \n    // Hour angle calculation\n    const latRad = lat * Math.PI / 180;\n    const declRad = declination * Math.PI / 180;\n    \n    // Sunrise/sunset hour angle (with atmospheric refraction correction)\n    const hourAngle = Math.acos(-Math.tan(latRad) * Math.tan(declRad)) * 180 / Math.PI / 15;\n    \n    // Solar noon (in hours from midnight, UTC)\n    const solarNoon = 12 - (lng / 15);\n    \n    // Sunrise and sunset times (UTC)\n    const sunriseUTC = solarNoon - hourAngle;\n    const sunsetUTC = solarNoon + hourAngle;\n    \n    // Convert to Jerusalem time - August is DST (+3 hours)\n    const timeOffset = 3;\n    \n    return {\n      sunrise: sunriseUTC + timeOffset,\n      sunset: sunsetUTC + timeOffset\n    };\n  };\n\n  const toHebrewDate = (date: Date) => {\n    // More accurate Hebrew date conversion\n    // Today's actual Hebrew date: 5 August 2025 = 11 Av 5785\n    const knownGregorian = new Date('2025-08-05');\n    const knownHebrewDay = 11;\n    const knownHebrewMonth = 'אב';\n    const knownHebrewYear = 5785;\n    \n    const daysDiff = Math.floor((date.getTime() - knownGregorian.getTime()) / (24 * 60 * 60 * 1000));\n    \n    // Hebrew months in order (starting from Tishrei)\n    const hebrewMonths = [\n      'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר',\n      'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'\n    ];\n    \n    // Month lengths (approximate)\n    const monthLengths = [30, 29, 29, 29, 30, 29, 30, 29, 30, 29, 30, 29];\n    \n    let day = knownHebrewDay + daysDiff;\n    let monthIndex = hebrewMonths.indexOf(knownHebrewMonth);\n    let year = knownHebrewYear;\n    \n    // Handle month transitions\n    while (day > monthLengths[monthIndex]) {\n      day -= monthLengths[monthIndex];\n      monthIndex++;\n      if (monthIndex >= 12) {\n        monthIndex = 0;\n        year++;\n      }\n    }\n    \n    while (day < 1) {\n      monthIndex--;\n      if (monthIndex < 0) {\n        monthIndex = 11;\n        year--;\n      }\n      day += monthLengths[monthIndex];\n    }\n    \n    return {\n      day: Math.max(1, Math.min(30, day)),\n      month: hebrewMonths[monthIndex],\n      year\n    };\n  };\n\n  // Available cities endpoint for location selection - All major Israeli cities\n  app.get(\"/api/jewish-times/cities\", async (req, res) => {\n    try {\n      const cities = [\n        { id: \"ירושלים\", name: \"ירושלים\", english: \"Jerusalem\" },\n        { id: \"תל אביב\", name: \"תל אביב\", english: \"Tel Aviv\" },\n        { id: \"חיפה\", name: \"חיפה\", english: \"Haifa\" },\n        { id: \"באר שבע\", name: \"באר שבע\", english: \"Beer Sheva\" },\n        { id: \"נתניה\", name: \"נתניה\", english: \"Netanya\" },\n        { id: \"אשדוד\", name: \"אשדוד\", english: \"Ashdod\" },\n        { id: \"פתח תקווה\", name: \"פתח תקווה\", english: \"Petah Tikva\" },\n        { id: \"חולון\", name: \"חולון\", english: \"Holon\" },\n        { id: \"בני ברק\", name: \"בני ברק\", english: \"Bnei Brak\" },\n        { id: \"רמת גן\", name: \"רמת גן\", english: \"Ramat Gan\" },\n        { id: \"אילת\", name: \"אילת\", english: \"Eilat\" },\n        { id: \"טבריה\", name: \"טבריה\", english: \"Tiberias\" },\n        { id: \"צפת\", name: \"צפת\", english: \"Safed\" },\n        { id: \"הרצליה\", name: \"הרצליה\", english: \"Herzliya\" },\n        { id: \"כפר סבא\", name: \"כפר סבא\", english: \"Kfar Saba\" },\n        { id: \"רעננה\", name: \"רעננה\", english: \"Ra'anana\" },\n        { id: \"מודיעין\", name: \"מודיעין\", english: \"Modi'in\" },\n        { id: \"ראשון לציון\", name: \"ראשון לציון\", english: \"Rishon LeZion\" },\n        { id: \"אשקלון\", name: \"אשקלון\", english: \"Ashkelon\" },\n        { id: \"רחובות\", name: \"רחובות\", english: \"Rehovot\" },\n        { id: \"בת ים\", name: \"בת ים\", english: \"Bat Yam\" },\n        { id: \"גבעתיים\", name: \"גבעתיים\", english: \"Givatayim\" },\n        { id: \"קריית גת\", name: \"קריית גת\", english: \"Kiryat Gat\" },\n        { id: \"קריית שמונה\", name: \"קריית שמונה\", english: \"Kiryat Shmona\" },\n        { id: \"נהריה\", name: \"נהריה\", english: \"Nahariya\" },\n        { id: \"עכו\", name: \"עכו\", english: \"Acre\" },\n        { id: \"לוד\", name: \"לוד\", english: \"Lod\" },\n        { id: \"רמלה\", name: \"רמלה\", english: \"Ramla\" }\n      ];\n      \n      res.json({ cities: cities });\n    } catch (error) {\n      console.error('Error fetching cities:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת רשימת הערים\" });\n    }\n  });\n\n  // Comprehensive Hebrew Times API with reliable Hebcal data\n  app.get(\"/api/jewish-times/:city?\", async (req, res) => {\n    try {\n      const city = req.params.city || \"ירושלים\";\n      const now = new Date();\n      \n      // City coordinates database for accurate calculations - All major Israeli cities\n      const cityCoordinates: { [key: string]: { lat: number; lng: number; heb: string; eng: string } } = {\n        \"ירושלים\": { lat: 31.7683, lng: 35.2137, heb: \"ירושלים\", eng: \"Jerusalem\" },\n        \"תל אביב\": { lat: 32.0853, lng: 34.7818, heb: \"תל אביב\", eng: \"Tel Aviv\" },\n        \"תל-אביב\": { lat: 32.0853, lng: 34.7818, heb: \"תל אביב\", eng: \"Tel Aviv\" },\n        \"חיפה\": { lat: 32.7940, lng: 34.9896, heb: \"חיפה\", eng: \"Haifa\" },\n        \"באר שבע\": { lat: 31.2518, lng: 34.7915, heb: \"באר שבע\", eng: \"Beer Sheva\" },\n        \"באר-שבע\": { lat: 31.2518, lng: 34.7915, heb: \"באר שבע\", eng: \"Beer Sheva\" },\n        \"נתניה\": { lat: 32.3215, lng: 34.8532, heb: \"נתניה\", eng: \"Netanya\" },\n        \"אשדוד\": { lat: 31.7940, lng: 34.6496, heb: \"אשדוד\", eng: \"Ashdod\" },\n        \"פתח תקווה\": { lat: 32.0878, lng: 34.8880, heb: \"פתח תקווה\", eng: \"Petah Tikva\" },\n        \"פתח-תקווה\": { lat: 32.0878, lng: 34.8880, heb: \"פתח תקווה\", eng: \"Petah Tikva\" },\n        \"חולון\": { lat: 32.0178, lng: 34.7804, heb: \"חולון\", eng: \"Holon\" },\n        \"בני ברק\": { lat: 32.0809, lng: 34.8338, heb: \"בני ברק\", eng: \"Bnei Brak\" },\n        \"רמת גן\": { lat: 32.0719, lng: 34.8242, heb: \"רמת גן\", eng: \"Ramat Gan\" },\n        \"אילת\": { lat: 29.5581, lng: 34.9482, heb: \"אילת\", eng: \"Eilat\" },\n        \"טבריה\": { lat: 32.7922, lng: 35.5311, heb: \"טבריה\", eng: \"Tiberias\" },\n        \"צפת\": { lat: 32.9648, lng: 35.4953, heb: \"צפת\", eng: \"Safed\" },\n        \"הרצליה\": { lat: 32.1624, lng: 34.8441, heb: \"הרצליה\", eng: \"Herzliya\" },\n        \"כפר סבא\": { lat: 32.1743, lng: 34.9070, heb: \"כפר סבא\", eng: \"Kfar Saba\" },\n        \"רעננה\": { lat: 32.1845, lng: 34.8708, heb: \"רעננה\", eng: \"Ra'anana\" },\n        \"מודיעין\": { lat: 31.8969, lng: 35.0095, heb: \"מודיעין\", eng: \"Modi'in\" },\n        \"ראשון לציון\": { lat: 31.9730, lng: 34.8066, heb: \"ראשון לציון\", eng: \"Rishon LeZion\" },\n        \"אשקלון\": { lat: 31.6688, lng: 34.5742, heb: \"אשקלון\", eng: \"Ashkelon\" },\n        \"רחובות\": { lat: 31.8947, lng: 34.8106, heb: \"רחובות\", eng: \"Rehovot\" },\n        \"בת ים\": { lat: 32.0167, lng: 34.7500, heb: \"בת ים\", eng: \"Bat Yam\" },\n        \"גבעתיים\": { lat: 32.0694, lng: 34.8106, heb: \"גבעתיים\", eng: \"Givatayim\" },\n        \"קריית גת\": { lat: 31.6103, lng: 34.7642, heb: \"קריית גת\", eng: \"Kiryat Gat\" },\n        \"קריית שמונה\": { lat: 33.2074, lng: 35.5692, heb: \"קריית שמונה\", eng: \"Kiryat Shmona\" },\n        \"נהריה\": { lat: 33.0056, lng: 35.0944, heb: \"נהריה\", eng: \"Nahariya\" },\n        \"עכו\": { lat: 32.9258, lng: 35.0831, heb: \"עכו\", eng: \"Acre\" },\n        \"לוד\": { lat: 31.9494, lng: 34.8961, heb: \"לוד\", eng: \"Lod\" },\n        \"רמלה\": { lat: 31.9297, lng: 34.8706, heb: \"רמלה\", eng: \"Ramla\" }\n      };\n\n      const location = cityCoordinates[city] || cityCoordinates[\"ירושלים\"];\n      \n      try {\n        console.log(`Fetching Jewish times for ${location.heb} (${location.lat}, ${location.lng})`);\n        console.log('STARTING MAIN API CALL PATH');\n        \n        // Use Hebcal API for accurate Jewish times with correct parameters\n        const today = `${now.getFullYear()}-${(now.getMonth() + 1).toString().padStart(2, '0')}-${now.getDate().toString().padStart(2, '0')}`;\n        console.log('Calling Hebcal API with date:', today);\n        const hebcalResponse = await fetch(\n          `https://www.hebcal.com/zmanim?cfg=json&latitude=${location.lat}&longitude=${location.lng}&tzid=Asia/Jerusalem&date=${today}&sec=1`\n        );\n        \n        console.log('Hebcal zmanim response status:', hebcalResponse.status);\n        \n        if (!hebcalResponse.ok) {\n          throw new Error(`Hebcal API error: ${hebcalResponse.status}`);\n        }\n        \n        const hebcalData = await hebcalResponse.json();\n        console.log('Hebcal API successful response!');\n        console.log('Available times fields:', Object.keys(hebcalData.times || {}));\n        console.log('Sample field values:', {\n          alotHaShachar: hebcalData.times?.alotHaShachar,\n          minchaKetana: hebcalData.times?.minchaKetana, \n          plagHaMincha: hebcalData.times?.plagHaMincha,\n          beinHaShmashos: hebcalData.times?.beinHaShmashos\n        });\n        \n        // Get Hebrew date and parsha info from Hebcal API\n        console.log(`Fetching Hebrew date for: ${now.getFullYear()}-${now.getMonth() + 1}-${now.getDate()}`);\n        const hebrewDateResponse = await fetch(\n          `https://www.hebcal.com/converter?cfg=json&gy=${now.getFullYear()}&gm=${now.getMonth() + 1}&gd=${now.getDate()}&g2h=1`\n        );\n        \n        console.log('Hebrew date response status:', hebrewDateResponse.status);\n        \n        let hebrewDateInfo = null;\n        let parshaInfo = null;\n        \n        if (hebrewDateResponse.ok) {\n          hebrewDateInfo = await hebrewDateResponse.json();\n          console.log('Hebrew date info:', hebrewDateInfo);\n          \n          // Extract parsha from events if available and convert to Hebrew\n          if (hebrewDateInfo.events && Array.isArray(hebrewDateInfo.events)) {\n            const parshaEvent = hebrewDateInfo.events.find((event: string) => \n              event.startsWith('Parashat ') || event.includes('פרשת')\n            );\n            if (parshaEvent) {\n              // Convert English parsha names to Hebrew\n              const parshaHebrewMap: { [key: string]: string } = {\n                'Parashat Vaetchanan': 'פרשת ואתחנן',\n                'Parashat Devarim': 'פרשת דברים', \n                'Parashat Eikev': 'פרשת עקב',\n                'Parashat Re\\'eh': 'פרשת ראה',\n                'Parashat Shoftim': 'פרשת שופטים',\n                'Parashat Ki Teitzei': 'פרשת כי תצא',\n                'Parashat Ki Tavo': 'פרשת כי תבוא',\n                'Parashat Nitzavim': 'פרשת נצבים'\n              };\n              parshaInfo = parshaHebrewMap[parshaEvent] || parshaEvent.replace('Parashat ', 'פרשת ').replace('Vaetchanan', 'ואתחנן').replace('Devarim', 'דברים').replace('Eikev', 'עקב');\n            }\n          }\n        }\n        \n        // Get current week's parsha from Hebcal sedrot API\n        if (!parshaInfo) {\n          try {\n            const currentSaturday = new Date(now);\n            const daysTillSaturday = (6 - now.getDay()) % 7;\n            currentSaturday.setDate(now.getDate() + daysTillSaturday);\n            \n            const parshaResponse = await fetch(\n              `https://www.hebcal.com/sedrot/${currentSaturday.getFullYear()}?cfg=json`\n            );\n            \n            if (parshaResponse.ok) {\n              const sedrotData = await parshaResponse.json();\n              const currentWeek = sedrotData.items?.find((item: any) => {\n                const itemDate = new Date(item.date);\n                const diffTime = Math.abs(currentSaturday.getTime() - itemDate.getTime());\n                const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n                return diffDays <= 7;\n              });\n              \n              if (currentWeek && currentWeek.hebrew) {\n                // Convert Hebrew transliteration to proper Hebrew\n                const hebrewParshaMap: { [key: string]: string } = {\n                  'Vaetchanan': 'ואתחנן',\n                  'Devarim': 'דברים',\n                  'Eikev': 'עקב', \n                  'Re\\'eh': 'ראה',\n                  'Shoftim': 'שופטים',\n                  'Ki Teitzei': 'כי תצא',\n                  'Ki Tavo': 'כי תבוא',\n                  'Nitzavim': 'נצבים'\n                };\n                const hebrewName = hebrewParshaMap[currentWeek.hebrew] || currentWeek.hebrew;\n                parshaInfo = `פרשת ${hebrewName}`;\n                console.log('Found parsha from sedrot API:', parshaInfo);\n              }\n            }\n          } catch (parshaError) {\n            console.log('Error fetching parsha from sedrot API:', parshaError);\n          }\n        }\n\n        // Hebrew month names mapping - comprehensive\n        const hebrewMonths: { [key: string]: string } = {\n          \"Tishrei\": \"תשרי\", \"Cheshvan\": \"מרחשון\", \"Kislev\": \"כסלו\", \"Tevet\": \"טבת\",\n          \"Shvat\": \"שבט\", \"Adar\": \"אדר\", \"Adar I\": \"אדר א׳\", \"Adar II\": \"אדר ב׳\",\n          \"Nisan\": \"ניסן\", \"Iyar\": \"אייר\", \"Sivan\": \"סיון\", \"Tamuz\": \"תמוז\",\n          \"Av\": \"אב\", \"Elul\": \"אלול\"\n        };\n\n        // Hebrew day names mapping - full day names\n        const hebrewDayNames: { [key: number]: string } = {\n          0: \"יום ראשון\",    // Sunday\n          1: \"יום שני\",      // Monday  \n          2: \"יום שלישי\",    // Tuesday\n          3: \"יום רביעי\",    // Wednesday\n          4: \"יום חמישי\",    // Thursday\n          5: \"יום שישי\",     // Friday\n          6: \"יום שבת קודש\" // Saturday\n        };\n\n        // Convert Hebrew year to proper Hebrew letters format (e.g. תשפ\"ה)\n        const hebrewYearToLetters = (year: number): string => {\n          // Hebrew years are typically 5000+ so we work with the last few digits\n          const yearStr = year.toString();\n          const lastDigits = parseInt(yearStr.slice(-3)); // Get last 3 digits for conversion\n          \n          const hundreds = Math.floor(lastDigits / 100);\n          const tens = Math.floor((lastDigits % 100) / 10);\n          const ones = lastDigits % 10;\n          \n          const hebrewHundreds: { [key: number]: string } = {\n            1: \"ק\", 2: \"ר\", 3: \"ש\", 4: \"ת\", 5: \"תק\", 6: \"תר\", 7: \"תש\", 8: \"תת\", 9: \"תתק\"\n          };\n          \n          const hebrewTens: { [key: number]: string } = {\n            1: \"י\", 2: \"כ\", 3: \"ל\", 4: \"מ\", 5: \"נ\", 6: \"ס\", 7: \"ע\", 8: \"פ\", 9: \"צ\"\n          };\n          \n          const hebrewOnes: { [key: number]: string } = {\n            1: \"א\", 2: \"ב\", 3: \"ג\", 4: \"ד\", 5: \"ה\", 6: \"ו\", 7: \"ז\", 8: \"ח\", 9: \"ט\"\n          };\n          \n          let result = \"\";\n          if (hundreds > 0) result += hebrewHundreds[hundreds] || \"\";\n          if (tens > 0) result += hebrewTens[tens] || \"\";\n          if (ones > 0) result += hebrewOnes[ones] || \"\";\n          \n          // Add geresh (״) before last letter for Hebrew year format\n          if (result.length > 1) {\n            result = result.slice(0, -1) + '״' + result.slice(-1);\n          } else if (result.length === 1) {\n            result += '׳';\n          }\n          \n          return result || year.toString();\n        };\n\n        // Number to Hebrew letters conversion for days\n        const numberToHebrew = (num: number): string => {\n          if (num <= 0) return \"\";\n          \n          const hebrewNums: { [key: number]: string } = {\n            1: \"א\", 2: \"ב\", 3: \"ג\", 4: \"ד\", 5: \"ה\", 6: \"ו\", 7: \"ז\", 8: \"ח\", 9: \"ט\", 10: \"י\",\n            11: \"יא\", 12: \"יב\", 13: \"יג\", 14: \"יד\", 15: \"טו\", 16: \"טז\", 17: \"יז\", 18: \"יח\", 19: \"יט\", 20: \"כ\",\n            21: \"כא\", 22: \"כב\", 23: \"כג\", 24: \"כד\", 25: \"כה\", 26: \"כו\", 27: \"כז\", 28: \"כח\", 29: \"כט\", 30: \"ל\"\n          };\n          \n          if (num <= 30) {\n            return hebrewNums[num] || num.toString();\n          }\n          \n          return num.toString(); // Fallback for very large numbers\n        };\n\n        const formatTime = (timeStr: string): string => {\n          if (!timeStr) return \"לא זמין\";\n          const time = new Date(timeStr);\n          return time.toLocaleTimeString('he-IL', { \n            hour: '2-digit', \n            minute: '2-digit', \n            timeZone: 'Asia/Jerusalem',\n            hour12: false \n          });\n        };\n\n        // Get accurate parsha for current week\n        const getAccurateParsha = (): string | null => {\n          // Calculate based on days since Rosh Hashana 5785 (Sept 16, 2024)\n          const roshHashana5785 = new Date('2024-09-16');\n          const today = new Date();\n          const daysDiff = Math.floor((today.getTime() - roshHashana5785.getTime()) / (1000 * 60 * 60 * 24));\n          const weeksSinceRosh = Math.floor(daysDiff / 7);\n          \n          // Torah portions for 5785 cycle starting from Rosh Hashana\n          const parashat5785 = [\n            \"פרשת האזינו\", \"פרשת וזאת הברכה\", \"פרשת בראשית\", \"פרשת נח\", \"פרשת לך לך\",\n            \"פרשת וירא\", \"פרשת חיי שרה\", \"פרשת תולדות\", \"פרשת ויצא\", \"פרשת וישלח\",\n            \"פרשת וישב\", \"פרשת מקץ\", \"פרשת ויגש\", \"פרשת ויחי\", \"פרשת שמות\",\n            \"פרשת וארא\", \"פרשת בא\", \"פרשת בשלח\", \"פרשת יתרו\", \"פרשת משפטים\",\n            \"פרשת תרומה\", \"פרשת תצוה\", \"פרשת כי תשא\", \"פרשת ויקהל\", \"פרשת פקודי\",\n            \"פרשת ויקרא\", \"פרשת צו\", \"פרשת שמיני\", \"פרשת תזריע\", \"פרשת מצורע\",\n            \"פרשת אחרי מות\", \"פרשת קדושים\", \"פרשת אמור\", \"פרשת בהר\", \"פרשת בחוקותי\",\n            \"פרשת במדבר\", \"פרשת נשא\", \"פרשת בהעלותך\", \"פרשת שלח\", \"פרשת קרח\",\n            \"פרשת חוקת\", \"פרשת בלק\", \"פרשת פינחס\", \"פרשת מטות\", \"פרשת מסעי\",\n            \"פרשת דברים\", \"פרשת ואתחנן\", \"פרשת עקב\", \"פרשת ראה\", \"פרשת שופטים\",\n            \"פרשת כי תצא\", \"פרשת כי תבוא\", \"פרשת נצבים\", \"פרשת וילך\"\n          ];\n          \n          if (weeksSinceRosh >= 0 && weeksSinceRosh < parashat5785.length) {\n            return parashat5785[weeksSinceRosh];\n          }\n          \n          // For current date August 5, 2025 (יא אב תשפ״ה)\n          // This is week of פרשת ואתחנן (corrected)\n          const currentMonth = today.getMonth() + 1;\n          const currentDay = today.getDate();\n          \n          if (currentMonth === 8) {\n            if (currentDay <= 8) return \"פרשת ואתחנן\";  // Current week - corrected\n            if (currentDay <= 15) return \"פרשת עקב\";\n            if (currentDay <= 22) return \"פרשת ראה\";\n            if (currentDay <= 29) return \"פרשת שופטים\";\n            return \"פרשת כי תצא\";\n          }\n          \n          return \"פרשת ואתחנן\"; // Default for current time\n        };\n\n        // Build comprehensive response with CONFIRMED working API fields\n        const times = {\n          location: location.heb,\n          englishLocation: location.eng,\n          coordinates: { latitude: location.lat, longitude: location.lng },\n          \n          // Basic times - tested and verified from API\n          sunrise: formatTime(hebcalData.times?.sunrise),\n          sunset: formatTime(hebcalData.times?.sunset),\n          \n          // Prayer times  \n          shacharit: formatTime(hebcalData.times?.sunrise),\n          mincha: formatTime(hebcalData.times?.minchaGedola),\n          maariv: formatTime(hebcalData.times?.tzeit7083deg),\n          \n          // Shema and Tefilla times - separate opinions\n          shemaLatestGra: formatTime(hebcalData.times?.sofZmanShma), // הגר\"א\n          shemaLatestMga: formatTime(hebcalData.times?.sofZmanShmaMGA), // מגן אברהם\n          tefillaLatestGra: formatTime(hebcalData.times?.sofZmanTfilla), // הגר\"א  \n          tefillaLatestMga: formatTime(hebcalData.times?.sofZmanTfillaMGA), // מגן אברהם\n          \n          // Backward compatibility\n          shemaLatest: formatTime(hebcalData.times?.sofZmanShma), // דעת הגר\"א (ברירת מחדל)\n          tefillaLatest: formatTime(hebcalData.times?.sofZmanTfilla), // דעת הגר\"א (ברירת מחדל)\n          \n          // Shabbat times (using appropriate times for Friday/Saturday)\n          shabbatStart: formatTime(hebcalData.times?.sunset ? \n            new Date(new Date(hebcalData.times.sunset).getTime() - 18 * 60000).toISOString() : \n            \"\"),\n          shabbatEnd: formatTime(hebcalData.times?.tzeit42min || hebcalData.times?.tzeit72min),\n          \n          // Extended times - using exact field names from successful API tests\n          minchaKetana: formatTime(hebcalData.times?.minchaKetana),\n          plagHamincha: formatTime(hebcalData.times?.plagHaMincha),\n          beinHashmashot: formatTime(hebcalData.times?.beinHaShmashos),\n          fastEnds: formatTime(hebcalData.times?.tzeit7083deg),\n          kiddushLevana: \"לא זמין\", // Requires complex calculation\n          chatzot: formatTime(hebcalData.times?.chatzot),\n          chatzotNight: formatTime(hebcalData.times?.chatzotNight),\n          alotHashachar: formatTime(hebcalData.times?.alotHaShachar),\n          misheyakir: formatTime(hebcalData.times?.misheyakir),\n          misheyakirMachmir: formatTime(hebcalData.times?.misheyakirMachmir),\n          sofZmanShema: formatTime(hebcalData.times?.sofZmanShma),\n          sofZmanTefilla: formatTime(hebcalData.times?.sofZmanTfilla),\n          \n          // Basic times for quick reference\n          dawn: formatTime(hebcalData.times?.alotHaShachar),\n          dusk: formatTime(hebcalData.times?.tzeit7083deg),\n          midday: formatTime(hebcalData.times?.chatzot),\n          \n          // Date information\n          date: now.toLocaleDateString('he-IL'),\n          gregorianDate: {\n            day: now.getDate(),\n            month: now.getMonth() + 1,\n            year: now.getFullYear(),\n            dayOfWeek: hebrewDayNames[now.getDay()] || now.toLocaleDateString('he-IL', { weekday: 'long' })\n          },\n          \n          hebrewDate: hebrewDateInfo ? {\n            day: numberToHebrew(hebrewDateInfo.hd),\n            month: hebrewMonths[hebrewDateInfo.hm] || hebrewDateInfo.hm,\n            year: hebrewYearToLetters(hebrewDateInfo.hy),\n            formatted: `${numberToHebrew(hebrewDateInfo.hd)} ${hebrewMonths[hebrewDateInfo.hm] || hebrewDateInfo.hm} ${hebrewYearToLetters(hebrewDateInfo.hy)}`\n          } : {\n            day: \"\",\n            month: \"\",\n            year: \"\",\n            formatted: \"לא זמין\"\n          },\n          \n          // Shabbat parsha information\n          parsha: parshaInfo || getAccurateParsha(),\n          \n          // Real-time sync indicator\n          lastUpdated: new Date().toISOString(),\n          timezone: \"Asia/Jerusalem\"\n        };\n\n        res.json(times);\n        \n      } catch (apiError) {\n        console.warn('Hebcal API failed, using fallback calculation:', apiError);\n        \n        // Fallback to local calculation if API fails\n        const sunTimes = calculateSunTimes(now, location.lat, location.lng);\n        \n        const formatTime = (hours: number) => {\n          const h = Math.floor(hours);\n          const m = Math.round((hours - h) * 60);\n          return `${h.toString().padStart(2, '0')}:${m.toString().padStart(2, '0')}`;\n        };\n        \n        // Fallback: Try to get Hebrew date from alternative API or calculation\n        const hebrewDayNames: { [key: number]: string } = {\n          0: \"יום ראשון\", 1: \"יום שני\", 2: \"יום שלישי\", 3: \"יום רביעי\",\n          4: \"יום חמישי\", 5: \"יום שישי\", 6: \"יום שבת קודש\"\n        };\n        \n        let fallbackHebrewDate = null;\n        let fallbackParshaInfo = null;\n        try {\n          // Try direct Hebcal converter API one more time\n          const fallbackHebrewResponse = await fetch(\n            `https://www.hebcal.com/converter?cfg=json&gy=${now.getFullYear()}&gm=${now.getMonth() + 1}&gd=${now.getDate()}&g2h=1`\n          );\n          \n          if (fallbackHebrewResponse.ok) {\n            const fallbackHebrewInfo = await fallbackHebrewResponse.json();\n            const numberToHebrewFallback = (num: number): string => {\n              const hebrewNums: { [key: number]: string } = {\n                1: \"א\", 2: \"ב\", 3: \"ג\", 4: \"ד\", 5: \"ה\", 6: \"ו\", 7: \"ז\", 8: \"ח\", 9: \"ט\", 10: \"י\",\n                11: \"יא\", 12: \"יב\", 13: \"יג\", 14: \"יד\", 15: \"טו\", 16: \"טז\", 17: \"יז\", 18: \"יח\", 19: \"יט\", 20: \"כ\",\n                21: \"כא\", 22: \"כב\", 23: \"כג\", 24: \"כד\", 25: \"כה\", 26: \"כו\", 27: \"כז\", 28: \"כח\", 29: \"כט\", 30: \"ל\"\n              };\n              return hebrewNums[num] || num.toString();\n            };\n            \n            const hebrewMonthsFallback: { [key: string]: string } = {\n              \"Tishrei\": \"תשרי\", \"Cheshvan\": \"מרחשון\", \"Kislev\": \"כסלו\", \"Tevet\": \"טבת\",\n              \"Shvat\": \"שבט\", \"Adar\": \"אדר\", \"Adar I\": \"אדר א׳\", \"Adar II\": \"אדר ב׳\",\n              \"Nisan\": \"ניסן\", \"Iyar\": \"אייר\", \"Sivan\": \"סיון\", \"Tamuz\": \"תמוז\",\n              \"Av\": \"אב\", \"Elul\": \"אלול\"\n            };\n            \n            const hebrewYearToLettersFallback = (year: number): string => {\n              const yearStr = year.toString();\n              const lastDigits = parseInt(yearStr.slice(-3));\n              const hundreds = Math.floor(lastDigits / 100);\n              const tens = Math.floor((lastDigits % 100) / 10);\n              const ones = lastDigits % 10;\n              \n              const hebrewHundreds: { [key: number]: string } = {\n                1: \"ק\", 2: \"ר\", 3: \"ש\", 4: \"ת\", 5: \"תק\", 6: \"תר\", 7: \"תש\", 8: \"תת\", 9: \"תתק\"\n              };\n              const hebrewTens: { [key: number]: string } = {\n                1: \"י\", 2: \"כ\", 3: \"ל\", 4: \"מ\", 5: \"נ\", 6: \"ס\", 7: \"ע\", 8: \"פ\", 9: \"צ\"\n              };\n              const hebrewOnes: { [key: number]: string } = {\n                1: \"א\", 2: \"ב\", 3: \"ג\", 4: \"ד\", 5: \"ה\", 6: \"ו\", 7: \"ז\", 8: \"ח\", 9: \"ט\"\n              };\n              \n              let result = \"\";\n              if (hundreds > 0) result += hebrewHundreds[hundreds] || \"\";\n              if (tens > 0) result += hebrewTens[tens] || \"\";\n              if (ones > 0) result += hebrewOnes[ones] || \"\";\n              \n              if (result.length > 1) {\n                result = result.slice(0, -1) + '״' + result.slice(-1);\n              } else if (result.length === 1) {\n                result += '׳';\n              }\n              \n              return result || year.toString();\n            };\n            \n            fallbackHebrewDate = {\n              day: numberToHebrewFallback(fallbackHebrewInfo.hd),\n              month: hebrewMonthsFallback[fallbackHebrewInfo.hm] || fallbackHebrewInfo.hm,\n              year: hebrewYearToLettersFallback(fallbackHebrewInfo.hy),\n              formatted: `${numberToHebrewFallback(fallbackHebrewInfo.hd)} ${hebrewMonthsFallback[fallbackHebrewInfo.hm] || fallbackHebrewInfo.hm} ${hebrewYearToLettersFallback(fallbackHebrewInfo.hy)}`\n            };\n            console.log('Successfully got Hebrew date in fallback:', fallbackHebrewDate);\n            \n            // Try to get parsha from fallback Hebrew date and convert to Hebrew\n            if (fallbackHebrewInfo.events && Array.isArray(fallbackHebrewInfo.events)) {\n              const parshaEvent = fallbackHebrewInfo.events.find((event: string) => \n                event.startsWith('Parashat ') || event.includes('פרשת')\n              );\n              if (parshaEvent) {\n                // Convert English parsha names to Hebrew\n                const parshaHebrewMap: { [key: string]: string } = {\n                  'Parashat Vaetchanan': 'פרשת ואתחנן',\n                  'Parashat Devarim': 'פרשת דברים',\n                  'Parashat Eikev': 'פרשת עקב',\n                  'Parashat Re\\'eh': 'פרשת ראה',\n                  'Parashat Shoftim': 'פרשת שופטים',\n                  'Parashat Ki Teitzei': 'פרשת כי תצא',\n                  'Parashat Ki Tavo': 'פרשת כי תבוא',\n                  'Parashat Nitzavim': 'פרשת נצבים'\n                };\n                fallbackParshaInfo = parshaHebrewMap[parshaEvent] || parshaEvent.replace('Parashat ', 'פרשת ').replace('Vaetchanan', 'ואתחנן').replace('Devarim', 'דברים').replace('Eikev', 'עקב');\n              }\n            }\n          }\n        } catch (error) {\n          console.log('Fallback Hebrew date also failed:', error);\n        }\n        \n        // Use built-in Hebrew date calculation if API fails\n        if (!fallbackHebrewDate) {\n          const hebrewDate = toHebrewDate(now);\n          fallbackHebrewDate = {\n            formatted: `${hebrewDate.day} ${hebrewDate.month} ${hebrewDate.year}`\n          };\n        }\n        \n        // Get accurate parsha for fallback (August 2025 = Av 5785)\n        const getFallbackParsha = (): string | null => {\n          const today = new Date();\n          const currentDay = today.getDate();\n          const currentMonth = today.getMonth() + 1; // August = 8\n          \n          // For August 5, 2025 (יא אב תשפ״ה), the current week is actually ואתחנן\n          // Corrected dates for summer 5785:\n          if (currentMonth === 8 && currentDay >= 1 && currentDay <= 8) {\n            return \"פרשת ואתחנן\"; // Current week - ואתחנן\n          }\n          if (currentMonth === 8 && currentDay >= 9 && currentDay <= 15) {\n            return \"פרשת עקב\";\n          }\n          if (currentMonth === 8 && currentDay >= 16 && currentDay <= 22) {\n            return \"פרשת ראה\";\n          }\n          if (currentMonth === 8 && currentDay >= 23 && currentDay <= 29) {\n            return \"פרשת שופטים\";\n          }\n          if (currentMonth === 8 && currentDay >= 30) {\n            return \"פרשת כי תצא\";\n          }\n          \n          // Default for current date (Aug 5, 2025) = ואתחנן\n          return \"פרשת ואתחנן\";\n        };\n\n        const fallbackTimes = {\n          location: location.heb,\n          englishLocation: location.eng,\n          coordinates: { latitude: location.lat, longitude: location.lng },\n          \n          // Basic times\n          sunrise: formatTime(sunTimes.sunrise),\n          sunset: formatTime(sunTimes.sunset),\n          \n          // Prayer times  \n          shacharit: formatTime(sunTimes.sunrise),\n          mincha: formatTime(sunTimes.sunset - 2.5),\n          maariv: formatTime(sunTimes.sunset + 0.75),\n          \n          // Shema and Tefilla times\n          shemaLatest: formatTime(sunTimes.sunrise + 3),\n          tefillaLatest: formatTime(sunTimes.sunrise + 4),\n          \n          // Shabbat times\n          shabbatStart: formatTime(sunTimes.sunset - 0.67), // 40 minutes\n          shabbatEnd: formatTime(sunTimes.sunset + 0.7), // 42 minutes\n          \n          // Extended times (calculated approximations)\n          minchaKetana: formatTime(sunTimes.sunset - 1.25),\n          plagHamincha: formatTime(sunTimes.sunset - 1.75),\n          beinHashmashot: formatTime(sunTimes.sunset + 0.25),\n          fastEnds: formatTime(sunTimes.sunset + 0.75),\n          kiddushLevana: formatTime(sunTimes.sunset + 4),\n          chatzot: formatTime((sunTimes.sunrise + sunTimes.sunset) / 2),\n          chatzotNight: formatTime((sunTimes.sunset + sunTimes.sunrise + 24) / 2),\n          alotHashachar: formatTime(sunTimes.sunrise - 1.33),\n          misheyakir: formatTime(sunTimes.sunrise - 0.75),\n          misheyakirMachmir: formatTime(sunTimes.sunrise - 0.5),\n          sofZmanShema: formatTime(sunTimes.sunrise + 3),\n          sofZmanTefilla: formatTime(sunTimes.sunrise + 4),\n          \n          // Basic times for quick reference\n          dawn: formatTime(sunTimes.sunrise - 1.33),\n          dusk: formatTime(sunTimes.sunset + 0.75),\n          midday: formatTime((sunTimes.sunrise + sunTimes.sunset) / 2),\n          \n          // Date information\n          date: now.toLocaleDateString('he-IL'),\n          gregorianDate: {\n            day: now.getDate(),\n            month: now.getMonth() + 1,\n            year: now.getFullYear(),\n            dayOfWeek: hebrewDayNames[now.getDay()]\n          },\n          hebrewDate: fallbackHebrewDate,\n          \n          // Parsha information\n          parsha: fallbackParshaInfo || getFallbackParsha(),\n          \n          // Real-time sync indicator\n          lastUpdated: new Date().toISOString(),\n          timezone: \"Asia/Jerusalem\",\n          fallback: true\n        };\n        \n        res.json(fallbackTimes);\n      }\n      \n    } catch (error) {\n      console.error('Error in Jewish times API:', error);\n      res.status(500).json({ message: \"שגיאה בטעינת הזמנים היהודיים\" });\n    }\n  });\n\n  // Contact route\n  app.post(\"/api/contact\", async (req, res) => {\n    try {\n      console.log('Contact message submission attempt:', req.body);\n      const messageData = insertContactMessageSchema.parse(req.body);\n      console.log('Parsed contact message data:', messageData);\n      const message = await storage.createContactMessage(messageData);\n      console.log('Contact message created successfully:', message.id);\n      res.json({ success: true, message: \"ההודעה נשלחה בהצלחה\", id: message.id });\n    } catch (error) {\n      console.error('Error creating contact message:', error);\n      res.status(400).json({ message: \"שגיאה בשליחת ההודעה\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Admin route for contact messages\n  app.get(\"/api/admin/contact-messages\", async (req, res) => {\n    try {\n      const messages = await storage.getAllContactMessages();\n      res.json(messages);\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בטעינת הודעות\" });\n    }\n  });\n\n  app.post(\"/api/admin/contact-messages/:id/read\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const message = await storage.markContactMessageAsRead(id);\n      res.json({ message });\n    } catch (error) {\n      res.status(500).json({ message: \"שגיאה בעדכון הודעה\" });\n    }\n  });\n\n  // Admin set device endpoint\n  app.post(\"/api/admin/set-device\", async (req, res) => {\n    try {\n      const { email, deviceId } = req.body;\n      \n      if (email === \"admin@police.gov.il\") {\n        const updatedUser = await storage.updateUserDeviceIdByEmail(email, deviceId);\n        res.json({ success: true, user: updatedUser });\n      } else {\n        res.status(403).json({ message: \"Unauthorized\" });\n      }\n    } catch (error) {\n      console.error(\"Admin set device error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Question visibility toggle endpoint\n  app.post(\"/api/questions/:id/set-visible\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { isVisible } = req.body;\n      \n      const question = await storage.updateQuestion(id, { isVisible });\n      res.json(question);\n    } catch (error) {\n      console.error(\"Question visibility update error:\", error);\n      res.status(500).json({ message: \"Failed to update question visibility\" });\n    }\n  });\n\n  // Admin-only: Delete question completely\n  app.delete(\"/api/admin/questions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      \n      // Delete all related answers first\n      await storage.deleteAnswersByQuestionId(id);\n      \n      // Delete the question\n      await storage.deleteQuestion(id);\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error deleting question:\", error);\n      res.status(500).json({ error: \"Failed to delete question\" });\n    }\n  });\n\n  // Admin-only: Update question content\n  app.put(\"/api/admin/questions/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { title, content } = req.body;\n      \n      const question = await storage.updateQuestion(id, {\n        title,\n        content\n      });\n      \n      res.json({ question });\n    } catch (error) {\n      console.error(\"Error updating question:\", error);\n      res.status(500).json({ error: \"Failed to update question\" });\n    }\n  });\n\n  // Mark items as viewed (remove isNew flag)\n  app.post(\"/api/admin/mark-viewed\", async (req, res) => {\n    try {\n      const { type, ids } = req.body; // type: 'users', 'questions', 'news', 'messages'\n      \n      switch (type) {\n        case 'users':\n          // Mark users as viewed when admin visits users tab\n          break;\n        case 'questions':\n          // Mark questions as viewed when admin visits questions tab\n          break;\n        case 'news':\n          // Mark news as viewed when admin visits content tab\n          break;\n        case 'messages':\n          // Mark messages as viewed when admin visits messages tab\n          break;\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Mark viewed error:\", error);\n      res.status(500).json({ message: \"Failed to mark items as viewed\" });\n    }\n  });\n\n  // Notification routes\n  app.get(\"/api/notifications/:userId\", async (req, res) => {\n    try {\n      const { userId } = req.params;\n      const notifications = await storage.getUserNotifications(userId);\n      res.json(notifications);\n    } catch (error) {\n      console.error(\"Error fetching notifications:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת ההתראות\" });\n    }\n  });\n\n  app.post(\"/api/notifications/mark-read\", async (req, res) => {\n    try {\n      const { notificationIds } = req.body;\n      await storage.markNotificationsAsRead(notificationIds);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking notifications as read:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון ההתראות\" });\n    }\n  });\n\n  app.post(\"/api/questions/:id/mark-answer-viewed\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      await storage.markQuestionAnswerViewed(id);\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking answer as viewed:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון השאלה\" });\n    }\n  });\n\n  // ==================== COMPREHENSIVE USER MANAGEMENT SYSTEM ====================\n  \n  // Get all users with statistics and filtering\n  app.get(\"/api/admin/users\", async (req, res) => {\n    try {\n      const { \n        status, \n        search, \n        sortBy = 'createdAt', \n        sortOrder = 'desc',\n        page = '1',\n        limit = '50'\n      } = req.query;\n\n      const users = await storage.getAllUsersWithStats({\n        status: status as string,\n        search: search as string,\n        sortBy: sortBy as string,\n        sortOrder: sortOrder as 'asc' | 'desc',\n        page: parseInt(page as string),\n        limit: parseInt(limit as string)\n      });\n\n      res.json(users);\n    } catch (error) {\n      console.error(\"Error fetching all users:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת המשתמשים\" });\n    }\n  });\n\n  // Get user details with activity statistics\n  app.get(\"/api/admin/users/:id\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const userDetails = await storage.getUserDetailsWithActivity(id);\n      \n      if (!userDetails) {\n        return res.status(404).json({ message: \"משתמש לא נמצא\" });\n      }\n\n      res.json(userDetails);\n    } catch (error) {\n      console.error(\"Error fetching user details:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת פרטי המשתמש\" });\n    }\n  });\n\n  // Update user status (approve/reject/revoke approval)\n  app.put(\"/api/admin/users/:id/status\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const { status, reason } = req.body;\n      const { deviceId } = req.body;\n\n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!['pending', 'approved', 'rejected'].includes(status)) {\n        return res.status(400).json({ message: \"סטטוס לא חוקי\" });\n      }\n\n      const updatedUser = await storage.updateUserStatus(id, status, reason);\n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Error updating user status:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון סטטוס המשתמש\" });\n    }\n  });\n\n  // Get user activity summary\n  app.get(\"/api/admin/users/:id/activity\", async (req, res) => {\n    try {\n      const { id } = req.params;\n      const activity = await storage.getUserActivity(id);\n      res.json(activity);\n    } catch (error) {\n      console.error(\"Error fetching user activity:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת פעילות המשתמש\" });\n    }\n  });\n\n  // Get system statistics\n  app.get(\"/api/admin/system-stats\", async (req, res) => {\n    try {\n      const stats = await storage.getSystemStatistics();\n      res.json(stats);\n    } catch (error) {\n      console.error(\"Error fetching system stats:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת נתוני המערכת\" });\n    }\n  });\n\n  // Admin: Get notification badges (unseen items count)\n  app.get(\"/api/admin/notification-badges\", async (req, res) => {\n    try {\n      const questions = await storage.getAllQuestions();\n      const contactMessages = await storage.getAllContactMessages();\n      const news = await storage.getAllNews();\n      const pendingUsers = await storage.getPendingUsers();\n      \n      const badges = {\n        questions: questions.filter(q => !q.isSeenByAdmin).length,\n        contacts: contactMessages.filter(c => !c.isSeenByAdmin).length,\n        news: news.filter(n => !n.isSeenByAdmin).length,\n        users: pendingUsers.length, // Pending users are always \"new\"\n      };\n      \n      res.json(badges);\n    } catch (error) {\n      console.error(\"Error fetching notification badges:\", error);\n      res.status(500).json({ error: \"Failed to fetch notification badges\" });\n    }\n  });\n\n  // Admin: Mark items as seen\n  app.post(\"/api/admin/mark-seen/:type\", async (req, res) => {\n    try {\n      const { type } = req.params;\n      \n      switch (type) {\n        case 'questions':\n          await storage.markQuestionsAsSeen();\n          break;\n        case 'contacts':\n          await storage.markContactsAsSeen();\n          break;\n        case 'news':\n          await storage.markNewsAsSeen();\n          break;\n        default:\n          return res.status(400).json({ error: \"Invalid type\" });\n      }\n      \n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking items as seen:\", error);\n      res.status(500).json({ error: \"Failed to mark items as seen\" });\n    }\n  });\n\n  // Bulk operations on users\n  app.post(\"/api/admin/users/bulk-action\", async (req, res) => {\n    try {\n      const { action, userIds, reason } = req.body;\n      const { deviceId } = req.body;\n\n      // Simple admin check\n      if (!deviceId || (!deviceId.includes(\"admin-device\") && deviceId !== \"admin-device-simple\")) {\n        return res.status(401).json({ message: \"Unauthorized\" });\n      }\n\n      if (!['approve', 'reject', 'revoke'].includes(action)) {\n        return res.status(400).json({ message: \"פעולה לא חוקית\" });\n      }\n\n      const results = await storage.bulkUpdateUserStatus(userIds, action, reason);\n      res.json(results);\n    } catch (error) {\n      console.error(\"Error with bulk action:\", error);\n      res.status(500).json({ message: \"שגיאה בביצוע פעולה קבוצתית\" });\n    }\n  });\n\n  // Export users data for reporting\n  app.get(\"/api/admin/users/export\", async (req, res) => {\n    try {\n      const { format = 'json' } = req.query;\n      const userData = await storage.exportUsersData();\n      \n      if (format === 'csv') {\n        // Convert to CSV format\n        const csvData = storage.convertToCsv(userData);\n        res.setHeader('Content-Type', 'text/csv');\n        res.setHeader('Content-Disposition', 'attachment; filename=users-export.csv');\n        res.send(csvData);\n      } else {\n        res.json(userData);\n      }\n    } catch (error) {\n      console.error(\"Error exporting users:\", error);\n      res.status(500).json({ message: \"שגיאה בייצוא נתוני המשתמשים\" });\n    }\n  });\n\n  // ==================== END USER MANAGEMENT SYSTEM ====================\n\n  // Admin check endpoint  \n  app.post(\"/api/admin/check\", async (req, res) => {\n    try {\n      const { deviceId } = req.body;\n      \n      if (!deviceId) {\n        return res.status(400).json({ message: \"Device ID is required\" });\n      }\n\n      // Find user by device ID\n      const user = await storage.getUserByDeviceId(deviceId);\n      \n      if (!user) {\n        return res.status(401).json({ message: \"User not found\" });\n      }\n\n      if (user.status !== \"approved\") {\n        return res.status(401).json({ message: \"User not approved\" });\n      }\n\n      res.json({ \n        isAdmin: user.isAdmin,\n        user: user\n      });\n    } catch (error) {\n      console.error(\"Admin check error:\", error);\n      res.status(500).json({ message: \"Internal server error\" });\n    }\n  });\n\n  // Admin notification badge endpoints\n  app.get(\"/api/admin/notification-counts\", async (req, res) => {\n    try {\n      const counts = await storage.getAdminNotificationCounts();\n      res.json(counts);\n    } catch (error) {\n      console.error(\"Error getting notification counts:\", error);\n      res.status(500).json({ message: \"שגיאה בטעינת מספרי ההתראות\" });\n    }\n  });\n\n  app.post(\"/api/admin/mark-users-seen\", async (req, res) => {\n    try {\n      await storage.markAllUsersAsSeenByAdmin();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking users as seen:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון המשתמשים\" });\n    }\n  });\n\n  app.post(\"/api/admin/mark-questions-seen\", async (req, res) => {\n    try {\n      await storage.markAllQuestionsAsSeenByAdmin();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking questions as seen:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון השאלות\" });\n    }\n  });\n\n  app.post(\"/api/admin/mark-contacts-seen\", async (req, res) => {\n    try {\n      await storage.markAllContactMessagesAsSeenByAdmin();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking contacts as seen:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון הפניות\" });\n    }\n  });\n\n  app.post(\"/api/admin/mark-news-seen\", async (req, res) => {\n    try {\n      await storage.markAllNewsAsSeenByAdmin();\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Error marking news as seen:\", error);\n      res.status(500).json({ message: \"שגיאה בעדכון החדשות\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":73760},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users, questions, answers, news, synagogues, dailyHalacha, videos } from \"@shared/schema\";\n\nasync function seedDatabase() {\n  try {\n    console.log(\"Starting database seeding...\");\n\n    // Add sample news\n    await db.insert(news).values([\n      {\n        title: \"עדכון בנוהלי שיטור בשבת\",\n        content: \"עדכון חשוב בנוהלי השיטור במהלך שבת וחגים. יש לעיין במסמך המצורף ולפעול בהתאם.\",\n        excerpt: \"עדכון בנוהלי שיטור בשבת וחגים\",\n        isUrgent: true,\n        createdBy: \"admin\"\n      },\n      {\n        title: \"לוח זמנים לחגים הקרובים\",\n        content: \"מצורף לוח הזמנים המעודכן לחגים הקרובים כולל שעות עבודה מיוחדות ותורנויות.\",\n        excerpt: \"לוח זמנים לחגים הקרובים\",\n        isUrgent: false,\n        createdBy: \"admin\"\n      },\n      {\n        title: \"הכשרה חדשה - הלכות שיטור\",\n        content: \"נפתחה הכשרה חדשה בנושא הלכות שיטור במצבים מיוחדים. ההרשמה פתוחה.\",\n        excerpt: \"הכשרה חדשה בהלכות שיטור\",\n        isUrgent: false,\n        createdBy: \"admin\"\n      }\n    ]);\n\n    // Add sample synagogues\n    await db.insert(synagogues).values([\n      {\n        name: \"בית כנסת משטרת ירושלים\",\n        address: \"רחוב יפו 1, ירושלים\",\n        latitude: \"31.7857\",\n        longitude: \"35.2007\",\n        shacharit: \"06:30\",\n        mincha: \"13:30\",\n        maariv: \"19:00\",\n        contact: \"רב משה כהן - 02-5391234\",\n        notes: \"בית כנסת מרכזי עם מניין קבוע\"\n      },\n      {\n        name: \"בית כנסת תחנת מרכז\",\n        address: \"רחוב דיזנגוף 50, תל אביב\",\n        latitude: \"32.0853\",\n        longitude: \"34.7818\",\n        shacharit: \"07:00\",\n        mincha: \"14:00\",\n        maariv: \"19:30\",\n        contact: \"רב יוסף לוי - 03-5241567\",\n        notes: \"תפילות בימי חול בלבד\"\n      },\n      {\n        name: \"בית כנסת משטרת חיפה\",\n        address: \"שדרות הציונות 15, חיפה\",\n        shacharit: \"06:45\",\n        mincha: \"13:45\",\n        maariv: \"19:15\",\n        contact: \"רב דוד אברהם - 04-8612345\"\n      }\n    ]);\n\n    // Add daily halacha\n    await db.insert(dailyHalacha).values([\n      {\n        date: new Date(),\n        title: \"הלכות שיטור בשבת\",\n        content: \"שוטר יהודי רשאי לשאת נשק בשבת כאשר הדבר נחוץ לביטחון הציבור ולמניעת סכנת נפשות. יש להימנע מפעולות שאינן הכרחיות ולהתייעץ עם הרב המשטרתי במקרים מורכבים.\",\n        createdBy: \"admin\"\n      }\n    ]);\n\n    // Add sample videos\n    await db.insert(videos).values([\n      {\n        title: \"הלכות שיטור בשבת וחגים\",\n        description: \"הרצאה מקיפה על הלכות שיטור במהלך שבת וחגים - מה מותר ומה אסור\",\n        youtubeId: \"dQw4w9WgXcQ\",\n        addedBy: \"admin\"\n      },\n      {\n        title: \"כשרות במשטרה\",\n        description: \"דיון בנושא שמירת כשרות במהלך תורנויות וביצוע משימות\",\n        youtubeId: \"dQw4w9WgXcQ\",\n        addedBy: \"admin\"\n      },\n      {\n        title: \"תפילה בתנאי שטח\",\n        description: \"איך לקיים מצוות תפילה במהלך משימות מבצעיות ותורנויות\",\n        youtubeId: \"dQw4w9WgXcQ\",\n        addedBy: \"admin\"\n      }\n    ]);\n\n    console.log(\"Database seeding completed successfully!\");\n\n  } catch (error) {\n    console.error(\"Error seeding database:\", error);\n  }\n}\n\nexport { seedDatabase };\n\n// Run seeding if this file is executed directly\nseedDatabase().then(() => process.exit(0));","size_bytes":4013},"server/seedAdmin.ts":{"content":"import { storage } from \"./storage\";\nimport { users } from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq } from \"drizzle-orm\";\n\n// Create admin user for system management\nexport async function seedAdmin() {\n  const adminEmail = \"admin@police.gov.il\";\n  \n  try {\n    // Check if admin already exists\n    const existingAdmin = await storage.getUserByEmail(adminEmail);\n    \n    if (!existingAdmin) {\n      console.log(\"Creating admin user...\");\n      \n      const adminUser = await storage.createUser({\n        fullName: \"מנהל המערכת\",\n        personalId: \"1234567\",\n        phone: \"0500000000\",\n        email: adminEmail,\n        password: \"admin123\",\n      });\n      \n      // Update to admin status after creation\n      await storage.updateUserStatus(adminUser.id, \"approved\", \"system\");\n      \n      // Update admin flag directly\n      await db.update(users).set({ isAdmin: true }).where(eq(users.id, adminUser.id));\n      \n      console.log(\"Admin user created successfully!\");\n      console.log(\"=== פרטי כניסה למנהל ===\");\n      console.log(\"אימייל: admin@police.gov.il\");\n      console.log(\"סיסמה: admin123\");\n      console.log(\"========================\");\n      \n      return adminUser;\n    } else {\n      console.log(\"Admin user already exists\");\n      console.log(\"=== פרטי כניסה למנהל ===\");\n      console.log(\"אימייל: admin@police.gov.il\");\n      console.log(\"סיסמה: admin123\");\n      console.log(\"========================\");\n      return existingAdmin;\n    }\n  } catch (error) {\n    console.error(\"Error creating admin user:\", error);\n  }\n}","size_bytes":1623},"server/storage-notifications.ts":{"content":"\n// Storage methods for notifications - to be integrated into main storage file\n\n// Add these methods to your storage class:\n\n// Create notification\nasync createNotification(data: InsertNotification): Promise<Notification> {\n  const [notification] = await this.db.insert(notifications).values(data).returning();\n  return notification;\n}\n\n// Get user notifications\nasync getUserNotifications(userId: string): Promise<Notification[]> {\n  return await this.db\n    .select()\n    .from(notifications)\n    .where(eq(notifications.userId, userId))\n    .orderBy(desc(notifications.createdAt));\n}\n\n// Mark notifications as read\nasync markNotificationsAsRead(notificationIds: string[]): Promise<void> {\n  await this.db\n    .update(notifications)\n    .set({ isRead: true })\n    .where(inArray(notifications.id, notificationIds));\n}\n\n// Mark question as answered (set hasNewAnswer flag)\nasync markQuestionAnswered(questionId: string): Promise<void> {\n  await this.db\n    .update(questions)\n    .set({ \n      hasNewAnswer: true, \n      answeredAt: new Date() \n    })\n    .where(eq(questions.id, questionId));\n}\n\n// Mark question answer as viewed (remove hasNewAnswer flag)\nasync markQuestionAnswerViewed(questionId: string): Promise<void> {\n  await this.db\n    .update(questions)\n    .set({ hasNewAnswer: false })\n    .where(eq(questions.id, questionId));\n}\n\n// Get question by ID\nasync getQuestionById(questionId: string): Promise<Question | null> {\n  const [question] = await this.db\n    .select()\n    .from(questions)\n    .where(eq(questions.id, questionId));\n  return question || null;\n}\n","size_bytes":1579},"server/storage.ts":{"content":"import { \n  users, questions, answers, news, synagogues, dailyHalacha, videos, contactMessages,\n  type User, type InsertUser, type Question, type InsertQuestion,\n  type Answer, type InsertAnswer, type News, type InsertNews,\n  type Synagogue, type InsertSynagogue, type DailyHalacha, type InsertDailyHalacha,\n  type Video, type InsertVideo, type ContactMessage, type InsertContactMessage\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, desc, and, ilike, or, sql, gte } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User operations\n  getUser(id: string): Promise<User | undefined>;\n  getUserByDeviceId(deviceId: string): Promise<User | undefined>;\n  getUserByPersonalId(personalId: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUserStatus(id: string, status: \"pending\" | \"approved\" | \"rejected\", approvedBy?: string): Promise<User>;\n  updateUserDeviceId(id: string, deviceId: string): Promise<User>;\n  getPendingUsers(): Promise<User[]>;\n  updateUserDeviceIdByEmail(email: string, deviceId: string): Promise<User>;\n  upsertUser(user: { id: string; email: string; firstName: string; lastName: string; profileImageUrl: string }): Promise<User>;\n\n  // Question operations\n  createQuestion(question: InsertQuestion): Promise<Question>;\n  getQuestionsByUser(userId: string): Promise<Question[]>;\n  getAllQuestions(): Promise<Question[]>;\n  getUnansweredQuestions(): Promise<Question[]>;\n  getQuestionWithAnswers(id: string): Promise<(Question & { answers: Answer[]; user?: { fullName: string } }) | undefined>;\n  updateQuestionStatus(id: string, status: \"pending\" | \"answered\" | \"closed\"): Promise<Question>;\n  updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question>;\n  approveQuestion(id: string, approvedBy: string): Promise<Question>;\n\n  // Answer operations\n  createAnswer(answer: InsertAnswer): Promise<Answer>;\n  getAnswersByQuestion(questionId: string): Promise<Answer[]>;\n  updateAnswer(id: string, data: { content: string }): Promise<Answer>;\n\n  // News operations\n  getAllNews(): Promise<News[]>;\n  createNews(news: InsertNews): Promise<News>;\n  updateNews(id: string, data: Partial<InsertNews>): Promise<News>;\n  deleteNews(id: string): Promise<void>;\n  getRecentNews(limit?: number): Promise<News[]>;\n\n  // Synagogue operations\n  getAllSynagogues(): Promise<Synagogue[]>;\n  createSynagogue(synagogue: InsertSynagogue): Promise<Synagogue>;\n  updateSynagogue(id: string, data: Partial<InsertSynagogue>): Promise<Synagogue>;\n  deleteSynagogue(id: string): Promise<void>;\n\n  // Daily Halacha operations\n  getTodayHalacha(): Promise<DailyHalacha | undefined>;\n  createDailyHalacha(halacha: InsertDailyHalacha): Promise<DailyHalacha>;\n  updateDailyHalacha(id: string, data: Partial<InsertDailyHalacha>): Promise<DailyHalacha>;\n  deleteDailyHalacha(id: string): Promise<void>;\n\n  // Video operations\n  getAllVideos(): Promise<Video[]>;\n  createVideo(video: InsertVideo): Promise<Video>;\n  updateVideo(id: string, data: Partial<InsertVideo>): Promise<Video>;\n  deleteVideo(id: string): Promise<void>;\n\n  // Contact Message operations\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getAllContactMessages(): Promise<ContactMessage[]>;\n  markContactMessageAsRead(id: string): Promise<ContactMessage>;\n\n  // Search operations\n  searchQuestions(query: string): Promise<Question[]>;\n\n  // Enhanced User Management operations\n  getAllUsersWithStats(params: {\n    status?: string;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n    page?: number;\n    limit?: number;\n  }): Promise<{\n    users: (User & { questionsCount: number; lastActivity: string })[];\n    total: number;\n    pages: number;\n  }>;\n  \n  getUserDetailsWithActivity(id: string): Promise<{\n    user: User;\n    statistics: {\n      questionsSubmitted: number;\n      questionsAnswered: number;\n      lastLogin: string | null;\n      totalLoginCount: number;\n      joinDate: string;\n      accountStatus: string;\n    };\n    recentActivity: any[];\n  } | null>;\n  \n  updateUserStatus(id: string, status: string, reason?: string): Promise<User>;\n  getUserActivity(id: string): Promise<any[]>;\n  getSystemStatistics(): Promise<{\n    totalUsers: number;\n    pendingUsers: number;\n    approvedUsers: number;\n    rejectedUsers: number;\n    totalQuestions: number;\n    answeredQuestions: number;\n    pendingQuestions: number;\n    recentRegistrations: number;\n    activeUsers: number;\n  }>;\n  \n  bulkUpdateUserStatus(userIds: string[], action: string, reason?: string): Promise<any>;\n  exportUsersData(): Promise<any[]>;\n  convertToCsv(data: any[]): string;\n\n  // Notification operations (missing methods)\n  getUserNotifications(userId: string): Promise<any[]>;\n  markNotificationsAsRead(notificationIds: string[]): Promise<void>;\n  markQuestionAnswerViewed(questionId: string): Promise<void>;\n  markQuestionAnswered(questionId: string): Promise<void>;\n  getQuestionById(id: string): Promise<Question | undefined>;\n  createNotification(notification: any): Promise<any>;\n  \n  // Admin badge/notification operations\n  markAllUsersAsSeenByAdmin(): Promise<void>;\n  markAllQuestionsAsSeenByAdmin(): Promise<void>;\n  markAllContactMessagesAsSeenByAdmin(): Promise<void>;\n  markAllNewsAsSeenByAdmin(): Promise<void>;\n  getAdminNotificationCounts(): Promise<{\n    users: number;\n    questions: number;\n    contacts: number;\n    news: number;\n  }>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByDeviceId(deviceId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.deviceId, deviceId));\n    return user || undefined;\n  }\n\n  async getUserByPersonalId(personalId: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.personalId, personalId));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(insertUser)\n      .returning();\n    return user;\n  }\n\n  async updateUserStatus(id: string, status: \"pending\" | \"approved\" | \"rejected\", approvedBy?: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ \n        status, \n        approvedBy,\n        approvedAt: status === \"approved\" ? new Date() : null\n      })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async updateUserDeviceId(id: string, deviceId: string): Promise<User> {\n    const [user] = await db\n      .update(users)\n      .set({ deviceId, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return user;\n  }\n\n  async getPendingUsers(): Promise<User[]> {\n    return db.select().from(users).where(eq(users.status, \"pending\")).orderBy(desc(users.createdAt));\n  }\n\n  async updateUserDeviceIdByEmail(email: string, deviceId: string): Promise<User> {\n    const [updatedUser] = await db\n      .update(users)\n      .set({ deviceId })\n      .where(eq(users.email, email))\n      .returning();\n    return updatedUser;\n  }\n\n  async createQuestion(question: InsertQuestion): Promise<Question> {\n    const [newQuestion] = await db\n      .insert(questions)\n      .values(question)\n      .returning();\n    return newQuestion;\n  }\n\n  async getQuestionsByUser(userId: string): Promise<Question[]> {\n    return db.select().from(questions).where(eq(questions.userId, userId)).orderBy(desc(questions.createdAt));\n  }\n\n  async getAllQuestions(): Promise<Question[]> {\n    const allQuestions = await db.select().from(questions).orderBy(desc(questions.createdAt));\n    console.log(`getAllQuestions: Found ${allQuestions.length} questions`);\n    console.log('Questions visibility:', allQuestions.map(q => ({ id: q.id, title: q.title, isVisible: q.isVisible })));\n    return allQuestions;\n  }\n\n  async getQuestionWithAnswers(id: string): Promise<(Question & { answers: Answer[]; user?: { fullName: string } }) | undefined> {\n    const [question] = await db.select({\n      id: questions.id,\n      userId: questions.userId,\n      title: questions.title,\n      category: questions.category,\n      content: questions.content,\n      isUrgent: questions.isUrgent,\n      isPrivate: questions.isPrivate,\n      status: questions.status,\n      isApproved: questions.isApproved,\n      approvedBy: questions.approvedBy,\n      approvedAt: questions.approvedAt,\n      createdAt: questions.createdAt,\n      updatedAt: questions.updatedAt,\n      userFullName: users.fullName,\n    })\n    .from(questions)\n    .leftJoin(users, eq(questions.userId, users.id))\n    .where(eq(questions.id, id));\n\n    if (!question) return undefined;\n\n    const questionAnswers = await db.select().from(answers).where(eq(answers.questionId, id));\n\n    return {\n      ...question,\n      answers: questionAnswers,\n      user: { fullName: question.userFullName || \"משתמש\" },\n      isNew: true,\n      isVisible: false,\n      isSeenByAdmin: false,\n      hasNewAnswer: false,\n      answerNotificationSent: false,\n      answeredAt: null\n    } as Question & { answers: Answer[]; user: { fullName: string } };\n  }\n\n  async updateQuestion(id: string, data: Partial<InsertQuestion>): Promise<Question> {\n    const [updated] = await db\n      .update(questions)\n      .set({ ...data, updatedAt: new Date() })\n      .where(eq(questions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async approveQuestion(id: string, approvedBy: string): Promise<Question> {\n    const [updated] = await db\n      .update(questions)\n      .set({ \n        isApproved: true, \n        approvedBy, \n        approvedAt: new Date(),\n        updatedAt: new Date()\n      })\n      .where(eq(questions.id, id))\n      .returning();\n    return updated;\n  }\n\n  async getUnansweredQuestions(): Promise<Question[]> {\n    return db.select().from(questions).where(eq(questions.status, \"pending\")).orderBy(desc(questions.createdAt));\n  }\n\n  async updateQuestionStatus(id: string, status: \"pending\" | \"answered\" | \"closed\"): Promise<Question> {\n    const [question] = await db\n      .update(questions)\n      .set({ status })\n      .where(eq(questions.id, id))\n      .returning();\n    return question;\n  }\n\n  async createAnswer(answer: InsertAnswer): Promise<Answer> {\n    const [newAnswer] = await db\n      .insert(answers)\n      .values(answer)\n      .returning();\n    \n    // Update question status to answered\n    await this.updateQuestionStatus(answer.questionId, \"answered\");\n    \n    return newAnswer;\n  }\n\n  async getAnswersByQuestion(questionId: string): Promise<Answer[]> {\n    return db.select().from(answers).where(eq(answers.questionId, questionId)).orderBy(desc(answers.createdAt));\n  }\n\n  async updateAnswer(id: string, data: { content: string }): Promise<Answer> {\n    const [updated] = await db\n      .update(answers)\n      .set({ content: data.content, updatedAt: new Date() })\n      .where(eq(answers.id, id))\n      .returning();\n    return updated;\n  }\n\n  async deleteAnswersByQuestionId(questionId: string): Promise<void> {\n    await db.delete(answers).where(eq(answers.questionId, questionId));\n  }\n\n  async deleteQuestion(id: string): Promise<void> {\n    await db.delete(questions).where(eq(questions.id, id));\n  }\n\n  async getAllNews(): Promise<News[]> {\n    return db.select().from(news).orderBy(desc(news.publishedAt));\n  }\n\n  async createNews(newsItem: InsertNews): Promise<News> {\n    const [newNews] = await db\n      .insert(news)\n      .values(newsItem)\n      .returning();\n    return newNews;\n  }\n\n  async updateNews(id: string, data: Partial<InsertNews>): Promise<News> {\n    const [newsItem] = await db.update(news).set(data).where(eq(news.id, id)).returning();\n    return newsItem;\n  }\n\n  async deleteNews(id: string): Promise<void> {\n    await db.delete(news).where(eq(news.id, id));\n  }\n\n  async getRecentNews(limit: number = 5): Promise<News[]> {\n    return db.select().from(news).orderBy(desc(news.publishedAt)).limit(limit);\n  }\n\n  async getAllSynagogues(): Promise<Synagogue[]> {\n    return db.select().from(synagogues);\n  }\n\n  async createSynagogue(synagogue: InsertSynagogue): Promise<Synagogue> {\n    const [newSynagogue] = await db\n      .insert(synagogues)\n      .values(synagogue)\n      .returning();\n    return newSynagogue;\n  }\n\n  async updateSynagogue(id: string, data: Partial<InsertSynagogue>): Promise<Synagogue> {\n    const [synagogue] = await db.update(synagogues).set(data).where(eq(synagogues.id, id)).returning();\n    return synagogue;\n  }\n\n  async deleteSynagogue(id: string): Promise<void> {\n    await db.delete(synagogues).where(eq(synagogues.id, id));\n  }\n\n  async getTodayHalacha(): Promise<DailyHalacha | undefined> {\n    const today = new Date();\n    today.setHours(0, 0, 0, 0);\n    const tomorrow = new Date(today);\n    tomorrow.setDate(tomorrow.getDate() + 1);\n\n    const [halacha] = await db\n      .select()\n      .from(dailyHalacha)\n      .where(and(\n        eq(dailyHalacha.date, today)\n      ));\n    \n    return halacha || undefined;\n  }\n\n  async createDailyHalacha(halacha: InsertDailyHalacha): Promise<DailyHalacha> {\n    const [newHalacha] = await db\n      .insert(dailyHalacha)\n      .values(halacha)\n      .returning();\n    return newHalacha;\n  }\n\n  async updateDailyHalacha(id: string, data: Partial<InsertDailyHalacha>): Promise<DailyHalacha> {\n    const [halacha] = await db.update(dailyHalacha).set(data).where(eq(dailyHalacha.id, id)).returning();\n    return halacha;\n  }\n\n  async deleteDailyHalacha(id: string): Promise<void> {\n    await db.delete(dailyHalacha).where(eq(dailyHalacha.id, id));\n  }\n\n  async getAllHalachot(): Promise<DailyHalacha[]> {\n    return db.select().from(dailyHalacha).orderBy(desc(dailyHalacha.date));\n  }\n\n  async getAllVideos(): Promise<Video[]> {\n    return db.select().from(videos).orderBy(desc(videos.createdAt));\n  }\n\n  async createVideo(video: InsertVideo): Promise<Video> {\n    const [newVideo] = await db\n      .insert(videos)\n      .values(video)\n      .returning();\n    return newVideo;\n  }\n\n  async updateVideo(id: string, data: Partial<InsertVideo>): Promise<Video> {\n    const [video] = await db.update(videos).set(data).where(eq(videos.id, id)).returning();\n    return video;\n  }\n\n  async deleteVideo(id: string): Promise<void> {\n    await db.delete(videos).where(eq(videos.id, id));\n  }\n\n  async createContactMessage(message: InsertContactMessage): Promise<ContactMessage> {\n    const [newMessage] = await db\n      .insert(contactMessages)\n      .values(message)\n      .returning();\n    return newMessage;\n  }\n\n  async getAllContactMessages(): Promise<ContactMessage[]> {\n    return db.select().from(contactMessages).orderBy(desc(contactMessages.createdAt));\n  }\n\n  async markContactMessageAsRead(id: string): Promise<ContactMessage> {\n    const [updatedMessage] = await db\n      .update(contactMessages)\n      .set({ isRead: true })\n      .where(eq(contactMessages.id, id))\n      .returning();\n    return updatedMessage;\n  }\n\n  async searchQuestions(query: string): Promise<Question[]> {\n    return db\n      .select()\n      .from(questions)\n      .where(\n        or(\n          ilike(questions.content, `%${query}%`),\n          ilike(questions.category, `%${query}%`)\n        )\n      )\n      .orderBy(desc(questions.createdAt));\n  }\n\n  async upsertUser(userData: { id: string; email: string; firstName: string; lastName: string; profileImageUrl: string }): Promise<User> {\n    // Check if user exists\n    const existingUser = await this.getUserByEmail(userData.email);\n    \n    if (existingUser) {\n      // Update existing user\n      const [updatedUser] = await db\n        .update(users)\n        .set({\n          fullName: `${userData.firstName} ${userData.lastName}`,\n          updatedAt: new Date()\n        })\n        .where(eq(users.id, existingUser.id))\n        .returning();\n      return updatedUser;\n    } else {\n      // Create new user\n      const newUser = await this.createUser({\n        fullName: `${userData.firstName} ${userData.lastName}`,\n        personalId: userData.id.slice(-7), // Use last 7 chars of ID as personal ID\n        phone: '0000000000', // Default phone\n        email: userData.email,\n        password: 'replit-auth' // Default password for Replit auth users\n      });\n      return newUser;\n    }\n  }\n\n  // ==================== COMPREHENSIVE USER MANAGEMENT METHODS ====================\n  \n  async getAllUsersWithStats(params: {\n    status?: string;\n    search?: string;\n    sortBy?: string;\n    sortOrder?: 'asc' | 'desc';\n    page?: number;\n    limit?: number;\n  }): Promise<{\n    users: (User & { questionsCount: number; lastActivity: string })[];\n    total: number;\n    pages: number;\n  }> {\n    const { status, search, sortBy = 'createdAt', sortOrder = 'desc', page = 1, limit = 50 } = params;\n    const offset = (page - 1) * limit;\n\n    // Build base query with filters\n    const filters = [];\n    if (status && status !== 'all') {\n      filters.push(eq(users.status, status as any));\n    }\n    if (search) {\n      filters.push(\n        or(\n          ilike(users.fullName, `%${search}%`),\n          ilike(users.email, `%${search}%`),\n          ilike(users.phone, `%${search}%`),\n          ilike(users.personalId, `%${search}%`)\n        )\n      );\n    }\n\n    // Get filtered users with simplified approach\n    const allUsers = await db.select().from(users);\n    let filteredUsers = allUsers;\n\n    // Apply filters manually for simplicity\n    if (status && status !== 'all') {\n      filteredUsers = filteredUsers.filter(user => user.status === status);\n    }\n    if (search) {\n      const searchLower = search.toLowerCase();\n      filteredUsers = filteredUsers.filter(user => \n        user.fullName.toLowerCase().includes(searchLower) ||\n        user.email.toLowerCase().includes(searchLower) ||\n        user.phone.includes(search) ||\n        user.personalId.includes(search)\n      );\n    }\n\n    // Sort users\n    filteredUsers.sort((a, b) => {\n      let aVal: any, bVal: any;\n      switch (sortBy) {\n        case 'fullName':\n          aVal = a.fullName;\n          bVal = b.fullName;\n          break;\n        case 'email':\n          aVal = a.email;\n          bVal = b.email;\n          break;\n        case 'status':\n          aVal = a.status;\n          bVal = b.status;\n          break;\n        case 'loginCount':\n          aVal = a.loginCount || 0;\n          bVal = b.loginCount || 0;\n          break;\n        case 'lastLoginAt':\n          aVal = a.lastLoginAt || new Date(0);\n          bVal = b.lastLoginAt || new Date(0);\n          break;\n        default:\n          aVal = a.createdAt;\n          bVal = b.createdAt;\n      }\n      \n      if (sortOrder === 'desc') {\n        return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;\n      } else {\n        return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\n      }\n    });\n\n    // Apply pagination\n    const total = filteredUsers.length;\n    const pages = Math.ceil(total / limit);\n    const paginatedUsers = filteredUsers.slice(offset, offset + limit);\n\n    // Add question counts\n    const usersWithStats = await Promise.all(\n      paginatedUsers.map(async (user) => {\n        const userQuestions = await db\n          .select()\n          .from(questions)\n          .where(eq(questions.userId, user.id));\n        \n        return {\n          ...user,\n          questionsCount: userQuestions.length,\n          lastActivity: user.lastLoginAt?.toISOString() || user.createdAt.toISOString()\n        };\n      })\n    );\n\n    return {\n      users: usersWithStats,\n      total,\n      pages\n    };\n  }\n\n  async getUserDetailsWithActivity(id: string): Promise<{\n    user: User;\n    statistics: {\n      questionsSubmitted: number;\n      questionsAnswered: number;\n      lastLogin: string | null;\n      totalLoginCount: number;\n      joinDate: string;\n      accountStatus: string;\n    };\n    recentActivity: any[];\n  } | null> {\n    const user = await this.getUser(id);\n    if (!user) return null;\n\n    // Get user questions\n    const userQuestions = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.userId, id));\n\n    const answeredQuestions = userQuestions.filter(q => q.status === 'answered');\n\n    // Get recent activity (questions and answers)\n    const recentQuestions = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.userId, id))\n      .orderBy(desc(questions.createdAt))\n      .limit(10);\n\n    const recentActivity = recentQuestions.map(q => ({\n      type: 'question',\n      title: q.title || 'שאלה',\n      content: q.content.substring(0, 100) + '...',\n      date: q.createdAt,\n      status: q.status\n    }));\n\n    return {\n      user,\n      statistics: {\n        questionsSubmitted: userQuestions.length,\n        questionsAnswered: answeredQuestions.length,\n        lastLogin: user.lastLoginAt?.toISOString() || null,\n        totalLoginCount: user.loginCount || 0,\n        joinDate: user.createdAt.toISOString(),\n        accountStatus: user.status\n      },\n      recentActivity\n    };\n  }\n\n\n  async getUserActivity(id: string): Promise<any[]> {\n    const userQuestions = await db\n      .select()\n      .from(questions)\n      .where(eq(questions.userId, id))\n      .orderBy(desc(questions.createdAt));\n\n    return userQuestions.map(q => ({\n      type: 'question',\n      title: q.title || 'שאלה',\n      content: q.content.substring(0, 150) + '...',\n      date: q.createdAt,\n      status: q.status,\n      category: q.category\n    }));\n  }\n\n  async getSystemStatistics(): Promise<{\n    totalUsers: number;\n    pendingUsers: number;\n    approvedUsers: number;\n    rejectedUsers: number;\n    totalQuestions: number;\n    answeredQuestions: number;\n    pendingQuestions: number;\n    recentRegistrations: number;\n    activeUsers: number;\n  }> {\n    // Simplified approach to avoid complex counting queries\n    const allUsers = await db.select().from(users);\n    const allQuestions = await db.select().from(questions);\n    \n    const sevenDaysAgo = new Date();\n    sevenDaysAgo.setDate(sevenDaysAgo.getDate() - 7);\n    const thirtyDaysAgo = new Date();\n    thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\n\n    return {\n      totalUsers: allUsers.length,\n      pendingUsers: allUsers.filter(u => u.status === 'pending').length,\n      approvedUsers: allUsers.filter(u => u.status === 'approved').length,\n      rejectedUsers: allUsers.filter(u => u.status === 'rejected').length,\n      totalQuestions: allQuestions.length,\n      answeredQuestions: allQuestions.filter(q => q.status === 'answered').length,\n      pendingQuestions: allQuestions.filter(q => q.status === 'pending').length,\n      recentRegistrations: allUsers.filter(u => u.createdAt >= sevenDaysAgo).length,\n      activeUsers: allUsers.filter(u => u.lastLoginAt && u.lastLoginAt >= thirtyDaysAgo).length\n    };\n  }\n\n  async bulkUpdateUserStatus(userIds: string[], action: string, reason?: string): Promise<any> {\n    const status = action === 'approve' ? 'approved' : \n                  action === 'reject' ? 'rejected' : \n                  action === 'revoke' ? 'pending' : 'pending';\n\n    const updateData: any = {\n      status,\n      updatedAt: new Date()\n    };\n\n    if (action === 'approve') {\n      updateData.approvedAt = new Date();\n      updateData.approvedBy = 'admin-system';\n    }\n\n    const results = await Promise.all(\n      userIds.map(async (id) => {\n        try {\n          const [updatedUser] = await db\n            .update(users)\n            .set(updateData)\n            .where(eq(users.id, id))\n            .returning();\n          return { id, success: true, user: updatedUser };\n        } catch (error: any) {\n          return { id, success: false, error: error?.message || 'Unknown error' };\n        }\n      })\n    );\n\n    return {\n      successful: results.filter(r => r.success).length,\n      failed: results.filter(r => !r.success).length,\n      results\n    };\n  }\n\n  // Notification badges functions\n  async markQuestionsAsSeen() {\n    try {\n      await db\n        .update(questions)\n        .set({ isSeenByAdmin: true })\n        .where(eq(questions.isSeenByAdmin, false));\n    } catch (error) {\n      console.error(\"Error marking questions as seen:\", error);\n      throw error;\n    }\n  }\n\n  async markContactsAsSeen() {\n    try {\n      await db\n        .update(contactMessages)\n        .set({ isSeenByAdmin: true })\n        .where(eq(contactMessages.isSeenByAdmin, false));\n    } catch (error) {\n      console.error(\"Error marking contacts as seen:\", error);\n      throw error;\n    }\n  }\n\n  async markNewsAsSeen() {\n    try {\n      await db\n        .update(news)\n        .set({ isSeenByAdmin: true })\n        .where(eq(news.isSeenByAdmin, false));\n    } catch (error) {\n      console.error(\"Error marking news as seen:\", error);\n      throw error;\n    }\n  }\n\n  async exportUsersData(): Promise<any[]> {\n    const allUsers = await db.select().from(users).orderBy(desc(users.createdAt));\n    \n    return allUsers.map(user => ({\n      id: user.id,\n      fullName: user.fullName,\n      email: user.email,\n      phone: user.phone,\n      status: user.status,\n      isAdmin: user.isAdmin,\n      createdAt: user.createdAt.toISOString(),\n      approvedAt: user.approvedAt?.toISOString() || null,\n      lastLoginAt: user.lastLoginAt?.toISOString() || null,\n      loginCount: user.loginCount || 0,\n      questionsSubmitted: user.questionsSubmitted || 0\n    }));\n  }\n\n  convertToCsv(data: any[]): string {\n    if (data.length === 0) return '';\n    \n    const headers = Object.keys(data[0]);\n    const csvRows = [headers.join(',')];\n    \n    for (const row of data) {\n      const values = headers.map(header => {\n        const value = row[header];\n        return typeof value === 'string' ? `\"${value.replace(/\"/g, '\"\"')}\"` : value;\n      });\n      csvRows.push(values.join(','));\n    }\n    \n    return csvRows.join('\\n');\n  }\n\n  // ==================== NOTIFICATION METHODS ====================\n  \n  async getUserNotifications(userId: string): Promise<any[]> {\n    // For now, return empty array since notifications table might not exist\n    // This should be implemented with proper notifications table\n    return [];\n  }\n\n  async markNotificationsAsRead(notificationIds: string[]): Promise<void> {\n    // Placeholder implementation\n    return;\n  }\n\n  async markQuestionAnswerViewed(questionId: string): Promise<void> {\n    await db\n      .update(questions)\n      .set({ hasNewAnswer: false })\n      .where(eq(questions.id, questionId));\n  }\n\n  async markQuestionAnswered(questionId: string): Promise<void> {\n    await db\n      .update(questions)\n      .set({ \n        status: 'answered',\n        answeredAt: new Date(),\n        hasNewAnswer: true\n      })\n      .where(eq(questions.id, questionId));\n  }\n\n  async getQuestionById(id: string): Promise<Question | undefined> {\n    const [question] = await db.select().from(questions).where(eq(questions.id, id));\n    return question;\n  }\n\n  async createNotification(notification: any): Promise<any> {\n    // Placeholder implementation - should create notification in notifications table\n    return notification;\n  }\n\n  // Admin badge/notification operations\n  async markAllUsersAsSeenByAdmin(): Promise<void> {\n    await db\n      .update(users)\n      .set({ isSeenByAdmin: true })\n      .where(eq(users.isSeenByAdmin, false));\n  }\n\n  async markAllQuestionsAsSeenByAdmin(): Promise<void> {\n    await db\n      .update(questions)\n      .set({ isSeenByAdmin: true })\n      .where(eq(questions.isSeenByAdmin, false));\n  }\n\n  async markAllContactMessagesAsSeenByAdmin(): Promise<void> {\n    await db\n      .update(contactMessages)\n      .set({ isSeenByAdmin: true })\n      .where(eq(contactMessages.isSeenByAdmin, false));\n  }\n\n  async markAllNewsAsSeenByAdmin(): Promise<void> {\n    await db\n      .update(news)\n      .set({ isSeenByAdmin: true })\n      .where(eq(news.isSeenByAdmin, false));\n  }\n\n  async getAdminNotificationCounts(): Promise<{\n    users: number;\n    questions: number;\n    contacts: number;\n    news: number;\n  }> {\n    // Calculate 24 hours ago\n    const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n\n    const [userCount] = await db\n      .select({ count: sql`count(*)`.as('count') })\n      .from(users)\n      .where(and(\n        eq(users.status, \"pending\"),\n        eq(users.isSeenByAdmin, false),\n        sql`${users.createdAt} >= ${twentyFourHoursAgo.toISOString()}`\n      ));\n\n    const [questionCount] = await db\n      .select({ count: sql`count(*)`.as('count') })\n      .from(questions)\n      .where(and(\n        eq(questions.status, \"pending\"),\n        eq(questions.isSeenByAdmin, false),\n        sql`${questions.createdAt} >= ${twentyFourHoursAgo.toISOString()}`\n      ));\n\n    const [contactCount] = await db\n      .select({ count: sql`count(*)`.as('count') })\n      .from(contactMessages)\n      .where(and(\n        eq(contactMessages.isSeenByAdmin, false),\n        sql`${contactMessages.createdAt} >= ${twentyFourHoursAgo.toISOString()}`\n      ));\n\n    const [newsCount] = await db\n      .select({ count: sql`count(*)`.as('count') })\n      .from(news)\n      .where(and(\n        eq(news.isSeenByAdmin, false),\n        sql`${news.publishedAt} >= ${twentyFourHoursAgo.toISOString()}`\n      ));\n\n    return {\n      users: Number(userCount?.count || 0),\n      questions: Number(questionCount?.count || 0),\n      contacts: Number(contactCount?.count || 0),\n      news: Number(newsCount?.count || 0),\n    };\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":29733},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql, relations } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, boolean, integer, index, jsonb } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table with required Hebrew fields and admin approval system\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  // Required Hebrew fields\n  fullName: text(\"full_name\").notNull(),\n  personalId: text(\"personal_id\").unique().notNull(),\n  phone: text(\"phone\").notNull(),\n  email: text(\"email\").unique().notNull(),\n  password: text(\"password\").notNull(),\n  deviceId: text(\"device_id\").unique(),\n  // System fields\n  status: text(\"status\", { enum: [\"pending\", \"approved\", \"rejected\"] }).default(\"pending\").notNull(),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  isNew: boolean(\"is_new\").default(true).notNull(),\n  isSeenByAdmin: boolean(\"is_seen_by_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n  approvedAt: timestamp(\"approved_at\"),\n  approvedBy: varchar(\"approved_by\"),\n  // Usage statistics\n  lastLoginAt: timestamp(\"last_login_at\"),\n  loginCount: integer(\"login_count\").default(0).notNull(),\n  questionsSubmitted: integer(\"questions_submitted\").default(0).notNull(),\n});\n\n// Questions table\nexport const questions = pgTable(\"questions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  title: text(\"title\").notNull().default(\"\"),\n  category: text(\"category\").notNull(),\n  content: text(\"content\").notNull(),\n  isUrgent: boolean(\"is_urgent\").default(false).notNull(),\n  isPrivate: boolean(\"is_private\").default(false).notNull(),\n  isVisible: boolean(\"is_visible\").default(false).notNull(),\n  status: text(\"status\", { enum: [\"pending\", \"answered\", \"closed\"] }).default(\"pending\").notNull(),\n  isApproved: boolean(\"is_approved\").default(false).notNull(),\n  isNew: boolean(\"is_new\").default(true).notNull(),\n  hasNewAnswer: boolean(\"has_new_answer\").default(false).notNull(),\n  answerNotificationSent: boolean(\"answer_notification_sent\").default(false).notNull(),\n  isSeenByAdmin: boolean(\"is_seen_by_admin\").default(false).notNull(),\n  approvedBy: varchar(\"approved_by\"),\n  approvedAt: timestamp(\"approved_at\"),\n  answeredAt: timestamp(\"answered_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Answers table\nexport const answers = pgTable(\"answers\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  questionId: varchar(\"question_id\").references(() => questions.id).notNull(),\n  content: text(\"content\").notNull(),\n  answeredBy: varchar(\"answered_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// News table\nexport const news = pgTable(\"news\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  content: text(\"content\").notNull(),\n  excerpt: text(\"excerpt\"),\n  isUrgent: boolean(\"is_urgent\").default(false).notNull(),\n  isNew: boolean(\"is_new\").default(true).notNull(),\n  isSeenByAdmin: boolean(\"is_seen_by_admin\").default(false).notNull(),\n  publishedAt: timestamp(\"published_at\").defaultNow().notNull(),\n  createdBy: varchar(\"created_by\").notNull(),\n});\n\n// Synagogues table\nexport const synagogues = pgTable(\"synagogues\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  address: text(\"address\").notNull(),\n  latitude: text(\"latitude\"),\n  longitude: text(\"longitude\"),\n  shacharit: text(\"shacharit\"),\n  mincha: text(\"mincha\"),\n  maariv: text(\"maariv\"),\n  contact: text(\"contact\"),\n  contactPhone: text(\"contact_phone\"),\n  notes: text(\"notes\"),\n});\n\n// Daily Halacha table\nexport const dailyHalacha = pgTable(\"daily_halacha\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  date: timestamp(\"date\").notNull(),\n  content: text(\"content\").notNull(),\n  title: text(\"title\"),\n  createdBy: varchar(\"created_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// YouTube Videos table\nexport const videos = pgTable(\"videos\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\"),\n  youtubeId: text(\"youtube_id\").notNull(),\n  thumbnail: text(\"thumbnail\"),\n  publishedAt: timestamp(\"published_at\"),\n  addedBy: varchar(\"added_by\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Contact Messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  fullName: text(\"full_name\").notNull(),\n  phone: text(\"phone\").notNull(),\n  message: text(\"message\").notNull(),\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  isNew: boolean(\"is_new\").default(true).notNull(),\n  isSeenByAdmin: boolean(\"is_seen_by_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Notifications table\nexport const notifications = pgTable(\"notifications\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").references(() => users.id).notNull(),\n  type: text(\"type\", { enum: [\"question_answered\", \"question_approved\", \"news_urgent\"] }).notNull(),\n  title: text(\"title\").notNull(),\n  message: text(\"message\").notNull(),\n  relatedId: varchar(\"related_id\"), // ID of related question, news, etc.\n  isRead: boolean(\"is_read\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  questions: many(questions),\n}));\n\nexport const questionsRelations = relations(questions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [questions.userId],\n    references: [users.id],\n  }),\n  answers: many(answers),\n}));\n\nexport const answersRelations = relations(answers, ({ one }) => ({\n  question: one(questions, {\n    fields: [answers.questionId],\n    references: [questions.id],\n  }),\n}));\n\nexport const notificationsRelations = relations(notifications, ({ one }) => ({\n  user: one(users, {\n    fields: [notifications.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas with validation for Hebrew registration\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  approvedAt: true,\n  approvedBy: true,\n  status: true,\n  isAdmin: true,\n  deviceId: true,\n}).extend({\n  fullName: z.string().min(2, \"שם מלא חובה\").max(100, \"שם ארוך מדי\"),\n  personalId: z.string().regex(/^\\d{7}$/, \"מספר אישי חייב להכיל 7 ספרות\"),\n  phone: z.string().regex(/^0[5-7]\\d{8}$/, \"מספר טלפון לא תקין\"),\n  email: z.string().email(\"כתובת אימייל לא תקינה\"),\n  password: z.string().min(6, \"סיסמה חייבת להכיל לפחות 6 תווים\"),\n});\n\n// Login schema\nexport const loginSchema = z.object({\n  email: z.string().email(\"כתובת אימייל לא תקינה\"),\n  password: z.string().min(1, \"סיסמה נדרשת\"),\n});\n\nexport const insertQuestionSchema = createInsertSchema(questions).omit({\n  id: true,\n  createdAt: true,\n  status: true,\n  updatedAt: true,\n  isApproved: true,\n  isNew: true,\n  hasNewAnswer: true,\n  answerNotificationSent: true,\n  isSeenByAdmin: true,\n  approvedBy: true,\n  approvedAt: true,\n  answeredAt: true,\n});\n\nexport const insertAnswerSchema = createInsertSchema(answers).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertNewsSchema = createInsertSchema(news).omit({\n  id: true,\n  publishedAt: true,\n});\n\nexport const insertSynagogueSchema = createInsertSchema(synagogues).omit({\n  id: true,\n});\n\nexport const insertDailyHalachaSchema = createInsertSchema(dailyHalacha).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertVideoSchema = createInsertSchema(videos).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n  isRead: true,\n  isSeenByAdmin: true,\n  isNew: true,\n});\n\nexport const insertNotificationSchema = createInsertSchema(notifications).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type LoginUser = z.infer<typeof loginSchema>;\nexport type Question = typeof questions.$inferSelect;\nexport type InsertQuestion = z.infer<typeof insertQuestionSchema>;\nexport type Answer = typeof answers.$inferSelect;\nexport type InsertAnswer = z.infer<typeof insertAnswerSchema>;\nexport type News = typeof news.$inferSelect;\nexport type InsertNews = z.infer<typeof insertNewsSchema>;\nexport type Synagogue = typeof synagogues.$inferSelect;\nexport type InsertSynagogue = z.infer<typeof insertSynagogueSchema>;\nexport type DailyHalacha = typeof dailyHalacha.$inferSelect;\nexport type InsertDailyHalacha = z.infer<typeof insertDailyHalachaSchema>;\nexport type Video = typeof videos.$inferSelect;\nexport type InsertVideo = z.infer<typeof insertVideoSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type Notification = typeof notifications.$inferSelect;\nexport type InsertNotification = z.infer<typeof insertNotificationSchema>;\n\n\n","size_bytes":9671},"client/src/App.tsx":{"content":"import { Switch, Route, useLocation } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Layout } from \"@/components/Layout\";\nimport Home from \"@/pages/Home\";\nimport Questions from \"@/pages/Questions\";\nimport QuestionDetail from \"@/pages/QuestionDetail\";\nimport Synagogues from \"@/pages/Synagogues\";\nimport Videos from \"@/pages/Videos\";\nimport Profile from \"@/pages/Profile\";\nimport AdminDashboard from \"@/pages/AdminDashboard\";\nimport Contact from \"@/pages/Contact\";\nimport JewishTimesNew from \"@/pages/JewishTimesNew\";\nimport DailyHalacha from \"@/pages/DailyHalacha\";\nimport News from \"@/pages/News\";\nimport Landing from \"@/pages/Landing\";\nimport Register from \"@/pages/Register\";\nimport Login from \"@/pages/Login\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction AppContent() {\n  const { isAuthenticated, isLoading } = useAuth();\n  const [location] = useLocation();\n\n  // Check localStorage immediately for admin status\n  const isAdminInStorage = localStorage.getItem('isAdmin') === 'true';\n  \n  console.log('App state:', { isAuthenticated, isLoading, location, isAdminInStorage });\n  \n  // Force login page if explicitly requested\n  if (location === \"/login\") {\n    return <Login />;\n  }\n  \n  // Force register page if explicitly requested\n  if (location === \"/register\") {\n    return <Register />;\n  }\n  \n  // Always show landing page first for unauthenticated users\n  if (!isAuthenticated && !isLoading && !isAdminInStorage) {\n    // Default to landing page (login/register) for all other routes\n    return <Landing />;\n  }\n  \n  // If user is authenticated (not admin), show the main app\n  if (isAuthenticated && !isAdminInStorage) {\n    return (\n      <Layout>\n        <Switch>\n          <Route path=\"/\" component={Home} />\n          <Route path=\"/questions\" component={Questions} />\n          <Route path=\"/questions/:id\" component={QuestionDetail} />\n          <Route path=\"/synagogues\" component={Synagogues} />\n          <Route path=\"/videos\" component={Videos} />\n          <Route path=\"/profile\" component={Profile} />\n          <Route path=\"/contact\" component={Contact} />\n          <Route path=\"/jewish-times\" component={JewishTimesNew} />\n          <Route path=\"/daily-halacha\" component={DailyHalacha} />\n          <Route path=\"/news\" component={News} />\n          <Route path=\"*\">\n            {() => {\n              // For any unmatched route when authenticated, redirect to home\n              window.location.href = \"/\";\n              return <div>מפנה...</div>;\n            }}\n          </Route>\n        </Switch>\n      </Layout>\n    );\n  }\n\n  // Show loading while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-police-blue to-police-blue-dark flex items-center justify-center\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-white\"></div>\n      </div>\n    );\n  }\n\n  // Allow admin access only if admin flag exists\n  if (location === \"/admin\" && isAdminInStorage) {\n    return <AdminDashboard />;\n  }\n\n  // Default fallback - show landing page\n  return <Landing />;\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <AppContent />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3554},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@300;400;500;600;700&family=Heebo:wght@300;400;500;600;700&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(60, 4.8%, 95.9%);\n  --accent-foreground: hsl(24, 9.8%, 10%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* Police theme colors */\n  --police-blue: hsl(207, 90%, 54%);\n  --police-blue-light: hsl(207, 90%, 95%);\n  --police-blue-dark: hsl(207, 90%, 40%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(240, 3.7%, 15.9%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  --radius: 0.5rem;\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n    font-family: 'Heebo', 'Inter', -apple-system, BlinkMacSystemFont, sans-serif;\n    direction: rtl;\n    text-align: right;\n  }\n  \n  html {\n    direction: rtl;\n  }\n}\n\n@layer utilities {\n  .police-blue {\n    color: var(--police-blue);\n  }\n  \n  .bg-police-blue {\n    background-color: var(--police-blue);\n  }\n  \n  .bg-police-blue-light {\n    background-color: var(--police-blue-light);\n  }\n  \n  .bg-police-blue-dark {\n    background-color: var(--police-blue-dark);\n  }\n  \n  .gradient-header {\n    background: linear-gradient(135deg, var(--police-blue) 0%, var(--police-blue-dark) 100%);\n  }\n  \n  .premium-header {\n    position: relative;\n    background: linear-gradient(135deg, #2563eb 0%, #3b82f6 30%, #60a5fa 70%, #93c5fd 100%);\n    box-shadow: 0 8px 32px rgba(37, 99, 235, 0.25), 0 4px 16px rgba(59, 130, 246, 0.15);\n  }\n  \n  .shadow-card {\n    box-shadow: 0 2px 8px rgba(0,0,0,0.1);\n  }\n  \n  .rtl {\n    direction: rtl;\n    text-align: right;\n  }\n}\n","size_bytes":2920},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/AskRabbiModal.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface AskRabbiModalProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function AskRabbiModal({ open, onOpenChange }: AskRabbiModalProps) {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  \n  const [formData, setFormData] = useState({\n    title: \"\",\n    category: \"\",\n    content: \"\",\n    isUrgent: false,\n    isPrivate: false\n  });\n\n  const submitQuestion = useMutation({\n    mutationFn: async (data: typeof formData) => {\n      if (!user) throw new Error(\"User not authenticated\");\n      \n      const response = await fetch(\"/api/questions\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          ...data,\n          userId: user.id\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"שגיאה בשליחת השאלה\");\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"השאלה נשלחה בהצלחה\",\n        description: \"תקבל הודעה כאשר התשובה תהיה מוכנה\",\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n      setFormData({ title: \"\", category: \"\", content: \"\", isUrgent: false, isPrivate: false });\n      onOpenChange(false);\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה\",\n        description: \"אירעה שגיאה בשליחת השאלה. אנא נסה שוב.\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    submitQuestion.mutate(formData);\n  };\n\n  const categories = [\n    \"שבת וחגים\",\n    \"כשרות\",\n    \"שיטור ובטחון\",\n    \"תפילה\",\n    \"אחר\"\n  ];\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"max-w-md mx-auto\">\n        <DialogHeader>\n          <DialogTitle className=\"text-right\">שאל את הרב</DialogTitle>\n        </DialogHeader>\n        \n        <form onSubmit={handleSubmit} className=\"space-y-4\">\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-1\">כותרת השאלה</Label>\n            <Input\n              value={formData.title}\n              onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))}\n              placeholder=\"כותרת קצרה לשאלה\"\n              className=\"text-right\"\n              required\n            />\n          </div>\n\n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-1\">קטגוריה</Label>\n            <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))}>\n              <SelectTrigger className=\"text-right\">\n                <SelectValue placeholder=\"בחר קטגוריה\" />\n              </SelectTrigger>\n              <SelectContent>\n                {categories.map(category => (\n                  <SelectItem key={category} value={category}>{category}</SelectItem>\n                ))}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <div>\n            <Label className=\"block text-sm font-medium text-gray-700 mb-1\">השאלה שלך</Label>\n            <Textarea\n              value={formData.content}\n              onChange={(e) => setFormData(prev => ({ ...prev, content: e.target.value }))}\n              placeholder=\"הכנס את השאלה שלך כאן...\"\n              className=\"h-32 resize-none text-right\"\n              required\n            />\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div className=\"flex items-center space-x-reverse space-x-2\">\n              <Checkbox\n                id=\"urgent\"\n                checked={formData.isUrgent}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isUrgent: !!checked }))}\n              />\n              <Label htmlFor=\"urgent\" className=\"text-sm text-gray-700\">שאלה דחופה</Label>\n            </div>\n            \n            <div className=\"flex items-center space-x-reverse space-x-2\">\n              <Checkbox\n                id=\"private\"\n                checked={formData.isPrivate}\n                onCheckedChange={(checked) => setFormData(prev => ({ ...prev, isPrivate: !!checked }))}\n              />\n              <Label htmlFor=\"private\" className=\"text-sm text-gray-700\">שאלה פרטית (תופיע רק לשואל ולמנהלים)</Label>\n            </div>\n            <p className=\"text-xs text-gray-500 mt-1\">שאלה פרטית לא תוצג לציבור, רק למנהלים ולמשלח השאלה</p>\n          </div>\n          \n          <Button \n            type=\"submit\" \n            className=\"w-full bg-police-blue hover:bg-police-blue-dark text-white\"\n            disabled={submitQuestion.isPending}\n          >\n            {submitQuestion.isPending ? \"שולח...\" : \"שלח שאלה\"}\n          </Button>\n        </form>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","size_bytes":5868},"client/src/components/BottomNavigation.tsx":{"content":"import { Home, MessageCircleQuestion, MapPin, Play, MessageSquare } from \"lucide-react\";\nimport { useLocation } from \"wouter\";\n\nexport function BottomNavigation() {\n  const [location, setLocation] = useLocation();\n\n  const navItems = [\n    { path: \"/\", icon: Home, label: \"בית\" },\n    { path: \"/questions\", icon: MessageCircleQuestion, label: \"שאל את הרב\" },\n    { path: \"/synagogues\", icon: MapPin, label: \"בתי כנסת\" },\n    { path: \"/videos\", icon: Play, label: \"סרטונים\" },\n    { path: \"/contact\", icon: MessageSquare, label: \"צור קשר\" },\n  ];\n\n  return (\n    <nav className=\"fixed bottom-0 right-0 left-0 max-w-md mx-auto bg-white border-t border-gray-200\">\n      <div className=\"grid grid-cols-5 py-2\">\n        {navItems.map(({ path, icon: Icon, label }) => {\n          const isActive = location === path || (path === \"/questions\" && location.startsWith(\"/questions/\"));\n          return (\n            <button\n              key={path}\n              onClick={() => setLocation(path)}\n              className={`flex flex-col items-center py-2 transition-colors ${\n                isActive ? \"text-police-blue\" : \"text-gray-500\"\n              }`}\n            >\n              <Icon className=\"h-5 w-5\" />\n              <span className=\"text-xs mt-1\">{label}</span>\n            </button>\n          );\n        })}\n      </div>\n    </nav>\n  );\n}\n","size_bytes":1374},"client/src/components/Layout.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { RegistrationForm } from \"@/components/RegistrationForm\";\nimport { BottomNavigation } from \"@/components/BottomNavigation\";\nimport { useLocation } from \"wouter\";\nimport { Bell } from \"lucide-react\";\nimport logo from \"@assets/לוגו_ללא_רקע-removebg-preview_1756202149642.png\";\n\ninterface LayoutProps {\n  children: ReactNode;\n}\n\nexport function Layout({ children }: LayoutProps) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-md mx-auto bg-white min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-police-blue mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">טוען...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Show pending screen for users waiting for approval\n  if (user && user.status === \"pending\") {\n    return (\n      <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n        <header className=\"premium-header text-white relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600 via-blue-500 to-blue-400\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-tl from-white/10 via-transparent to-white/20\"></div>\n          \n          <div className=\"relative z-10 px-6 py-4\">\n            <div className=\"flex items-center justify-center\">\n              <button \n                onClick={() => setLocation(\"/\")}\n                className=\"flex items-center space-x-reverse space-x-3 hover:opacity-90 transition-all duration-300 group\"\n              >\n                <div className=\"relative\">\n                  <img \n                    src={logo} \n                    alt=\"לוגו רבנות המשטרה\" \n                    className=\"h-20 w-20 drop-shadow-2xl group-hover:scale-105 transition-transform duration-300 filter brightness-110\" \n                  />\n                  <div className=\"absolute inset-0 bg-white/20 rounded-full blur-lg group-hover:bg-white/30 transition-all duration-300\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <h1 className=\"text-xl font-bold tracking-wide drop-shadow-lg group-hover:text-blue-100 transition-colors duration-300\">\n                    רבנות המשטרה\n                  </h1>\n                  <p className=\"text-xs text-blue-100/80 font-medium tracking-wider\">\n                    משטרת ישראל\n                  </p>\n                </div>\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\"></div>\n        </header>\n        <div className=\"p-4\">\n          <div className=\"bg-white rounded-lg shadow-card p-6 mt-8 text-center\">\n            <div className=\"text-4xl mb-4\">⏳</div>\n            <h2 className=\"text-xl font-bold text-gray-800 mb-2\">ממתין לאישור</h2>\n            <p className=\"text-gray-600 mb-4\">הבקשה שלך נשלחה בהצלחה ומחכה לאישור מנהל המערכת.</p>\n            <p className=\"text-sm text-gray-500\">תקבל הודעה כאשר החשבון יאושר.</p>\n            \n            <div className=\"mt-6\">\n              <button\n                onClick={() => {\n                  localStorage.clear();\n                  sessionStorage.clear();\n                  window.location.replace('/login');\n                }}\n                className=\"w-full bg-gradient-to-r from-red-600 via-red-700 to-red-800 hover:from-red-700 hover:via-red-800 hover:to-red-900 text-white px-8 py-4 rounded-xl text-lg font-bold shadow-2xl hover:shadow-red-600/40 transition-all duration-300 transform hover:scale-110 hover:-translate-y-2 border-2 border-red-400 hover:border-red-300\"\n                style={{\n                  background: 'linear-gradient(135deg, #dc2626, #b91c1c, #991b1b, #7f1d1d)',\n                  boxShadow: '0 15px 35px rgba(220, 38, 38, 0.5), 0 5px 15px rgba(220, 38, 38, 0.3)',\n                }}\n              >\n                <span className=\"flex items-center justify-center gap-3\">\n                  <span className=\"text-2xl animate-bounce\">🚪</span>\n                  <span className=\"tracking-wide drop-shadow-lg\">התנתק מהמערכת</span>\n                </span>\n              </button>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  if (user && user.status === \"rejected\") {\n    return (\n      <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n        <header className=\"premium-header text-white relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-red-900 via-red-800 to-red-900\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-tl from-red-600/20 via-transparent to-white/10\"></div>\n          \n          <div className=\"relative z-10 px-6 py-4\">\n            <div className=\"flex items-center justify-center\">\n              <button \n                onClick={() => setLocation(\"/\")}\n                className=\"flex items-center space-x-reverse space-x-3 hover:opacity-90 transition-all duration-300 group\"\n              >\n                <div className=\"relative\">\n                  <img \n                    src={logo} \n                    alt=\"לוגו רבנות המשטרה\" \n                    className=\"h-20 w-20 drop-shadow-2xl group-hover:scale-105 transition-transform duration-300 filter brightness-110\" \n                  />\n                  <div className=\"absolute inset-0 bg-white/20 rounded-full blur-lg group-hover:bg-white/30 transition-all duration-300\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <h1 className=\"text-xl font-bold tracking-wide drop-shadow-lg group-hover:text-red-100 transition-colors duration-300\">\n                    רבנות המשטרה\n                  </h1>\n                  <p className=\"text-xs text-red-100/80 font-medium tracking-wider\">\n                    משטרת ישראל\n                  </p>\n                </div>\n              </button>\n            </div>\n          </div>\n          \n          <div className=\"absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\"></div>\n        </header>\n        <div className=\"p-4\">\n          <div className=\"bg-white rounded-lg shadow-card p-6 mt-8 text-center\">\n            <div className=\"text-4xl mb-4\">❌</div>\n            <h2 className=\"text-xl font-bold text-gray-800 mb-2\">הבקשה נדחתה</h2>\n            <p className=\"text-gray-600 mb-4\">הבקשה שלך להצטרפות למערכת נדחתה על ידי מנהל המערכת.</p>\n            <p className=\"text-sm text-gray-500\">לפרטים נוספים, פנה למנהל המערכת.</p>\n          </div>\n        </div>\n      </div>\n    );\n  }\n\n  // Show registration form for new users\n  if (!user) {\n    return (\n      <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n        <header className=\"premium-header text-white relative overflow-hidden\">\n          <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600 via-blue-500 to-blue-400\"></div>\n          <div className=\"absolute inset-0 bg-gradient-to-tl from-white/10 via-transparent to-white/20\"></div>\n          \n          <div className=\"relative z-10 px-6 py-4\">\n            <div className=\"flex items-center justify-center\">\n              <div className=\"flex items-center space-x-reverse space-x-3\">\n                <div className=\"relative\">\n                  <img \n                    src={logo} \n                    alt=\"לוגו רבנות המשטרה\" \n                    className=\"h-14 w-14 drop-shadow-2xl filter brightness-110\" \n                  />\n                  <div className=\"absolute inset-0 bg-white/20 rounded-full blur-lg\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <h1 className=\"text-xl font-bold tracking-wide drop-shadow-lg\">\n                    רבנות המשטרה\n                  </h1>\n                  <p className=\"text-xs text-blue-100/80 font-medium tracking-wider\">\n                    משטרת ישראל\n                  </p>\n                </div>\n              </div>\n            </div>\n          </div>\n          \n          <div className=\"absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\"></div>\n        </header>\n        <RegistrationForm />\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-md mx-auto bg-white min-h-screen\">\n      <header className=\"premium-header text-white relative overflow-hidden\">\n        <div className=\"absolute inset-0 bg-gradient-to-br from-blue-600 via-blue-500 to-blue-400\"></div>\n        <div className=\"absolute inset-0 bg-gradient-to-tl from-white/10 via-transparent to-white/20\"></div>\n        \n        <div className=\"relative z-10 px-4 py-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center space-x-reverse space-x-4\">\n              <button \n                onClick={() => setLocation(\"/\")}\n                className=\"flex items-center space-x-reverse space-x-3 hover:opacity-90 transition-all duration-300 group\"\n              >\n                <div className=\"relative\">\n                  <img \n                    src={logo} \n                    alt=\"לוגו רבנות המשטרה\" \n                    className=\"h-20 w-20 drop-shadow-2xl group-hover:scale-105 transition-transform duration-300 filter brightness-110\" \n                  />\n                  <div className=\"absolute inset-0 bg-white/20 rounded-full blur-lg group-hover:bg-white/30 transition-all duration-300\"></div>\n                </div>\n                <div className=\"text-right\">\n                  <h1 className=\"text-xl font-bold tracking-wide drop-shadow-lg group-hover:text-blue-100 transition-colors duration-300\">\n                    רבנות המשטרה\n                  </h1>\n                  <p className=\"text-xs text-blue-100/80 font-medium tracking-wider\">\n                    משטרת ישראל\n                  </p>\n                </div>\n              </button>\n            </div>\n            \n            {/* Profile and logout buttons */}\n            <div className=\"flex flex-col gap-2\">\n              {/* Personal Area Button */}\n              <button\n                onClick={() => setLocation(\"/profile\")}\n                className=\"group relative overflow-hidden bg-green-500/10 hover:bg-green-500/20 backdrop-blur-sm border border-green-400/20 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-green-400/10\"\n                data-testid=\"button-personal-area\"\n              >\n                <span className=\"relative z-10 flex items-center space-x-reverse space-x-2\">\n                  <span>שלום, {user.fullName?.split(' ')[0] || user.email.split('@')[0]}</span>\n                  <svg className=\"w-4 h-4 group-hover:scale-110 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M16 7a4 4 0 11-8 0 4 4 0 018 0zM12 14a7 7 0 00-7 7h14a7 7 0 00-7-7z\" />\n                  </svg>\n                </span>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-green-400/10 to-transparent group-hover:translate-x-full transition-transform duration-700 -skew-x-12\"></div>\n              </button>\n\n              {/* Enhanced logout button */}\n              <button\n                onClick={() => {\n                  localStorage.removeItem(\"device-id\");\n                  window.location.href = '/login';\n                }}\n                className=\"group relative overflow-hidden bg-white/10 hover:bg-white/20 backdrop-blur-sm border border-white/20 text-white px-4 py-2 rounded-xl text-sm font-medium transition-all duration-300 hover:scale-105 hover:shadow-lg hover:shadow-white/10\"\n                data-testid=\"button-logout\"\n              >\n                <span className=\"relative z-10 flex items-center space-x-reverse space-x-2\">\n                  <span>התנתק</span>\n                  <svg className=\"w-4 h-4 group-hover:translate-x-1 transition-transform duration-300\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1\" />\n                  </svg>\n                </span>\n                <div className=\"absolute inset-0 bg-gradient-to-r from-transparent via-white/10 to-transparent group-hover:translate-x-full transition-transform duration-700 -skew-x-12\"></div>\n              </button>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"absolute bottom-0 left-0 w-full h-px bg-gradient-to-r from-transparent via-white/30 to-transparent\"></div>\n      </header>\n      \n      <main className=\"flex-1 pb-16\">\n        {children}\n      </main>\n      \n      <BottomNavigation />\n    </div>\n  );\n}","size_bytes":13420},"client/src/components/NotificationBadge.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\n\ninterface NotificationBadgeProps {\n  count: number;\n  isVisible?: boolean;\n  variant?: \"default\" | \"secondary\" | \"destructive\" | \"outline\";\n  className?: string;\n}\n\nexport function NotificationBadge({ \n  count, \n  isVisible = true, \n  variant = \"destructive\", \n  className = \"\" \n}: NotificationBadgeProps) {\n  if (!isVisible || count <= 0) {\n    return null;\n  }\n\n  return (\n    <Badge \n      variant={variant} \n      className={`absolute -top-2 -right-2 h-5 w-5 p-0 text-xs flex items-center justify-center animate-pulse ${className}`}\n    >\n      {count > 99 ? \"99+\" : count}\n    </Badge>\n  );\n}","size_bytes":645},"client/src/components/RegistrationForm.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { UserPlus, Info } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\nexport function RegistrationForm() {\n  const { register } = useAuth();\n  const { toast } = useToast();\n  const [isLoading, setIsLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    fullName: \"\",\n    personalId: \"\",\n    phone: \"\"\n  });\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n\n    try {\n      await register(formData);\n      toast({\n        title: \"בקשה נשלחה בהצלחה\",\n        description: \"הבקשה שלך נשלחה לאישור מנהל המערכת\",\n      });\n    } catch (error) {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה ברישום\",\n        description: \"אירעה שגיאה בשליחת הבקשה. אנא נסה שוב.\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleChange = (field: keyof typeof formData) => (e: React.ChangeEvent<HTMLInputElement>) => {\n    setFormData(prev => ({ ...prev, [field]: e.target.value }));\n  };\n\n  return (\n    <div className=\"p-4\">\n      <Card className=\"shadow-card mt-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"text-center mb-6\">\n            <UserPlus className=\"h-12 w-12 text-police-blue mb-3 mx-auto\" />\n            <h2 className=\"text-xl font-bold text-gray-800 mb-2\">הרשמה ראשונית</h2>\n            <p className=\"text-gray-600 text-sm\">אנא מלא את הפרטים הבאים להרשמה למערכת</p>\n          </div>\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <Label htmlFor=\"fullName\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                שם מלא\n              </Label>\n              <Input\n                id=\"fullName\"\n                type=\"text\"\n                value={formData.fullName}\n                onChange={handleChange(\"fullName\")}\n                placeholder=\"הכנס שם מלא\"\n                required\n                className=\"text-right\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"personalId\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                מספר אישי\n              </Label>\n              <Input\n                id=\"personalId\"\n                type=\"text\"\n                value={formData.personalId}\n                onChange={handleChange(\"personalId\")}\n                placeholder=\"הכנס מספר אישי\"\n                required\n                className=\"text-right\"\n              />\n            </div>\n            \n            <div>\n              <Label htmlFor=\"phone\" className=\"block text-sm font-medium text-gray-700 mb-1\">\n                מספר טלפון\n              </Label>\n              <Input\n                id=\"phone\"\n                type=\"tel\"\n                value={formData.phone}\n                onChange={handleChange(\"phone\")}\n                placeholder=\"הכנס מספר טלפון\"\n                required\n                className=\"text-right\"\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-police-blue hover:bg-police-blue-dark text-white py-3\"\n              disabled={isLoading}\n            >\n              {isLoading ? \"שולח...\" : \"שלח בקשה להרשמה\"}\n            </Button>\n          </form>\n          \n          <div className=\"mt-4 p-3 bg-yellow-50 border border-yellow-200 rounded-md\">\n            <div className=\"flex items-start\">\n              <Info className=\"h-4 w-4 text-yellow-600 mt-0.5 ml-2 flex-shrink-0\" />\n              <p className=\"text-sm text-yellow-800\">\n                הבקשה תישלח לאישור מנהל. תקבל הודעה כאשר החשבון יאושר.\n              </p>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":4279},"client/src/components/SimpleUserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Download, User, Calendar, Activity, CheckCircle, XCircle, Clock } from \"lucide-react\";\n\nexport default function SimpleUserManagement() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n\n  // Fetch users\n  const { data: usersData, isLoading: usersLoading, refetch: refetchUsers } = useQuery({\n    queryKey: ['/api/admin/users', { search, statusFilter }],\n    queryFn: () => apiRequest(`/api/admin/users?status=${statusFilter}&search=${search}&page=1&limit=50`)\n  });\n\n  // Fetch system statistics\n  const { data: systemStats } = useQuery({\n    queryKey: ['/api/admin/system-stats'],\n    queryFn: () => apiRequest('/api/admin/system-stats')\n  });\n\n  // Update user status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ userId, status }: { userId: string; status: string }) =>\n      apiRequest(`/api/admin/users/${userId}/status`, {\n        method: 'PUT',\n        body: { \n          status, \n          deviceId: localStorage.getItem('deviceId') || 'admin-device-simple'\n        }\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"הצלחה\",\n        description: \"סטטוס המשתמש עודכן בהצלחה\",\n      });\n      refetchUsers();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/system-stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"שגיאה\",\n        description: error.message || \"שגיאה בעדכון סטטוס המשתמש\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Bulk action mutation\n  const bulkActionMutation = useMutation({\n    mutationFn: ({ action, userIds }: { action: string; userIds: string[] }) =>\n      apiRequest('/api/admin/users/bulk-action', {\n        method: 'POST',\n        body: { \n          action, \n          userIds, \n          deviceId: localStorage.getItem('deviceId') || 'admin-device-simple'\n        }\n      }),\n    onSuccess: (result) => {\n      toast({\n        title: \"הצלחה\",\n        description: `פעולה בוצעה בהצלחה: ${result.successful} מתוך ${result.successful + result.failed}`,\n      });\n      setSelectedUsers([]);\n      refetchUsers();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/system-stats'] });\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"w-3 h-3 ml-1\" />מאושר</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\"><XCircle className=\"w-3 h-3 ml-1\" />נדחה</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\"><Clock className=\"w-3 h-3 ml-1\" />ממתין</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('he-IL');\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked && usersData?.users) {\n      setSelectedUsers(usersData.users.map((u: any) => u.user?.id || u.id).filter(Boolean));\n    } else {\n      setSelectedUsers([]);\n    }\n  };\n\n  const handleSelectUser = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUsers([...selectedUsers, userId]);\n    } else {\n      setSelectedUsers(selectedUsers.filter(id => id !== userId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" dir=\"rtl\">\n      {/* System Statistics Cards */}\n      {systemStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">סה\"כ משתמשים</p>\n                  <p className=\"text-2xl font-bold text-[#4585d9]\">{systemStats.totalUsers}</p>\n                </div>\n                <User className=\"h-8 w-8 text-[#4585d9]\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">משתמשים פעילים</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{systemStats.activeUsers}</p>\n                </div>\n                <Activity className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">ממתינים לאישור</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{systemStats.pendingUsers}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">הרשמות חדשות (7 ימים)</p>\n                  <p className=\"text-2xl font-bold text-[#4585d9]\">{systemStats.recentRegistrations}</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-[#4585d9]\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>ניהול משתמשים מקיף</span>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => window.open('/api/admin/users/export?format=json')}\n              >\n                <Download className=\"w-4 h-4 ml-1\" />\n                יצוא JSON\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => window.open('/api/admin/users/export?format=csv')}\n              >\n                <Download className=\"w-4 h-4 ml-1\" />\n                יצוא CSV\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"חיפוש לפי שם, אימייל, טלפון או ת.ז.\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pr-10\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"סינון לפי סטטוס\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">כל הסטטוסים</SelectItem>\n                <SelectItem value=\"pending\">ממתין לאישור</SelectItem>\n                <SelectItem value=\"approved\">מאושר</SelectItem>\n                <SelectItem value=\"rejected\">נדחה</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedUsers.length > 0 && (\n            <div className=\"flex gap-2 mb-4 p-3 bg-blue-50 rounded-lg border\">\n              <span className=\"text-sm font-medium\">{selectedUsers.length} משתמשים נבחרו:</span>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\">אשר הכל</Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>אישור משתמשים</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      האם אתה בטוח שברצונך לאשר {selectedUsers.length} משתמשים?\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>ביטול</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => bulkActionMutation.mutate({ action: 'approve', userIds: selectedUsers })}>\n                      אשר\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\">דחה הכל</Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>דחיית משתמשים</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      האם אתה בטוח שברצונך לדחות {selectedUsers.length} משתמשים?\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>ביטול</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => bulkActionMutation.mutate({ action: 'reject', userIds: selectedUsers })}>\n                      דחה\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          )}\n\n          {/* Users Table */}\n          {usersLoading ? (\n            <div className=\"text-center py-8\">טוען משתמשים...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox\n                        checked={selectedUsers.length === usersData?.users?.length && usersData?.users.length > 0}\n                        onCheckedChange={handleSelectAll}\n                      />\n                    </TableHead>\n                    <TableHead>שם מלא</TableHead>\n                    <TableHead>אימייל</TableHead>\n                    <TableHead>טלפון</TableHead>\n                    <TableHead>סטטוס</TableHead>\n                    <TableHead>שאלות</TableHead>\n                    <TableHead>תאריך הצטרפות</TableHead>\n                    <TableHead>פעולות</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {usersData?.users?.map((item: any) => {\n                    const user = item.user || item;\n                    const userId = user?.id;\n                    if (!userId) return null;\n                    \n                    return (\n                      <TableRow key={userId} className=\"hover:bg-gray-50\">\n                        <TableCell>\n                          <Checkbox\n                            checked={selectedUsers.includes(userId)}\n                            onCheckedChange={(checked) => handleSelectUser(userId, !!checked)}\n                          />\n                        </TableCell>\n                        <TableCell className=\"font-medium\">\n                          <div className=\"flex items-center gap-2\">\n                            {user.isAdmin && <Badge variant=\"secondary\" className=\"text-xs\">מנהל</Badge>}\n                            {user.fullName || 'ללא שם'}\n                          </div>\n                        </TableCell>\n                        <TableCell>{user.email || 'ללא אימייל'}</TableCell>\n                        <TableCell>{user.phone || 'ללא טלפון'}</TableCell>\n                        <TableCell>{getStatusBadge(user.status || 'pending')}</TableCell>\n                        <TableCell>{item.questionsCount || 0}</TableCell>\n                        <TableCell>{user.createdAt ? formatDate(user.createdAt) : 'ללא תאריך'}</TableCell>\n                        <TableCell>\n                          <div className=\"flex gap-1\">\n                            {user.status === 'pending' && (\n                              <>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                                  onClick={() => updateStatusMutation.mutate({ userId, status: 'approved' })}\n                                  disabled={updateStatusMutation.isPending}\n                                >\n                                  אשר\n                                </Button>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                  onClick={() => updateStatusMutation.mutate({ userId, status: 'rejected' })}\n                                  disabled={updateStatusMutation.isPending}\n                                >\n                                  דחה\n                                </Button>\n                              </>\n                            )}\n\n                            {user.status === 'approved' && (\n                              <AlertDialog>\n                                <AlertDialogTrigger asChild>\n                                  <Button\n                                    variant=\"outline\"\n                                    size=\"sm\"\n                                    className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                                  >\n                                    בטל אישור\n                                  </Button>\n                                </AlertDialogTrigger>\n                                <AlertDialogContent>\n                                  <AlertDialogHeader>\n                                    <AlertDialogTitle>ביטול אישור משתמש</AlertDialogTitle>\n                                    <AlertDialogDescription>\n                                      האם אתה בטוח שברצונך לבטל את אישור המשתמש {user.fullName}?\n                                      משתמש זה לא יוכל יותר לגשת למערכת.\n                                    </AlertDialogDescription>\n                                  </AlertDialogHeader>\n                                  <AlertDialogFooter>\n                                    <AlertDialogCancel>ביטול</AlertDialogCancel>\n                                    <AlertDialogAction \n                                      onClick={() => updateStatusMutation.mutate({ userId, status: 'rejected' })}\n                                    >\n                                      בטל אישור\n                                    </AlertDialogAction>\n                                  </AlertDialogFooter>\n                                </AlertDialogContent>\n                              </AlertDialog>\n                            )}\n                          </div>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n\n          {/* No users message */}\n          {!usersLoading && (!usersData?.users || usersData.users.length === 0) && (\n            <div className=\"text-center py-8 text-gray-500\">\n              לא נמצאו משתמשים עם הקריטריונים שנבחרו\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":17379},"client/src/components/UserManagement.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle, AlertDialogTrigger } from \"@/components/ui/alert-dialog\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Search, Download, User, Calendar, Activity, CheckCircle, XCircle, Clock } from \"lucide-react\";\n\n// Simplified interfaces\ninterface UserStats {\n  user: any;\n  questionsCount: number;\n  lastActivity: string;\n}\n\ninterface SystemStats {\n  totalUsers: number;\n  pendingUsers: number;\n  approvedUsers: number;\n  rejectedUsers: number;\n  totalQuestions: number;\n  answeredQuestions: number;\n  pendingQuestions: number;\n  recentRegistrations: number;\n  activeUsers: number;\n}\n\nexport default function UserManagement() {\n  const { toast } = useToast();\n  const [search, setSearch] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sortBy, setSortBy] = useState(\"createdAt\");\n  const [sortOrder, setSortOrder] = useState<\"asc\" | \"desc\">(\"desc\");\n  const [currentPage, setCurrentPage] = useState(1);\n  const [selectedUsers, setSelectedUsers] = useState<string[]>([]);\n  const [selectedUser, setSelectedUser] = useState<string | null>(null);\n\n  // Fetch users with filtering and pagination\n  const { data: usersData, isLoading: usersLoading, refetch: refetchUsers } = useQuery({\n    queryKey: ['/api/admin/users', { search, statusFilter, sortBy, sortOrder, page: currentPage }],\n    queryFn: () => apiRequest(`/api/admin/users?status=${statusFilter}&search=${search}&sortBy=${sortBy}&sortOrder=${sortOrder}&page=${currentPage}&limit=20`)\n  });\n\n  // Fetch system statistics\n  const { data: systemStats } = useQuery<SystemStats>({\n    queryKey: ['/api/admin/system-stats'],\n    queryFn: () => apiRequest('/api/admin/system-stats')\n  });\n\n  // Fetch detailed user information\n  const { data: userDetails } = useQuery({\n    queryKey: ['/api/admin/users', selectedUser],\n    queryFn: () => apiRequest(`/api/admin/users/${selectedUser}`),\n    enabled: !!selectedUser\n  });\n\n  // Update user status mutation\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ userId, status, reason }: { userId: string; status: string; reason?: string }) =>\n      apiRequest(`/api/admin/users/${userId}/status`, {\n        method: 'PUT',\n        body: JSON.stringify({ \n          status, \n          reason,\n          deviceId: localStorage.getItem('deviceId') || 'admin-device-simple'\n        })\n      }),\n    onSuccess: () => {\n      toast({\n        title: \"הצלחה\",\n        description: \"סטטוס המשתמש עודכן בהצלחה\",\n      });\n      refetchUsers();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/system-stats'] });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"שגיאה\",\n        description: error.message || \"שגיאה בעדכון סטטוס המשתמש\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  // Bulk action mutation\n  const bulkActionMutation = useMutation({\n    mutationFn: ({ action, userIds, reason }: { action: string; userIds: string[]; reason?: string }) =>\n      apiRequest('/api/admin/users/bulk-action', {\n        method: 'POST',\n        body: JSON.stringify({ \n          action, \n          userIds, \n          reason,\n          deviceId: localStorage.getItem('deviceId') || 'admin-device-simple'\n        })\n      }),\n    onSuccess: (result) => {\n      toast({\n        title: \"הצלחה\",\n        description: `פעולה בוצעה בהצלחה: ${result.successful} מתוך ${result.successful + result.failed}`,\n      });\n      setSelectedUsers([]);\n      refetchUsers();\n      queryClient.invalidateQueries({ queryKey: ['/api/admin/system-stats'] });\n    }\n  });\n\n  // Export users mutation\n  const exportMutation = useMutation({\n    mutationFn: (format: string) => apiRequest(`/api/admin/users/export?format=${format}`),\n    onSuccess: (data, format) => {\n      if (format === 'csv') {\n        // Handle CSV download\n        const blob = new Blob([data], { type: 'text/csv' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'users-export.csv';\n        a.click();\n      } else {\n        // Handle JSON download\n        const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'users-export.json';\n        a.click();\n      }\n      toast({\n        title: \"הצלחה\",\n        description: \"נתוני המשתמשים יוצאו בהצלחה\",\n      });\n    }\n  });\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case 'approved':\n        return <Badge className=\"bg-green-100 text-green-800 border-green-200\"><CheckCircle className=\"w-3 h-3 ml-1\" />מאושר</Badge>;\n      case 'rejected':\n        return <Badge className=\"bg-red-100 text-red-800 border-red-200\"><XCircle className=\"w-3 h-3 ml-1\" />נדחה</Badge>;\n      case 'pending':\n        return <Badge className=\"bg-yellow-100 text-yellow-800 border-yellow-200\"><Clock className=\"w-3 h-3 ml-1\" />ממתין</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{status}</Badge>;\n    }\n  };\n\n  const formatDate = (dateString: string) => {\n    return new Date(dateString).toLocaleDateString('he-IL', {\n      year: 'numeric',\n      month: '2-digit',\n      day: '2-digit',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  const handleSelectAll = (checked: boolean) => {\n    if (checked) {\n      setSelectedUsers(usersData?.users.map((u: any) => u.user.id) || []);\n    } else {\n      setSelectedUsers([]);\n    }\n  };\n\n  const handleSelectUser = (userId: string, checked: boolean) => {\n    if (checked) {\n      setSelectedUsers([...selectedUsers, userId]);\n    } else {\n      setSelectedUsers(selectedUsers.filter(id => id !== userId));\n    }\n  };\n\n  return (\n    <div className=\"space-y-6\" dir=\"rtl\">\n      {/* System Statistics Cards */}\n      {systemStats && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">סה\"כ משתמשים</p>\n                  <p className=\"text-2xl font-bold text-[#4585d9]\">{systemStats.totalUsers}</p>\n                </div>\n                <User className=\"h-8 w-8 text-[#4585d9]\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">משתמשים פעילים</p>\n                  <p className=\"text-2xl font-bold text-green-600\">{systemStats.activeUsers}</p>\n                </div>\n                <Activity className=\"h-8 w-8 text-green-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">ממתינים לאישור</p>\n                  <p className=\"text-2xl font-bold text-yellow-600\">{systemStats.pendingUsers}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-yellow-600\" />\n              </div>\n            </CardContent>\n          </Card>\n\n          <Card>\n            <CardContent className=\"p-4\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-gray-600\">הרשמות חדשות (7 ימים)</p>\n                  <p className=\"text-2xl font-bold text-[#4585d9]\">{systemStats.recentRegistrations}</p>\n                </div>\n                <Calendar className=\"h-8 w-8 text-[#4585d9]\" />\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      )}\n\n      {/* Filters and Controls */}\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center justify-between\">\n            <span>ניהול משתמשים</span>\n            <div className=\"flex gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => exportMutation.mutate('json')}\n                disabled={exportMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 ml-1\" />\n                יצוא JSON\n              </Button>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => exportMutation.mutate('csv')}\n                disabled={exportMutation.isPending}\n              >\n                <Download className=\"w-4 h-4 ml-1\" />\n                יצוא CSV\n              </Button>\n            </div>\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex flex-col md:flex-row gap-4 mb-6\">\n            {/* Search */}\n            <div className=\"relative flex-1\">\n              <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n              <Input\n                placeholder=\"חיפוש לפי שם, אימייל, טלפון או ת.ז.\"\n                value={search}\n                onChange={(e) => setSearch(e.target.value)}\n                className=\"pr-10\"\n              />\n            </div>\n\n            {/* Status Filter */}\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"סינון לפי סטטוס\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"all\">כל הסטטוסים</SelectItem>\n                <SelectItem value=\"pending\">ממתין לאישור</SelectItem>\n                <SelectItem value=\"approved\">מאושר</SelectItem>\n                <SelectItem value=\"rejected\">נדחה</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Sort By */}\n            <Select value={sortBy} onValueChange={setSortBy}>\n              <SelectTrigger className=\"w-full md:w-48\">\n                <SelectValue placeholder=\"מיון לפי\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"createdAt\">תאריך הצטרפות</SelectItem>\n                <SelectItem value=\"fullName\">שם</SelectItem>\n                <SelectItem value=\"email\">אימייל</SelectItem>\n                <SelectItem value=\"status\">סטטוס</SelectItem>\n                <SelectItem value=\"lastLoginAt\">התחברות אחרונה</SelectItem>\n                <SelectItem value=\"loginCount\">מספר התחברויות</SelectItem>\n              </SelectContent>\n            </Select>\n\n            {/* Sort Order */}\n            <Select value={sortOrder} onValueChange={(value: \"asc\" | \"desc\") => setSortOrder(value)}>\n              <SelectTrigger className=\"w-full md:w-32\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"desc\">יורד</SelectItem>\n                <SelectItem value=\"asc\">עולה</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          {/* Bulk Actions */}\n          {selectedUsers.length > 0 && (\n            <div className=\"flex gap-2 mb-4 p-3 bg-blue-50 rounded-lg border\">\n              <span className=\"text-sm font-medium\">{selectedUsers.length} משתמשים נבחרו:</span>\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\">אשר הכל</Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>אישור משתמשים</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      האם אתה בטוח שברצונך לאשר {selectedUsers.length} משתמשים?\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>ביטול</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => bulkActionMutation.mutate({ action: 'approve', userIds: selectedUsers })}>\n                      אשר\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n\n              <AlertDialog>\n                <AlertDialogTrigger asChild>\n                  <Button size=\"sm\" variant=\"outline\">דחה הכל</Button>\n                </AlertDialogTrigger>\n                <AlertDialogContent>\n                  <AlertDialogHeader>\n                    <AlertDialogTitle>דחיית משתמשים</AlertDialogTitle>\n                    <AlertDialogDescription>\n                      האם אתה בטוח שברצונך לדחות {selectedUsers.length} משתמשים?\n                    </AlertDialogDescription>\n                  </AlertDialogHeader>\n                  <AlertDialogFooter>\n                    <AlertDialogCancel>ביטול</AlertDialogCancel>\n                    <AlertDialogAction onClick={() => bulkActionMutation.mutate({ action: 'reject', userIds: selectedUsers })}>\n                      דחה\n                    </AlertDialogAction>\n                  </AlertDialogFooter>\n                </AlertDialogContent>\n              </AlertDialog>\n            </div>\n          )}\n\n          {/* Users Table */}\n          {usersLoading ? (\n            <div className=\"text-center py-8\">טוען משתמשים...</div>\n          ) : (\n            <div className=\"overflow-x-auto\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead className=\"w-12\">\n                      <Checkbox\n                        checked={selectedUsers.length === usersData?.users.length && usersData?.users.length > 0}\n                        onCheckedChange={handleSelectAll}\n                      />\n                    </TableHead>\n                    <TableHead>שם מלא</TableHead>\n                    <TableHead>אימייל</TableHead>\n                    <TableHead>טלפון</TableHead>\n                    <TableHead>סטטוס</TableHead>\n                    <TableHead>שאלות</TableHead>\n                    <TableHead>תאריך הצטרפות</TableHead>\n                    <TableHead>פעילות אחרונה</TableHead>\n                    <TableHead>פעולות</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {usersData?.users.map((item: any) => (\n                    <TableRow key={item.user.id} className=\"hover:bg-gray-50\">\n                      <TableCell>\n                        <Checkbox\n                          checked={selectedUsers.includes(item.user.id)}\n                          onCheckedChange={(checked) => handleSelectUser(item.user.id, !!checked)}\n                        />\n                      </TableCell>\n                      <TableCell className=\"font-medium\">\n                        <div className=\"flex items-center gap-2\">\n                          {item.user.isAdmin && <Badge variant=\"secondary\" className=\"text-xs\">מנהל</Badge>}\n                          {item.user.fullName}\n                        </div>\n                      </TableCell>\n                      <TableCell>{item.user.email}</TableCell>\n                      <TableCell>{item.user.phone}</TableCell>\n                      <TableCell>{getStatusBadge(item.user.status)}</TableCell>\n                      <TableCell>{item.questionsCount || 0}</TableCell>\n                      <TableCell>{formatDate(item.user.createdAt)}</TableCell>\n                      <TableCell>\n                        {item.user.lastLoginAt ? formatDate(item.user.lastLoginAt) : 'מעולם לא התחבר'}\n                      </TableCell>\n                      <TableCell>\n                        <div className=\"flex gap-1\">\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                onClick={() => setSelectedUser(item.user.id)}\n                              >\n                                פרטים\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl max-h-[80vh] overflow-y-auto\">\n                              <DialogHeader>\n                                <DialogTitle>פרטי משתמש - {item.user.fullName}</DialogTitle>\n                              </DialogHeader>\n                              {userDetails && (\n                                <div className=\"space-y-4\" dir=\"rtl\">\n                                  <div className=\"grid grid-cols-2 gap-4\">\n                                    <div>\n                                      <h4 className=\"font-semibold mb-2\">פרטים אישיים</h4>\n                                      <div className=\"space-y-1 text-sm\">\n                                        <p><strong>שם:</strong> {userDetails.user.fullName}</p>\n                                        <p><strong>אימייל:</strong> {userDetails.user.email}</p>\n                                        <p><strong>טלפון:</strong> {userDetails.user.phone}</p>\n                                        <p><strong>ת.ז.:</strong> {userDetails.user.personalId}</p>\n                                        <p><strong>סטטוס:</strong> {getStatusBadge(userDetails.user.status)}</p>\n                                      </div>\n                                    </div>\n                                    \n                                    <div>\n                                      <h4 className=\"font-semibold mb-2\">סטטיסטיקות</h4>\n                                      <div className=\"space-y-1 text-sm\">\n                                        <p><strong>שאלות שנשלחו:</strong> {userDetails.statistics.questionsSubmitted}</p>\n                                        <p><strong>שאלות שנענו:</strong> {userDetails.statistics.questionsAnswered}</p>\n                                        <p><strong>התחברויות:</strong> {userDetails.statistics.totalLoginCount}</p>\n                                        <p><strong>התחברות אחרונה:</strong> {userDetails.statistics.lastLogin ? formatDate(userDetails.statistics.lastLogin) : 'מעולם לא'}</p>\n                                        <p><strong>תאריך הצטרפות:</strong> {formatDate(userDetails.statistics.joinDate)}</p>\n                                      </div>\n                                    </div>\n                                  </div>\n\n                                  <div>\n                                    <h4 className=\"font-semibold mb-2\">פעילות אחרונה</h4>\n                                    <div className=\"max-h-40 overflow-y-auto\">\n                                      {userDetails.recentActivity.length > 0 ? (\n                                        userDetails.recentActivity.map((activity, index) => (\n                                          <div key={index} className=\"border-b pb-2 mb-2 last:border-b-0\">\n                                            <div className=\"flex justify-between items-start\">\n                                              <div>\n                                                <p className=\"font-medium text-sm\">{activity.title}</p>\n                                                <p className=\"text-xs text-gray-600\">{activity.content}</p>\n                                              </div>\n                                              <div className=\"text-xs text-gray-500\">\n                                                {formatDate(activity.date)}\n                                              </div>\n                                            </div>\n                                          </div>\n                                        ))\n                                      ) : (\n                                        <p className=\"text-sm text-gray-500\">אין פעילות אחרונה</p>\n                                      )}\n                                    </div>\n                                  </div>\n                                </div>\n                              )}\n                            </DialogContent>\n                          </Dialog>\n\n                          {item.user.status === 'pending' && (\n                            <>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"text-green-600 border-green-200 hover:bg-green-50\"\n                                onClick={() => updateStatusMutation.mutate({ userId: item.user.id, status: 'approved' })}\n                                disabled={updateStatusMutation.isPending}\n                              >\n                                אשר\n                              </Button>\n                              <Button\n                                variant=\"outline\"\n                                size=\"sm\"\n                                className=\"text-red-600 border-red-200 hover:bg-red-50\"\n                                onClick={() => updateStatusMutation.mutate({ userId: item.user.id, status: 'rejected' })}\n                                disabled={updateStatusMutation.isPending}\n                              >\n                                דחה\n                              </Button>\n                            </>\n                          )}\n\n                          {item.user.status === 'approved' && (\n                            <AlertDialog>\n                              <AlertDialogTrigger asChild>\n                                <Button\n                                  variant=\"outline\"\n                                  size=\"sm\"\n                                  className=\"text-orange-600 border-orange-200 hover:bg-orange-50\"\n                                >\n                                  בטל אישור\n                                </Button>\n                              </AlertDialogTrigger>\n                              <AlertDialogContent>\n                                <AlertDialogHeader>\n                                  <AlertDialogTitle>ביטול אישור משתמש</AlertDialogTitle>\n                                  <AlertDialogDescription>\n                                    האם אתה בטוח שברצונך לבטל את אישור המשתמש {item.user.fullName}?\n                                    משתמש זה לא יוכל יותר לגשת למערכת.\n                                  </AlertDialogDescription>\n                                </AlertDialogHeader>\n                                <AlertDialogFooter>\n                                  <AlertDialogCancel>ביטול</AlertDialogCancel>\n                                  <AlertDialogAction \n                                    onClick={() => updateStatusMutation.mutate({ userId: item.user.id, status: 'rejected', reason: 'חריגה מהכללים' })}\n                                  >\n                                    בטל אישור\n                                  </AlertDialogAction>\n                                </AlertDialogFooter>\n                              </AlertDialogContent>\n                            </AlertDialog>\n                          )}\n                        </div>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            </div>\n          )}\n\n          {/* Pagination */}\n          {usersData && usersData.pages > 1 && (\n            <div className=\"flex justify-center gap-2 mt-6\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={currentPage === 1}\n                onClick={() => setCurrentPage(currentPage - 1)}\n              >\n                קודם\n              </Button>\n              <span className=\"px-4 py-2 text-sm\">\n                עמוד {currentPage} מתוך {usersData.pages}\n              </span>\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                disabled={currentPage === usersData.pages}\n                onClick={() => setCurrentPage(currentPage + 1)}\n              >\n                הבא\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":25965},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 2500 // 2.5 seconds auto-dismiss\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3920},"client/src/hooks/useAdminNotifications.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface NotificationCounts {\n  users: number;\n  questions: number;\n  contacts: number;\n  news: number;\n}\n\nexport function useAdminNotifications() {\n  const queryClient = useQueryClient();\n\n  const { data: counts, isLoading } = useQuery<NotificationCounts>({\n    queryKey: [\"/api/admin/notification-counts\"],\n    refetchInterval: 5000, // Auto-refresh every 5 seconds\n    refetchOnWindowFocus: true,\n  });\n\n  const markUsersSeen = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/mark-users-seen\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-counts\"] });\n    },\n  });\n\n  const markQuestionsSeen = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/mark-questions-seen\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-counts\"] });\n    },\n  });\n\n  const markContactsSeen = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/mark-contacts-seen\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-counts\"] });\n    },\n  });\n\n  const markNewsSeen = useMutation({\n    mutationFn: () => apiRequest(\"/api/admin/mark-news-seen\", { method: \"POST\" }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-counts\"] });\n    },\n  });\n\n  return {\n    counts: counts || { users: 0, questions: 0, contacts: 0, news: 0 },\n    isLoading,\n    markUsersSeen,\n    markQuestionsSeen,\n    markContactsSeen,\n    markNewsSeen,\n  };\n}","size_bytes":1718},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useState, useEffect } from \"react\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport function useAuth() {\n  const [deviceId, setDeviceId] = useState<string>(\"\");\n  const queryClient = useQueryClient();\n\n  useEffect(() => {\n    // Generate or get existing device ID - but preserve admin login\n    let storedDeviceId = localStorage.getItem(\"deviceId\");\n    \n    // Don't clear admin device ID if user is admin\n    const isAdminStored = localStorage.getItem('isAdmin') === 'true';\n    if (!isAdminStored && storedDeviceId === 'admin-device-simple') {\n      localStorage.removeItem(\"deviceId\");\n      storedDeviceId = null;\n    }\n    \n    if (!storedDeviceId) {\n      storedDeviceId = `device-${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\n      localStorage.setItem(\"deviceId\", storedDeviceId);\n    }\n    setDeviceId(storedDeviceId);\n  }, []);\n\n  // Check if admin is logged in via localStorage - refresh each render\n  const [isAdminLoggedIn, setIsAdminLoggedIn] = useState(false);\n  const [adminEmail, setAdminEmail] = useState<string | null>(null);\n  \n  // Update admin status on each render and listen for changes\n  useEffect(() => {\n    const updateAdminStatus = () => {\n      const adminStatus = localStorage.getItem('isAdmin') === 'true';\n      const email = localStorage.getItem('adminEmail');\n      setIsAdminLoggedIn(adminStatus);\n      setAdminEmail(email);\n    };\n    \n    updateAdminStatus();\n    \n    // Listen for storage changes\n    window.addEventListener('storage', updateAdminStatus);\n    \n    return () => {\n      window.removeEventListener('storage', updateAdminStatus);\n    };\n  }, []);\n  \n  // console.log('Auth check:', { isAdminLoggedIn, adminEmail, deviceId });\n\n  // Enable auth check for all users (not just admin)\n  const { data: user, isLoading, error } = useQuery({\n    queryKey: [\"/api/auth/user\", deviceId],\n    queryFn: async () => {\n      const response = await fetch(`/api/auth/user?deviceId=${deviceId}`);\n      if (!response.ok) {\n        throw new Error('Unauthorized');\n      }\n      return response.json();\n    },\n    enabled: !!deviceId && !isAdminLoggedIn, // Check for regular users, not admin\n    retry: false,\n    refetchOnWindowFocus: false,\n    refetchOnMount: false,\n    refetchInterval: false,\n    staleTime: 30000,\n  });\n\n  // Registration mutation\n  const registerMutation = useMutation({\n    mutationFn: async (userData: { fullName: string; personalId: string; phone: string }) => {\n      const fullData = {\n        ...userData,\n        email: `${userData.personalId}@temp.com`, // Temporary email, can be updated later\n        password: userData.personalId, // Use personal ID as temporary password\n        deviceId\n      };\n      return apiRequest(\"POST\", \"/api/auth/register\", fullData);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n    },\n  });\n\n  // Logout function\n  const logout = () => {\n    localStorage.clear();\n    sessionStorage.clear();\n    setIsAdminLoggedIn(false);\n    setAdminEmail(null);\n    queryClient.clear();\n    // Force complete page reload to clear all React state\n    window.location.href = \"/\";\n    setTimeout(() => window.location.reload(), 50);\n  };\n\n\n\n  // Return admin user if admin is logged in\n  if (isAdminLoggedIn && adminEmail) {\n    return {\n      user: {\n        id: 'admin-user',\n        email: adminEmail,\n        fullName: 'מנהל המערכת',\n        deviceId: 'admin-device-simple',\n        isAdmin: true,\n        status: 'approved' as const,\n        personalId: 'admin',\n        phone: 'admin',\n        password: 'admin123',\n        createdAt: new Date(),\n        updatedAt: new Date(),\n        approvedAt: new Date(),\n        approvedBy: 'system'\n      },\n      deviceId: 'admin-device-simple',\n      isLoading: false,\n      isAuthenticated: true,\n      error: null,\n      register: (userData: { fullName: string; personalId: string; phone: string }) => registerMutation.mutateAsync(userData),\n      logout\n    };\n  }\n\n  const isAuthenticated = !!user && !error;\n  \n  console.log('useAuth for regular user:', { \n    user: user ? { id: user.id, email: user.email, isAdmin: user.isAdmin } : null, \n    isAuthenticated, \n    isLoading, \n    error: error?.message || null,\n    deviceId\n  });\n  \n  return {\n    user: user ? { ...user, deviceId } : null,\n    deviceId,\n    isLoading,\n    isAuthenticated,\n    error,\n    register: (userData: { fullName: string; personalId: string; phone: string }) => registerMutation.mutateAsync(userData),\n    logout\n  };\n}","size_bytes":4613},"client/src/hooks/useNotificationBadges.ts":{"content":"import { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\ninterface NotificationBadges {\n  questions: number;\n  contacts: number;\n  news: number;\n  users: number;\n}\n\nexport function useNotificationBadges() {\n  const queryClient = useQueryClient();\n\n  const { data: badges, isLoading } = useQuery<NotificationBadges>({\n    queryKey: [\"/api/admin/notification-badges\"],\n    refetchInterval: 5000, // Update every 5 seconds for real-time experience\n    staleTime: 1000, // Consider data stale after 1 second\n  });\n\n  const markSeenMutation = useMutation({\n    mutationFn: async (type: string) => {\n      return apiRequest(`/api/admin/mark-seen/${type}`, {\n        method: \"POST\",\n        body: JSON.stringify({}),\n      });\n    },\n    onSuccess: () => {\n      // Invalidate badges to update the UI immediately\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/notification-badges\"] });\n    },\n  });\n\n  const markAsSeen = (type: 'questions' | 'contacts' | 'news') => {\n    markSeenMutation.mutate(type);\n  };\n\n  return {\n    badges: badges || { questions: 0, contacts: 0, news: 0, users: 0 },\n    isLoading,\n    markAsSeen,\n    isMarkingAsSeen: markSeenMutation.isPending,\n  };\n}","size_bytes":1256},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/lib/deviceId.ts":{"content":"export function getDeviceId(): string {\n  let deviceId = localStorage.getItem('deviceId');\n  \n  if (!deviceId) {\n    // Generate a unique device ID\n    deviceId = 'device_' + Math.random().toString(36).substr(2, 9) + '_' + Date.now().toString(36);\n    localStorage.setItem('deviceId', deviceId);\n  }\n  \n  return deviceId;\n}\n\nexport function clearDeviceId(): void {\n  localStorage.removeItem('deviceId');\n}\n","size_bytes":406},"client/src/lib/logout.ts":{"content":"// Centralized logout function with improved cleanup\nexport const performLogout = () => {\n  console.log('Starting logout process...');\n  \n  // Clear all localStorage items related to authentication\n  localStorage.removeItem('isAdmin');\n  localStorage.removeItem('adminEmail');\n  localStorage.removeItem('user');\n  localStorage.removeItem('deviceId');\n  localStorage.removeItem('admin-device-id');\n  localStorage.removeItem('device-id');\n  \n  // Clear sessionStorage completely\n  sessionStorage.clear();\n  \n  // Clear any cached API data\n  try {\n    // Clear any potential cached authentication data\n    document.cookie.split(\";\").forEach(function(c) { \n      document.cookie = c.replace(/^ +/, \"\").replace(/=.*/, \"=;expires=\" + new Date().toUTCString() + \";path=/\"); \n    });\n  } catch (e) {\n    console.log('Cookie clearing failed:', e);\n  }\n  \n  console.log('All data cleared, redirecting to login...');\n  \n  // Force redirect to login page\n  window.location.replace(\"/login\");\n};","size_bytes":982},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  url: string,\n  options: {\n    method?: string;\n    body?: any;\n  } = {}\n): Promise<any> {\n  const { method = 'GET', body } = options;\n  \n  const res = await fetch(url, {\n    method,\n    headers: body ? { \"Content-Type\": \"application/json\" } : {},\n    body: body ? JSON.stringify(body) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return await res.json();\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1449},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/AdminDashboard.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { \n  Users, \n  MessageCircleQuestion, \n  Newspaper, \n  MapPin, \n  BookOpen, \n  Video, \n  MessageSquare, \n  Settings, \n  Shield, \n  Clock, \n  CheckCircle, \n  XCircle, \n  Eye, \n  Edit, \n  Trash2, \n  Plus,\n  BarChart3,\n  TrendingUp,\n  Activity,\n  MessageCircle,\n  X\n} from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useNotificationBadges } from \"@/hooks/useNotificationBadges\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useAdminNotifications } from \"@/hooks/useAdminNotifications\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { performLogout } from \"@/lib/logout\";\nimport SimpleUserManagement from \"@/components/SimpleUserManagement\";\nimport { NotificationBadge } from \"@/components/NotificationBadge\";\nimport type { User, Question, Answer, News, Synagogue, DailyHalacha, Video as VideoType, ContactMessage } from \"@shared/schema\";\n\n// Form schemas\nconst newsSchema = z.object({\n  title: z.string().min(1, \"כותרת נדרשת\"),\n  content: z.string().min(1, \"תוכן נדרש\"),\n  excerpt: z.string().optional(),\n  isUrgent: z.boolean().default(false)\n});\n\nconst synagogueSchema = z.object({\n  name: z.string().min(1, \"שם נדרש\"),\n  address: z.string().min(1, \"כתובת נדרשת\"),\n  latitude: z.string().optional(),\n  longitude: z.string().optional(),\n  shacharit: z.string().optional(),\n  mincha: z.string().optional(),\n  maariv: z.string().optional(),\n  contact: z.string().optional(),\n  contactPhone: z.string().optional(),\n  notes: z.string().optional()\n});\n\nconst halachaSchema = z.object({\n  title: z.string().optional(),\n  content: z.string().min(1, \"תוכן נדרש\"),\n  date: z.string()\n});\n\nconst videoSchema = z.object({\n  title: z.string().min(1, \"כותרת נדרשת\"),\n  description: z.string().optional(),\n  youtubeId: z.string().min(1, \"מזהה YouTube נדרש\"),\n  thumbnail: z.string().optional()\n});\n\ninterface QuestionWithAnswers extends Question {\n  answers: Answer[];\n  user?: { fullName: string };\n}\n\n// Edit Answer Component\nfunction EditAnswerContent({ \n  questionId, \n  editingAnswerId, \n  setEditingAnswerId, \n  editAnswerText, \n  setEditAnswerText, \n  editAnswerMutation \n}: {\n  questionId: string;\n  editingAnswerId: string;\n  setEditingAnswerId: (id: string) => void;\n  editAnswerText: string;\n  setEditAnswerText: (text: string) => void;\n  editAnswerMutation: any;\n}) {\n  const { data: answers } = useQuery({\n    queryKey: [\"/api/answers/question\", questionId],\n    queryFn: () => fetch(`/api/answers/question/${questionId}`).then(res => res.json())\n  }) as { data: Answer[] | undefined };\n\n  if (!answers || answers.length === 0) {\n    return <p className=\"text-gray-600 text-center py-4\">אין תשובות לשאלה זו</p>;\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      <p className=\"text-sm text-gray-600\">בחר תשובה לעריכה:</p>\n      {answers.map((answer) => (\n        <div key={answer.id} className=\"border rounded-lg p-4 space-y-3\">\n          <div className=\"text-right\">\n            <p className=\"text-gray-700 mb-2\">{answer.content}</p>\n            <p className=\"text-xs text-gray-500\">\n              נכתב ב-{new Date(answer.createdAt).toLocaleDateString('he-IL')} על ידי {answer.answeredBy}\n            </p>\n          </div>\n          \n          {editingAnswerId === answer.id ? (\n            <div className=\"space-y-3\">\n              <Textarea\n                value={editAnswerText}\n                onChange={(e) => setEditAnswerText(e.target.value)}\n                placeholder=\"ערוך את התשובה...\"\n                rows={4}\n                className=\"text-right\"\n              />\n              <div className=\"flex gap-2\">\n                <Button\n                  size=\"sm\"\n                  onClick={() => {\n                    if (editAnswerText.trim()) {\n                      editAnswerMutation.mutate({ \n                        answerId: answer.id, \n                        content: editAnswerText \n                      });\n                    }\n                  }}\n                  disabled={!editAnswerText.trim() || editAnswerMutation.isPending}\n                  className=\"bg-green-600 hover:bg-green-700 text-white\"\n                >\n                  שמור שינויים\n                </Button>\n                <Button\n                  size=\"sm\"\n                  variant=\"outline\"\n                  onClick={() => {\n                    setEditingAnswerId(\"\");\n                    setEditAnswerText(\"\");\n                  }}\n                >\n                  ביטול\n                </Button>\n              </div>\n            </div>\n          ) : (\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={() => {\n                setEditingAnswerId(answer.id);\n                setEditAnswerText(answer.content);\n              }}\n              className=\"text-blue-600 border-blue-600 hover:bg-blue-50\"\n            >\n              <Edit className=\"h-4 w-4 ml-1\" />\n              ערוך תשובה זו\n            </Button>\n          )}\n        </div>\n      ))}\n    </div>\n  );\n}\n\nexport default function AdminDashboard() {\n  const { user } = useAuth();\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n  const [selectedTab, setSelectedTab] = useState(\"overview\");\n  const [viewedTabs, setViewedTabs] = useState<Set<string>>(new Set());\n  const [isCheckingAdmin, setIsCheckingAdmin] = useState(true);\n  const [hasAdminAccess, setHasAdminAccess] = useState(false);\n  const { badges, markAsSeen } = useNotificationBadges();\n  const { counts, isLoading: notificationsLoading, markUsersSeen, markQuestionsSeen, markContactsSeen, markNewsSeen } = useAdminNotifications();\n\n  // Check admin access - prioritize localStorage admin flag\n  useEffect(() => {\n    console.log('Checking admin access:', { user, localStorage_isAdmin: localStorage.getItem('isAdmin') });\n    \n    const checkAdminAccess = async () => {\n      // FIRST check localStorage for admin flag (immediate after login)\n      const isAdminStored = localStorage.getItem('isAdmin') === 'true';\n      if (isAdminStored) {\n        console.log('Admin access granted via localStorage');\n        setHasAdminAccess(true);\n        setIsCheckingAdmin(false);\n        return;\n      }\n\n      // THEN check if user has admin privileges\n      if (user?.email === \"admin@police.gov.il\" || user?.isAdmin) {\n        console.log('Admin access granted via user object');\n        setHasAdminAccess(true);\n        setIsCheckingAdmin(false);\n        return;\n      }\n\n      // Only deny access if we have no user AND no admin flag\n      if (!user && !isAdminStored) {\n        console.log('No admin access found');\n        setHasAdminAccess(false);\n        setIsCheckingAdmin(false);\n      }\n    };\n\n    checkAdminAccess();\n  }, [user?.email, user?.isAdmin]);\n\n  // Data fetching - only when admin access is confirmed\n  const { data: pendingUsers } = useQuery({\n    queryKey: [\"/api/admin/pending-users\"],\n    enabled: hasAdminAccess\n  }) as { data: User[] | undefined };\n\n  const { data: allQuestions } = useQuery({\n    queryKey: [\"/api/admin/questions\"],\n    enabled: hasAdminAccess\n  }) as { data: Question[] | undefined };\n\n  const { data: newsList } = useQuery({\n    queryKey: [\"/api/news\"],\n    enabled: hasAdminAccess\n  }) as { data: News[] | undefined };\n\n  const { data: synagogues } = useQuery({\n    queryKey: [\"/api/synagogues\"],\n    enabled: hasAdminAccess\n  }) as { data: Synagogue[] | undefined };\n\n  const { data: videos } = useQuery({\n    queryKey: [\"/api/videos\"],\n    enabled: hasAdminAccess\n  }) as { data: VideoType[] | undefined };\n\n  const { data: contactMessages } = useQuery({\n    queryKey: [\"/api/admin/contact-messages\"],\n    enabled: hasAdminAccess\n  }) as { data: ContactMessage[] | undefined };\n\n  const { data: halachot } = useQuery({\n    queryKey: [\"/api/daily-halacha/all\"],\n    enabled: hasAdminAccess\n  }) as { data: DailyHalacha[] | undefined };\n\n  // User management mutations\n  const approveUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/approve-user/${userId}`, { \n        method: \"POST\",\n        body: { approvedBy: \"admin\", deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"המשתמש אושר בהצלחה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה באישור המשתמש\"\n      });\n    }\n  });\n\n  const rejectUserMutation = useMutation({\n    mutationFn: async (userId: string) => {\n      return apiRequest(`/api/admin/reject-user/${userId}`, { \n        method: \"POST\",\n        body: { approvedBy: \"admin\", deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"המשתמש נדחה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/pending-users\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה בדחיית המשתמש\"\n      });\n    }\n  });\n\n  // Question management\n  const [selectedQuestionId, setSelectedQuestionId] = useState<string>(\"\");\n  const [answerText, setAnswerText] = useState(\"\");\n  const [editingAnswerId, setEditingAnswerId] = useState<string>(\"\");\n  const [editAnswerText, setEditAnswerText] = useState(\"\");\n  \n  // Edit state for news, synagogues, and halacha\n  const [editingNewsId, setEditingNewsId] = useState<string>(\"\");\n  const [editingSynagogueId, setEditingSynagogueId] = useState<string>(\"\");\n  const [editingHalachaId, setEditingHalachaId] = useState<string>(\"\");\n\n  const answerQuestionMutation = useMutation({\n    mutationFn: async ({ questionId, answer }: { questionId: string; answer: string }) => {\n      return apiRequest(\"/api/admin/answers\", {\n        method: \"POST\",\n        body: {\n          questionId,\n          content: answer,\n          deviceId: localStorage.getItem('deviceId') || 'admin-device-simple'\n        }\n      });\n    },\n    onSuccess: async () => {\n      toast({ title: \"התשובה נשלחה בהצלחה\" });\n      setAnswerText(\"\");\n      setSelectedQuestionId(\"\");\n      // Clear any edit state to prevent auto-opening edit mode\n      setEditingAnswerId(\"\");\n      setEditAnswerText(\"\");\n      // Refresh all questions to show updated status\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה בשליחת התשובה\"\n      });\n    }\n  });\n\n  const approveQuestionMutation = useMutation({\n    mutationFn: async (questionId: string) => {\n      return apiRequest(`/api/questions/${questionId}/approve`, {\n        method: \"POST\",\n        body: { approvedBy: \"admin\", deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"השאלה אושרה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה באישור השאלה\"\n      });\n    }\n  });\n\n  // Edit answer mutation\n  const editAnswerMutation = useMutation({\n    mutationFn: async ({ answerId, content }: { answerId: string; content: string }) => {\n      return apiRequest(`/api/admin/answers/${answerId}`, {\n        method: \"PUT\",\n        body: { content, deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"התשובה עודכנה בהצלחה\" });\n      setEditAnswerText(\"\");\n      setEditingAnswerId(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n      // Invalidate answers queries to refresh the EditAnswerContent component\n      queryClient.invalidateQueries({ queryKey: [\"/api/answers/question\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה בעדכון התשובה\"\n      });\n    }\n  });\n\n  // Delete question mutation\n  const deleteQuestionMutation = useMutation({\n    mutationFn: async (questionId: string) => {\n      return apiRequest(`/api/admin/questions/${questionId}`, {\n        method: \"DELETE\",\n        body: { deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"השאלה נמחקה בהצלחה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה במחיקת השאלה\"\n      });\n    }\n  });\n\n  // Update question mutation\n  const [editingQuestionId, setEditingQuestionId] = useState<string>(\"\");\n  const [editQuestionTitle, setEditQuestionTitle] = useState(\"\");\n  const [editQuestionContent, setEditQuestionContent] = useState(\"\");\n\n  const updateQuestionMutation = useMutation({\n    mutationFn: async ({ questionId, title, content }: { questionId: string; title: string; content: string }) => {\n      return apiRequest(`/api/admin/questions/${questionId}`, {\n        method: \"PUT\",\n        body: { title, content, deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"השאלה עודכנה בהצלחה\" });\n      setEditingQuestionId(\"\");\n      setEditQuestionTitle(\"\");\n      setEditQuestionContent(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה בעדכון השאלה\"\n      });\n    }\n  });\n\n  // Content management forms\n  const newsForm = useForm<z.infer<typeof newsSchema>>({\n    resolver: zodResolver(newsSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      excerpt: \"\",\n      isUrgent: false\n    }\n  });\n\n  const createNewsMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof newsSchema>) => {\n      // Add deviceId for admin authentication\n      const payload = { ...data, deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' };\n      return apiRequest(\"/api/admin/news\", { \n        method: \"POST\",\n        body: payload\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"החדשה נוצרה בהצלחה\" });\n      newsForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n    },\n    onError: (error) => {\n      console.error(\"News creation error:\", error);\n      toast({ variant: \"destructive\", title: \"שגיאה ביצירת החדשה\" });\n    }\n  });\n\n  const updateNewsMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof newsSchema> }) => {\n      return apiRequest(`/api/admin/news/${id}`, { \n        method: \"PUT\",\n        body: { ...data, deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"החדשה עודכנה בהצלחה\" });\n      setEditingNewsId(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"שגיאה בעדכון החדשה\" });\n    }\n  });\n\n  const deleteNewsMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/admin/news/${id}`, { \n        method: \"DELETE\",\n        body: { deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"החדשה נמחקה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/news\"] });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"שגיאה במחיקת החדשה\" });\n    }\n  });\n\n  // Synagogue management\n  const synagogueForm = useForm<z.infer<typeof synagogueSchema>>({\n    resolver: zodResolver(synagogueSchema),\n    defaultValues: {\n      name: \"\",\n      address: \"\",\n      latitude: \"\",\n      longitude: \"\",\n      shacharit: \"\",\n      mincha: \"\",\n      maariv: \"\",\n      contact: \"\",\n      contactPhone: \"\",\n      notes: \"\"\n    }\n  });\n\n  const halachaForm = useForm<z.infer<typeof halachaSchema>>({\n    resolver: zodResolver(halachaSchema),\n    defaultValues: {\n      title: \"\",\n      content: \"\",\n      date: new Date().toISOString().split('T')[0]\n    }\n  });\n\n  const createSynagogueMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof synagogueSchema>) => {\n      // Add deviceId for admin authentication\n      const payload = { ...data, deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' };\n      return apiRequest(\"/api/admin/synagogues\", { \n        method: \"POST\",\n        body: payload\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"בית הכנסת נוצר בהצלחה\" });\n      synagogueForm.reset();\n      queryClient.invalidateQueries({ queryKey: [\"/api/synagogues\"] });\n    },\n    onError: (error) => {\n      console.error(\"Synagogue creation error:\", error);\n      toast({ variant: \"destructive\", title: \"שגיאה ביצירת בית הכנסת\" });\n    }\n  });\n\n  const updateSynagogueMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof synagogueSchema> }) => {\n      const deviceId = localStorage.getItem('deviceId') || 'admin-device-simple';\n      const payload = { ...data, deviceId };\n      console.log('Updating synagogue:', { id, payload });\n      return apiRequest(`/api/admin/synagogues/${id}`, { \n        method: \"PUT\",\n        body: payload\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"בית הכנסת עודכן בהצלחה\" });\n      setEditingSynagogueId(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/synagogues\"] });\n    },\n    onError: (error) => {\n      console.error('Synagogue update error:', error);\n      toast({ variant: \"destructive\", title: \"שגיאה בעדכון בית הכנסת\" });\n    }\n  });\n\n  const deleteSynagogueMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(`/api/admin/synagogues/${id}`, { \n        method: \"DELETE\",\n        body: { deviceId: localStorage.getItem('deviceId') || 'admin-device-simple' }\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"בית הכנסת נמחק\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/synagogues\"] });\n    },\n    onError: () => {\n      toast({ variant: \"destructive\", title: \"שגיאה במחיקת בית הכנסת\" });\n    }\n  });\n\n  // Halacha management mutations\n  const createHalachaMutation = useMutation({\n    mutationFn: async (data: z.infer<typeof halachaSchema>) => {\n      const deviceId = 'admin-device-simple'; // Force admin device ID\n      const payload = { \n        ...data, \n        deviceId \n      };\n      return apiRequest(\"/api/admin/daily-halacha\", { \n        method: \"POST\",\n        body: payload\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"הלכה יומית נוצרה בהצלחה\" });\n      halachaForm.reset({\n        title: \"\",\n        content: \"\",\n        date: new Date().toISOString().split('T')[0]\n      });\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha\"] });\n    },\n    onError: (error) => {\n      console.error(\"Halacha creation error:\", error);\n      toast({ variant: \"destructive\", title: \"שגיאה ביצירת הלכה יומית\" });\n    }\n  });\n\n  const updateHalachaMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: z.infer<typeof halachaSchema> }) => {\n      const deviceId = 'admin-device-simple'; // Force admin device ID\n      const payload = { \n        ...data, \n        deviceId \n      };\n      return apiRequest(`/api/admin/daily-halacha/${id}`, { \n        method: \"PUT\",\n        body: payload\n      });\n    },\n    onSuccess: () => {\n      toast({ title: \"הלכה יומית עודכנה בהצלחה\" });\n      setEditingHalachaId(\"\");\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha\"] });\n    },\n    onError: (error) => {\n      console.error('Halacha update error:', error);\n      toast({ variant: \"destructive\", title: \"שגיאה בעדכון הלכה יומית\" });\n    }\n  });\n\n  const deleteHalachaMutation = useMutation({\n    mutationFn: async (id: string) => {\n      const deviceId = localStorage.getItem('deviceId') || 'admin-device-simple';\n      console.log('Attempting to delete halacha:', { id, deviceId });\n      \n      const response = await fetch(`/api/admin/daily-halacha/${id}`, {\n        method: \"DELETE\",\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ deviceId })\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.text();\n        console.error('Delete response error:', { status: response.status, statusText: response.statusText, data: errorData });\n        throw new Error(`Failed to delete: ${response.status} ${response.statusText}`);\n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({ title: \"הלכה יומית נמחקה\" });\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha/all\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/daily-halacha\"] });\n    },\n    onError: (error) => {\n      console.error('Delete halacha error:', error);\n      toast({ variant: \"destructive\", title: \"שגיאה במחיקת הלכה יומית\" });\n    }\n  });\n\n  // Statistics calculations with dynamic updates\n  const statistics = {\n    totalUsers: pendingUsers?.length || 0,\n    pendingQuestions: allQuestions?.filter(q => q.status === \"pending\").length || 0,\n    answeredQuestions: allQuestions?.filter(q => q.status === \"answered\").length || 0,\n    totalNews: newsList?.length || 0,\n    totalSynagogues: synagogues?.length || 0,\n    totalVideos: videos?.length || 0,\n    unreadMessages: contactMessages?.filter(m => !m.isRead).length || 0\n  };\n\n  // Reset viewed tabs when new items appear or disappear\n  useEffect(() => {\n    if (statistics.totalUsers === 0 && viewedTabs.has(\"users\")) {\n      setViewedTabs(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(\"users\");\n        return newSet;\n      });\n    }\n    if (statistics.pendingQuestions === 0 && viewedTabs.has(\"questions\")) {\n      setViewedTabs(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(\"questions\");\n        return newSet;\n      });\n    }\n    if (statistics.unreadMessages === 0 && viewedTabs.has(\"messages\")) {\n      setViewedTabs(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(\"messages\");\n        return newSet;\n      });\n    }\n  }, [statistics.totalUsers, statistics.pendingQuestions, statistics.unreadMessages, viewedTabs]);\n\n  // Loading state\n  if (isCheckingAdmin) {\n    return (\n      <div className=\"p-4\">\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6 text-center\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">בודק הרשאות מנהל...</p>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  // Access denied\n  if (!hasAdminAccess) {\n    return (\n      <div className=\"p-4\">\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6 text-center\">\n            <Shield className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h2 className=\"text-xl font-bold text-gray-800 mb-2\">אין הרשאת גישה</h2>\n            <p className=\"text-gray-600 mb-4\">רק מנהלי מערכת יכולים לגשת לדף זה.</p>\n            <Button \n              onClick={performLogout}\n              className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n            >\n              חזור לדף ההרשמה/התחברות\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-2 sm:p-4 space-y-4 sm:space-y-6\">\n      {/* Header */}\n      <Card className=\"shadow-card bg-gradient-to-r from-police-blue to-police-blue-dark\">\n        <CardContent className=\"p-3 sm:p-6\">\n          <div className=\"flex flex-col sm:flex-row items-start sm:items-center justify-between text-white gap-3 sm:gap-0\">\n            <div className=\"flex items-center gap-2 sm:gap-3\">\n              <Shield className=\"h-6 w-6 sm:h-8 sm:w-8\" />\n              <div>\n                <h1 className=\"text-lg sm:text-2xl font-bold\">מערכת ניהול מאוחדת</h1>\n                <p className=\"text-[#4585d9] text-sm sm:text-base\">ברוך הבא, {user?.fullName || \"מנהל המערכת\"}</p>\n              </div>\n            </div>\n            <div className=\"flex flex-col sm:flex-row items-start sm:items-center gap-2 sm:gap-4 w-full sm:w-auto\">\n              <div className=\"flex items-center gap-2 order-2 sm:order-1\">\n                <Activity className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                <span className=\"text-xs sm:text-sm\">מערכת פעילה</span>\n              </div>\n              <div className=\"w-full sm:w-auto order-1 sm:order-2\">\n                <button \n                  onClick={performLogout}\n                  className=\"w-full sm:w-auto bg-red-600 hover:bg-red-700 text-white font-bold py-2 sm:py-3 px-4 sm:px-8 rounded-xl shadow-2xl hover:shadow-red-600/50 transition-all duration-300 transform hover:scale-110 hover:-translate-y-1 border-2 border-red-400 hover:border-red-300 text-sm sm:text-base\"\n                  style={{\n                    background: 'linear-gradient(135deg, #dc2626, #b91c1c, #991b1b)',\n                    boxShadow: '0 10px 25px rgba(220, 38, 38, 0.4), 0 0 0 1px rgba(239, 68, 68, 0.3)',\n                  }}\n                >\n                  <span className=\"flex items-center justify-center gap-2\">\n                    <span className=\"text-base sm:text-xl\">🚪</span>\n                    <span>התנתק מהמערכת</span>\n                  </span>\n                </button>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n      {/* Main Dashboard */}\n      <Tabs \n        value={selectedTab} \n        onValueChange={(tab) => {\n          setSelectedTab(tab);\n          setViewedTabs(prev => new Set([...Array.from(prev), tab]));\n          \n          // Mark items as seen by admin when entering tabs\n          if (tab === \"users\" && counts.users > 0) {\n            markUsersSeen.mutate();\n          } else if (tab === \"questions\" && counts.questions > 0) {\n            markQuestionsSeen.mutate();\n          } else if (tab === \"content\" && counts.news > 0) {\n            markNewsSeen.mutate();\n          } else if (tab === \"messages\" && counts.contacts > 0) {\n            markContactsSeen.mutate();\n          }\n          \n          // Old notification badge logic for compatibility\n          if (tab === 'questions' && badges.questions > 0) {\n            markAsSeen('questions');\n          } else if (tab === 'content' && badges.news > 0) {\n            markAsSeen('news');\n          } else if ((tab === 'contact' || tab === 'messages') && badges.contacts > 0) {\n            markAsSeen('contacts');\n          }\n        }}\n      >\n        <TabsList className=\"grid w-full grid-cols-2 sm:grid-cols-3 lg:grid-cols-7 gap-1 h-auto p-1\">\n          <TabsTrigger value=\"overview\" className=\"text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            סקירה כללית\n          </TabsTrigger>\n          <TabsTrigger value=\"users\" className=\"relative text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            ניהול משתמשים\n            {counts.users > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-4 w-4 p-0 text-xs flex items-center justify-center animate-pulse\">\n                {counts.users}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"questions\" className=\"relative text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            ניהול שאלות\n            {counts.questions > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-4 w-4 p-0 text-xs flex items-center justify-center animate-pulse\">\n                {counts.questions}\n              </Badge>\n            )}\n          </TabsTrigger>\n          <TabsTrigger value=\"news\" className=\"text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            חדשות\n          </TabsTrigger>\n          <TabsTrigger value=\"synagogues\" className=\"text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            בתי כנסת\n          </TabsTrigger>\n          <TabsTrigger value=\"halacha\" className=\"text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            הלכות יומיות\n          </TabsTrigger>\n          <TabsTrigger value=\"messages\" className=\"relative text-xs sm:text-sm py-2 px-2 sm:px-4 whitespace-nowrap overflow-hidden text-ellipsis\">\n            הודעות\n            {counts.contacts > 0 && (\n              <Badge variant=\"destructive\" className=\"absolute -top-1 -right-1 h-4 w-4 p-0 text-xs flex items-center justify-center animate-pulse\">\n                {counts.contacts}\n              </Badge>\n            )}\n          </TabsTrigger>\n        </TabsList>\n\n        {/* Overview Tab */}\n        <TabsContent value=\"overview\" className=\"space-y-4 sm:space-y-6\">\n          {/* Statistics */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\n            <Card className=\"shadow-card\">\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center gap-2 sm:gap-3 flex-row-reverse\">\n                  <Users className=\"h-6 w-6 sm:h-8 sm:w-8 text-blue-600\" />\n                  <div className=\"text-right flex-1 relative\">\n                    <p className=\"text-xs sm:text-sm text-gray-600 text-right\">משתמשים ממתינים</p>\n                    <p className=\"text-xl sm:text-2xl font-bold text-gray-800 text-right\">{statistics.totalUsers}</p>\n                    <NotificationBadge \n                      count={badges.users} \n                      isVisible={badges.users > 0}\n                      className=\"absolute -top-2 sm:-top-4 -right-2 sm:-right-4\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-card\">\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center gap-2 sm:gap-3 flex-row-reverse\">\n                  <MessageCircleQuestion className=\"h-6 w-6 sm:h-8 sm:w-8 text-orange-600\" />\n                  <div className=\"text-right flex-1 relative\">\n                    <p className=\"text-xs sm:text-sm text-gray-600 text-right\">שאלות ממתינות</p>\n                    <p className=\"text-xl sm:text-2xl font-bold text-gray-800 text-right\">{statistics.pendingQuestions}</p>\n                    <NotificationBadge \n                      count={badges.questions} \n                      isVisible={badges.questions > 0}\n                      className=\"absolute -top-2 sm:-top-4 -right-2 sm:-right-4\"\n                    />\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-card\">\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center gap-2 sm:gap-3 flex-row-reverse\">\n                  <CheckCircle className=\"h-6 w-6 sm:h-8 sm:w-8 text-green-600\" />\n                  <div className=\"text-right flex-1\">\n                    <p className=\"text-xs sm:text-sm text-gray-600 text-right\">שאלות שנענו</p>\n                    <p className=\"text-xl sm:text-2xl font-bold text-gray-800 text-right\">{statistics.answeredQuestions}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n\n            <Card className=\"shadow-card\">\n              <CardContent className=\"p-3 sm:p-4\">\n                <div className=\"flex items-center gap-2 sm:gap-3 flex-row-reverse\">\n                  <MessageSquare className=\"h-6 w-6 sm:h-8 sm:w-8 text-purple-600\" />\n                  <div className=\"text-right flex-1\">\n                    <p className=\"text-xs sm:text-sm text-gray-600 text-right\">הודעות חדשות</p>\n                    <p className=\"text-xl sm:text-2xl font-bold text-gray-800 text-right\">{statistics.unreadMessages}</p>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Recent Activity */}\n          <Card className=\"shadow-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n                <TrendingUp className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                פעילות אחרונה\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"p-3 sm:p-6\">\n              <div className=\"space-y-2 sm:space-y-3\">\n                {pendingUsers?.slice(0, 3).map((user) => (\n                  <div key={user.id} className=\"flex items-center justify-between p-2 sm:p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"text-right flex-1\">\n                      <p className=\"font-medium text-sm sm:text-base text-right\">{user.fullName}</p>\n                      <p className=\"text-xs sm:text-sm text-gray-600 text-right\">בקשת הרשמה חדשה</p>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <Clock className=\"h-3 w-3 mr-1\" />\n                      ממתין\n                    </Badge>\n                  </div>\n                ))}\n                {allQuestions?.filter(q => q.status === \"pending\").slice(0, 2).map((question) => (\n                  <div key={question.id} className=\"flex items-center justify-between p-2 sm:p-3 bg-gray-50 rounded-lg\">\n                    <div className=\"text-right flex-1\">\n                      <p className=\"font-medium text-sm sm:text-base text-right\">{question.title || question.content.substring(0, 50)}...</p>\n                      <p className=\"text-xs sm:text-sm text-gray-600 text-right\">שאלה חדשה ממתינה לתשובה</p>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"text-xs\">\n                      <MessageCircleQuestion className=\"h-3 w-3 mr-1\" />\n                      ממתין\n                    </Badge>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Comprehensive Users Management Tab */}\n        <TabsContent value=\"users\" className=\"space-y-4\">\n          <SimpleUserManagement />\n        </TabsContent>\n\n        {/* Questions Management Tab */}\n        <TabsContent value=\"questions\" className=\"space-y-3 sm:space-y-4\">\n          <Card className=\"shadow-card\">\n            <CardHeader className=\"pb-3 sm:pb-6\">\n              <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n                <MessageCircleQuestion className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                ניהול שאלות - כל השאלות במערכת\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3 sm:space-y-4 p-3 sm:p-6\">\n              {!allQuestions || allQuestions.length === 0 ? (\n                <p className=\"text-center text-gray-600 py-8\">אין שאלות במערכת</p>\n              ) : (\n                <div className=\"space-y-3 sm:space-y-4\">\n                  {allQuestions.map((question) => (\n                    <div key={question.id} className=\"border rounded-lg p-3 sm:p-4 space-y-3\">\n                      <div className=\"flex flex-col sm:flex-row justify-between items-start gap-2 sm:gap-0\">\n                        <div className=\"space-y-2 flex-1 text-right\">\n                          <div className=\"flex items-center gap-1 sm:gap-2 flex-row-reverse flex-wrap\">\n                            <h3 className=\"font-semibold text-sm sm:text-base text-gray-800 text-right\">\n                              {question.title || \"שאלה\"}\n                            </h3>\n                            <Badge variant={question.status === \"pending\" ? \"secondary\" : question.status === \"answered\" ? \"default\" : \"outline\"} className=\"text-xs\">\n                              {question.status === \"pending\" ? \"ממתין\" : question.status === \"answered\" ? \"נענה\" : \"סגור\"}\n                            </Badge>\n                            {question.isUrgent && (\n                              <Badge variant=\"destructive\" className=\"text-xs\">דחוף</Badge>\n                            )}\n                            {question.isPrivate && (\n                              <Badge variant=\"outline\" className=\"text-xs\">פרטי</Badge>\n                            )}\n                          </div>\n                          <p className=\"text-gray-600 text-sm sm:text-base text-right\">{question.content}</p>\n                          <div className=\"text-xs sm:text-sm text-gray-500 text-right\">\n                            <p className=\"text-right\">קטגוריה: {question.category}</p>\n                            <p className=\"text-right\">תאריך: {new Date(question.createdAt).toLocaleDateString('he-IL')}</p>\n                          </div>\n                        </div>\n                      </div>\n                      \n                      <div className=\"flex gap-1 sm:gap-2 pt-2 flex-wrap\">\n                        {/* כפתור 1: ענה על השאלה / ערוך תשובה */}\n                        {question.status === \"pending\" ? (\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button\n                                size=\"sm\"\n                                className=\"bg-green-600 hover:bg-green-700 text-white text-xs sm:text-sm py-2 px-3 sm:py-2 sm:px-4\"\n                                onClick={() => setSelectedQuestionId(question.id)}\n                              >\n                                <MessageCircle className=\"h-3 w-3 sm:h-4 sm:w-4 ml-1\" />\n                                ענה על השאלה\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>מענה לשאלה</DialogTitle>\n                              </DialogHeader>\n                              <div className=\"space-y-4\">\n                                <div className=\"p-3 bg-gray-50 rounded-lg\">\n                                  <p className=\"font-medium mb-2\">השאלה:</p>\n                                  <p className=\"text-gray-700\">{question.content}</p>\n                                </div>\n                                <div>\n                                  <Label htmlFor=\"answer\">התשובה:</Label>\n                                  <Textarea\n                                    id=\"answer\"\n                                    value={answerText}\n                                    onChange={(e) => setAnswerText(e.target.value)}\n                                    placeholder=\"הכנס את התשובה כאן...\"\n                                    rows={5}\n                                    className=\"mt-1\"\n                                  />\n                                </div>\n                                <Button\n                                  onClick={() => answerQuestionMutation.mutate({ \n                                    questionId: selectedQuestionId, \n                                    answer: answerText \n                                  })}\n                                  disabled={answerQuestionMutation.isPending || !answerText.trim()}\n                                  className=\"w-full\"\n                                >\n                                  שלח תשובה\n                                </Button>\n                              </div>\n                            </DialogContent>\n                          </Dialog>\n                        ) : question.status === \"answered\" ? (\n                          <Dialog>\n                            <DialogTrigger asChild>\n                              <Button size=\"sm\" className=\"bg-orange-600 hover:bg-orange-700 text-white\">\n                                <Edit className=\"h-4 w-4 ml-1\" />\n                                ערוך תשובה\n                              </Button>\n                            </DialogTrigger>\n                            <DialogContent className=\"max-w-2xl\">\n                              <DialogHeader>\n                                <DialogTitle>עריכת תשובה לשאלה</DialogTitle>\n                              </DialogHeader>\n                              <EditAnswerContent \n                                questionId={question.id}\n                                editingAnswerId={editingAnswerId}\n                                setEditingAnswerId={setEditingAnswerId}\n                                editAnswerText={editAnswerText}\n                                setEditAnswerText={setEditAnswerText}\n                                editAnswerMutation={editAnswerMutation}\n                              />\n                            </DialogContent>\n                          </Dialog>\n                        ) : null}\n\n                        {/* כפתור 2: אשר שאלה / הסר מהמאגר (מתחלף) */}\n                        {!(question as any).isVisible ? (\n                          <Button\n                            size=\"sm\"\n                            className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n                            onClick={async () => {\n                              try {\n                                await apiRequest(`/api/questions/${question.id}/set-visible`, { \n                                  method: \"POST\",\n                                  body: { isVisible: true }\n                                });\n                                queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n                                queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n                                toast({ title: \"השאלה אושרה לפרסום ציבורי\" });\n                              } catch (error) {\n                                toast({\n                                  title: \"שגיאה באישור השאלה\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                          >\n                            <CheckCircle className=\"h-4 w-4 ml-1\" />\n                            אשר שאלה\n                          </Button>\n                        ) : (\n                          <Button\n                            size=\"sm\"\n                            variant=\"destructive\"\n                            className=\"bg-red-600 hover:bg-red-700 text-white\"\n                            onClick={async () => {\n                              try {\n                                await apiRequest(`/api/questions/${question.id}/set-visible`, { \n                                  method: \"POST\",\n                                  body: { isVisible: false }\n                                });\n                                queryClient.invalidateQueries({ queryKey: [\"/api/admin/questions\"] });\n                                queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n                                toast({ title: \"השאלה הוסרה מהמאגר הציבורי\" });\n                              } catch (error) {\n                                toast({\n                                  title: \"שגיאה בהסרת השאלה\",\n                                  variant: \"destructive\",\n                                });\n                              }\n                            }}\n                          >\n                            <Trash2 className=\"h-4 w-4 ml-1\" />\n                            הסר מהמאגר\n                          </Button>\n                        )}\n\n                        {/* כפתור 3: מחק שאלה (אדום בוהק) */}\n                        <Button\n                          size=\"sm\"\n                          variant=\"destructive\"\n                          className=\"bg-red-700 hover:bg-red-800 text-white border-2 border-red-500\"\n                          onClick={() => {\n                            if (confirm(\"האם אתה בטוח שברצונך למחוק שאלה זו לצמיתות? פעולה זו לא ניתנת לביטול!\")) {\n                              deleteQuestionMutation.mutate(question.id);\n                            }\n                          }}\n                          disabled={deleteQuestionMutation.isPending}\n                        >\n                          <X className=\"h-4 w-4 ml-1\" />\n                          מחק שאלה\n                        </Button>\n\n                        {/* כפתור 4: ערוך שאלה (תמיד מופיע) */}\n                        <Dialog>\n                          <DialogTrigger asChild>\n                            <Button size=\"sm\" variant=\"outline\">\n                              <Edit className=\"h-4 w-4 ml-1\" />\n                              ערוך שאלה\n                            </Button>\n                          </DialogTrigger>\n                          <DialogContent className=\"max-w-2xl\">\n                            <DialogHeader>\n                              <DialogTitle>עריכת שאלה</DialogTitle>\n                            </DialogHeader>\n                            <div className=\"space-y-4\">\n                              <div>\n                                <Label>כותרת השאלה:</Label>\n                                <Input \n                                  value={editingQuestionId === question.id ? editQuestionTitle : question.title || \"\"}\n                                  onChange={(e) => {\n                                    if (editingQuestionId !== question.id) {\n                                      setEditingQuestionId(question.id);\n                                      setEditQuestionTitle(question.title || \"\");\n                                      setEditQuestionContent(question.content);\n                                    }\n                                    setEditQuestionTitle(e.target.value);\n                                  }}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <div>\n                                <Label>תוכן השאלה:</Label>\n                                <Textarea \n                                  value={editingQuestionId === question.id ? editQuestionContent : question.content}\n                                  onChange={(e) => {\n                                    if (editingQuestionId !== question.id) {\n                                      setEditingQuestionId(question.id);\n                                      setEditQuestionTitle(question.title || \"\");\n                                      setEditQuestionContent(question.content);\n                                    }\n                                    setEditQuestionContent(e.target.value);\n                                  }}\n                                  rows={3}\n                                  className=\"mt-1\"\n                                />\n                              </div>\n                              <Button \n                                className=\"w-full\"\n                                onClick={() => {\n                                  updateQuestionMutation.mutate({\n                                    questionId: question.id,\n                                    title: editQuestionTitle,\n                                    content: editQuestionContent\n                                  });\n                                }}\n                                disabled={updateQuestionMutation.isPending}\n                              >\n                                שמור שינויים\n                              </Button>\n                            </div>\n                          </DialogContent>\n                        </Dialog>\n\n                        {/* תגיות סטטוס */}\n                        {question.status === \"answered\" && (\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            <CheckCircle className=\"h-3 w-3 ml-1\" />\n                            נענה\n                          </Badge>\n                        )}\n                        {(question as any).hasNewAnswer && (\n                          <Badge variant=\"secondary\" className=\"bg-blue-100 text-blue-800\">\n                            התראה נשלחה למשתמש\n                          </Badge>\n                        )}\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* News Management Tab */}\n        <TabsContent value=\"news\" className=\"space-y-4\">\n          <Card className=\"shadow-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Newspaper className=\"h-5 w-5\" />\n                ניהול חדשות\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-police-blue hover:bg-police-blue-dark text-white\">\n                    <Plus className=\"h-4 w-4 ml-2\" />\n                    הוסף חדשה\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>הוספת חדשה חדשה</DialogTitle>\n                  </DialogHeader>\n                  <Form {...newsForm}>\n                    <form onSubmit={newsForm.handleSubmit((data) => createNewsMutation.mutate(data))} className=\"space-y-4\">\n                      <FormField\n                        control={newsForm.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>כותרת</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"הכנס כותרת החדשה\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"excerpt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>תקציר (אופציונלי)</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"תקציר קצר של החדשה\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"content\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>תוכן</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"תוכן מלא של החדשה\" rows={5} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"isUrgent\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center gap-2\">\n                            <FormControl>\n                              <input\n                                type=\"checkbox\"\n                                checked={field.value}\n                                onChange={field.onChange}\n                              />\n                            </FormControl>\n                            <FormLabel>חדשה דחופה</FormLabel>\n                          </FormItem>\n                        )}\n                      />\n                      <Button \n                        type=\"submit\" \n                        disabled={createNewsMutation.isPending}\n                        className=\"w-full\"\n                      >\n                        צור חדשה\n                      </Button>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n\n              {/* Edit News Dialog */}\n              <Dialog open={!!editingNewsId} onOpenChange={() => setEditingNewsId(\"\")}>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>ערוך חדשה</DialogTitle>\n                  </DialogHeader>\n                  <Form {...newsForm}>\n                    <form onSubmit={newsForm.handleSubmit((data) => {\n                      updateNewsMutation.mutate({ id: editingNewsId, data });\n                    })} className=\"space-y-4\">\n                      <FormField\n                        control={newsForm.control}\n                        name=\"title\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>כותרת</FormLabel>\n                            <FormControl>\n                              <Input {...field} placeholder=\"כותרת החדשה\" />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"excerpt\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>תקציר (אופציונלי)</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"תקציר קצר של החדשה\" rows={2} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"content\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>תוכן</FormLabel>\n                            <FormControl>\n                              <Textarea {...field} placeholder=\"תוכן מלא של החדשה\" rows={5} />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      <FormField\n                        control={newsForm.control}\n                        name=\"isUrgent\"\n                        render={({ field }) => (\n                          <FormItem className=\"flex items-center gap-2\">\n                            <FormControl>\n                              <input\n                                type=\"checkbox\"\n                                checked={field.value}\n                                onChange={field.onChange}\n                              />\n                            </FormControl>\n                            <FormLabel>חדשה דחופה</FormLabel>\n                          </FormItem>\n                        )}\n                      />\n                      <div className=\"flex gap-2\">\n                        <Button \n                          type=\"submit\" \n                          disabled={updateNewsMutation.isPending}\n                          className=\"flex-1\"\n                        >\n                          עדכן חדשה\n                        </Button>\n                        <Button \n                          type=\"button\"\n                          variant=\"outline\"\n                          onClick={() => setEditingNewsId(\"\")}\n                          className=\"flex-1\"\n                        >\n                          ביטול\n                        </Button>\n                      </div>\n                    </form>\n                  </Form>\n                </DialogContent>\n              </Dialog>\n\n              {/* News List */}\n              <div className=\"space-y-3\">\n                {!newsList || newsList.length === 0 ? (\n                  <p className=\"text-center text-gray-600 py-8\">אין חדשות במערכת</p>\n                ) : (\n                  newsList.map((newsItem) => (\n                    <div key={newsItem.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1 text-right\">\n                          <div className=\"flex items-center gap-2 mb-2 flex-row-reverse\">\n                            <h3 className=\"font-semibold text-gray-800 text-right\">{newsItem.title}</h3>\n                            {newsItem.isUrgent && (\n                              <Badge variant=\"destructive\">דחוף</Badge>\n                            )}\n                          </div>\n                          {newsItem.excerpt && (\n                            <p className=\"text-gray-600 text-sm mb-2 text-right\">{newsItem.excerpt}</p>\n                          )}\n                          <p className=\"text-xs text-gray-500 text-right\">\n                            {new Date(newsItem.publishedAt).toLocaleDateString('he-IL')}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingNewsId(newsItem.id);\n                              // Pre-populate the form with existing data\n                              newsForm.setValue(\"title\", newsItem.title);\n                              newsForm.setValue(\"content\", newsItem.content);\n                              newsForm.setValue(\"excerpt\", newsItem.excerpt || \"\");\n                              newsForm.setValue(\"isUrgent\", newsItem.isUrgent);\n                            }}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteNewsMutation.mutate(newsItem.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))\n                )}\n              </div>\n            </CardContent>\n          </Card>\n        </TabsContent>\n\n        {/* Synagogues Management Tab */}\n        <TabsContent value=\"synagogues\" className=\"space-y-4\">\n          <Card className=\"shadow-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MapPin className=\"h-5 w-5\" />\n                ניהול בתי כנסת\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              <Dialog>\n                <DialogTrigger asChild>\n                  <Button className=\"bg-police-blue hover:bg-police-blue-dark text-white\">\n                    <Plus className=\"h-4 w-4 ml-2\" />\n                    הוסף בית כנסת\n                  </Button>\n                </DialogTrigger>\n                <DialogContent className=\"max-w-2xl\">\n                  <DialogHeader>\n                    <DialogTitle>הוספת בית כנסת חדש</DialogTitle>\n                  </DialogHeader>\n                  <Form {...synagogueForm}>\n                    <form onSubmit={synagogueForm.handleSubmit((data) => createSynagogueMutation.mutate(data))} className=\"space-y-4\">\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>שם בית הכנסת</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"הכנס שם בית הכנסת\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>כתובת</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"כתובת בית הכנסת\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"latitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>קו רוחב (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"32.0853\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"longitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>קו אורך (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"34.7818\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"shacharit\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>שחרית (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"07:00\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"mincha\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>מנחה (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"18:30\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"maariv\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>מעריב (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"19:30\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"contact\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>איש קשר (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"שם איש הקשר\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"contactPhone\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>טלפון איש קשר (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"050-1234567\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>הערות (אופציונלי)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"הערות נוספות\" rows={3} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <Button \n                          type=\"submit\" \n                          disabled={createSynagogueMutation.isPending}\n                          className=\"w-full\"\n                        >\n                          צור בית כנסת\n                        </Button>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Edit Synagogue Dialog */}\n                <Dialog open={!!editingSynagogueId} onOpenChange={() => setEditingSynagogueId(\"\")}>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>ערוך בית כנסת</DialogTitle>\n                    </DialogHeader>\n                    <Form {...synagogueForm}>\n                      <form onSubmit={synagogueForm.handleSubmit((data) => {\n                        updateSynagogueMutation.mutate({ id: editingSynagogueId, data });\n                      })} className=\"space-y-4\">\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"name\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>שם בית הכנסת</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"שם בית הכנסת\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"address\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>כתובת</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"כתובת מלאה\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"latitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>קו רוחב (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"32.0853\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"longitude\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>קו אורך (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"34.7818\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-3 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"shacharit\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>שחרית (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"07:00\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"mincha\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>מנחה (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"18:30\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"maariv\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>מעריב (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"19:30\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <div className=\"grid grid-cols-2 gap-4\">\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"contact\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>איש קשר (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"שם איש הקשר\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                          <FormField\n                            control={synagogueForm.control}\n                            name=\"contactPhone\"\n                            render={({ field }) => (\n                              <FormItem>\n                                <FormLabel>טלפון איש קשר (אופציונלי)</FormLabel>\n                                <FormControl>\n                                  <Input {...field} placeholder=\"050-1234567\" />\n                                </FormControl>\n                                <FormMessage />\n                              </FormItem>\n                            )}\n                          />\n                        </div>\n                        <FormField\n                          control={synagogueForm.control}\n                          name=\"notes\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>הערות (אופציונלי)</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"הערות נוספות\" rows={3} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button \n                            type=\"submit\" \n                            disabled={updateSynagogueMutation.isPending}\n                            className=\"flex-1\"\n                          >\n                            עדכן בית כנסת\n                          </Button>\n                          <Button \n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setEditingSynagogueId(\"\")}\n                            className=\"flex-1\"\n                          >\n                            ביטול\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Synagogue List */}\n                <div className=\"space-y-3\">\n                  {synagogues?.map((synagogue) => (\n                    <div key={synagogue.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1 text-right\">\n                          <h3 className=\"font-semibold text-gray-800 text-right mb-1\">{synagogue.name}</h3>\n                          <p className=\"text-gray-600 text-sm mb-2 text-right\">{synagogue.address}</p>\n                          {(synagogue.shacharit || synagogue.mincha || synagogue.maariv) && (\n                            <div className=\"flex gap-4 text-xs text-gray-500 mb-2 flex-row-reverse\">\n                              {synagogue.shacharit && <span>שחרית: {synagogue.shacharit}</span>}\n                              {synagogue.mincha && <span>מנחה: {synagogue.mincha}</span>}\n                              {synagogue.maariv && <span>מעריב: {synagogue.maariv}</span>}\n                            </div>\n                          )}\n                          {(synagogue.contact || synagogue.contactPhone) && (\n                            <div className=\"text-xs text-gray-500 text-right\">\n                              {synagogue.contact && <span>איש קשר: {synagogue.contact}</span>}\n                              {synagogue.contact && synagogue.contactPhone && <span> | </span>}\n                              {synagogue.contactPhone && <span>טלפון: {synagogue.contactPhone}</span>}\n                            </div>\n                          )}\n                          {synagogue.notes && (\n                            <p className=\"text-xs text-gray-500 text-right mt-1\">{synagogue.notes}</p>\n                          )}\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingSynagogueId(synagogue.id);\n                              // Pre-populate the form with existing data\n                              synagogueForm.setValue(\"name\", synagogue.name);\n                              synagogueForm.setValue(\"address\", synagogue.address);\n                              synagogueForm.setValue(\"latitude\", synagogue.latitude || \"\");\n                              synagogueForm.setValue(\"longitude\", synagogue.longitude || \"\");\n                              synagogueForm.setValue(\"shacharit\", synagogue.shacharit || \"\");\n                              synagogueForm.setValue(\"mincha\", synagogue.mincha || \"\");\n                              synagogueForm.setValue(\"maariv\", synagogue.maariv || \"\");\n                              synagogueForm.setValue(\"contact\", synagogue.contact || \"\");\n                              synagogueForm.setValue(\"contactPhone\", synagogue.contactPhone || \"\");\n                              synagogueForm.setValue(\"notes\", synagogue.notes || \"\");\n                            }}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteSynagogueMutation.mutate(synagogue.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n        </TabsContent>\n\n        {/* Halacha Management Tab */}\n        <TabsContent value=\"halacha\" className=\"space-y-4\">\n          <Card className=\"shadow-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2 text-base sm:text-lg\">\n                <BookOpen className=\"h-4 w-4 sm:h-5 sm:w-5\" />\n                  ניהול הלכה יומית\n                </CardTitle>\n              </CardHeader>\n              <CardContent className=\"space-y-4\">\n                <Dialog>\n                  <DialogTrigger asChild>\n                    <Button className=\"bg-police-blue hover:bg-police-blue-dark text-white\">\n                      <Plus className=\"h-4 w-4 ml-2\" />\n                      הוסף הלכה יומית\n                    </Button>\n                  </DialogTrigger>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>הוספת הלכה יומית חדשה</DialogTitle>\n                    </DialogHeader>\n                    <Form {...halachaForm}>\n                      <form onSubmit={halachaForm.handleSubmit((data) => createHalachaMutation.mutate(data))} className=\"space-y-4\">\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"date\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>תאריך</FormLabel>\n                              <FormControl>\n                                <Input \n                                  {...field} \n                                  type=\"date\"\n                                />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>כותרת (אופציונלי)</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"כותרת ההלכה\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"content\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>תוכן ההלכה</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"תוכן ההלכה היומית\" rows={6} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <Button \n                          type=\"submit\" \n                          disabled={createHalachaMutation.isPending}\n                          className=\"w-full\"\n                        >\n                          צור הלכה יומית\n                        </Button>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Edit Halacha Dialog */}\n                <Dialog open={!!editingHalachaId} onOpenChange={() => setEditingHalachaId(\"\")}>\n                  <DialogContent className=\"max-w-2xl\">\n                    <DialogHeader>\n                      <DialogTitle>ערוך הלכה יומית</DialogTitle>\n                    </DialogHeader>\n                    <Form {...halachaForm}>\n                      <form onSubmit={halachaForm.handleSubmit((data) => {\n                        updateHalachaMutation.mutate({ id: editingHalachaId, data });\n                      })} className=\"space-y-4\">\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"date\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>תאריך</FormLabel>\n                              <FormControl>\n                                <Input {...field} type=\"date\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"title\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>כותרת (אופציונלי)</FormLabel>\n                              <FormControl>\n                                <Input {...field} placeholder=\"כותרת ההלכה\" />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <FormField\n                          control={halachaForm.control}\n                          name=\"content\"\n                          render={({ field }) => (\n                            <FormItem>\n                              <FormLabel>תוכן ההלכה</FormLabel>\n                              <FormControl>\n                                <Textarea {...field} placeholder=\"תוכן ההלכה היומית\" rows={6} />\n                              </FormControl>\n                              <FormMessage />\n                            </FormItem>\n                          )}\n                        />\n                        <div className=\"flex gap-2\">\n                          <Button \n                            type=\"submit\" \n                            disabled={updateHalachaMutation.isPending}\n                            className=\"flex-1\"\n                          >\n                            עדכן הלכה\n                          </Button>\n                          <Button \n                            type=\"button\"\n                            variant=\"outline\"\n                            onClick={() => setEditingHalachaId(\"\")}\n                            className=\"flex-1\"\n                          >\n                            ביטול\n                          </Button>\n                        </div>\n                      </form>\n                    </Form>\n                  </DialogContent>\n                </Dialog>\n\n                {/* Halacha List */}\n                <div className=\"space-y-3\">\n                  {halachot?.map((halacha) => (\n                    <div key={halacha.id} className=\"border rounded-lg p-4\">\n                      <div className=\"flex justify-between items-start\">\n                        <div className=\"flex-1 text-right\">\n                          <div className=\"flex items-center gap-2 mb-2 flex-row-reverse\">\n                            <span className=\"text-sm font-medium text-gray-600\">\n                              {new Date(halacha.date).toLocaleDateString('he-IL')}\n                            </span>\n                            {new Date(halacha.date).toDateString() === new Date().toDateString() && (\n                              <Badge className=\"bg-purple-100 text-purple-800\">היום</Badge>\n                            )}\n                          </div>\n                          {halacha.title && (\n                            <h3 className=\"font-semibold text-gray-800 text-right mb-2\">{halacha.title}</h3>\n                          )}\n                          <p className=\"text-gray-700 text-sm text-right line-clamp-2\">\n                            {halacha.content.length > 150 \n                              ? halacha.content.substring(0, 150) + \"...\" \n                              : halacha.content}\n                          </p>\n                          <p className=\"text-xs text-gray-500 text-right mt-2\">\n                            נוצר: {new Date(halacha.createdAt).toLocaleDateString('he-IL')}\n                          </p>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            variant=\"outline\"\n                            size=\"sm\"\n                            onClick={() => {\n                              setEditingHalachaId(halacha.id);\n                              // Pre-populate the form with existing data\n                              halachaForm.setValue(\"title\", halacha.title || \"\");\n                              halachaForm.setValue(\"content\", halacha.content);\n                              halachaForm.setValue(\"date\", new Date(halacha.date).toISOString().split('T')[0]);\n                            }}\n                          >\n                            <Edit className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            variant=\"destructive\"\n                            size=\"sm\"\n                            onClick={() => deleteHalachaMutation.mutate(halacha.id)}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n        </TabsContent>\n\n\n        {/* Messages Tab */}\n        <TabsContent value=\"messages\" className=\"space-y-4\">\n          <Card className=\"shadow-card\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <MessageSquare className=\"h-5 w-5\" />\n                הודעות יצירת קשר\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-4\">\n              {!contactMessages || contactMessages.length === 0 ? (\n                <p className=\"text-center text-gray-600 py-8\">אין הודעות</p>\n              ) : (\n                contactMessages.map((message) => (\n                  <div key={message.id} className=\"border rounded-lg p-4 space-y-2\">\n                    <div className=\"flex justify-between items-start\">\n                      <div className=\"flex-1 text-right\">\n                        <h3 className=\"font-semibold text-gray-800 text-right\">{message.fullName}</h3>\n                        <p className=\"text-sm text-gray-600 text-right\">{message.phone}</p>\n                        <p className=\"text-gray-700 mt-2 text-right\">{message.message}</p>\n                        <p className=\"text-xs text-gray-500 mt-2 text-right\">\n                          {new Date(message.createdAt).toLocaleDateString('he-IL')}\n                        </p>\n                      </div>\n                      {!message.isRead && (() => {\n                        // Check if message is from last 24 hours\n                        const twentyFourHoursAgo = new Date(Date.now() - 24 * 60 * 60 * 1000);\n                        const messageDate = new Date(message.createdAt);\n                        return messageDate > twentyFourHoursAgo;\n                      })() && (\n                        <Badge variant=\"destructive\" className=\"bg-red-600 text-white\">חדש</Badge>\n                      )}\n                    </div>\n                  </div>\n                ))\n              )}\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}","size_bytes":93749},"client/src/pages/Contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { MessageSquare, Send, ExternalLink } from \"lucide-react\";\nimport { SiWhatsapp } from \"react-icons/si\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const { user } = useAuth();\n  const [message, setMessage] = useState(\"\");\n\n  const submitMessage = useMutation({\n    mutationFn: async (messageText: string) => {\n      const response = await fetch(\"/api/contact\", {\n        method: \"POST\",\n        headers: {\n          \"Content-Type\": \"application/json\",\n        },\n        body: JSON.stringify({\n          userId: user?.id,\n          fullName: user?.fullName,\n          phone: user?.phone,\n          message: messageText\n        }),\n      });\n      \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || \"שגיאה בשליחת ההודעה\");  \n      }\n      \n      return response.json();\n    },\n    onSuccess: () => {\n      toast({\n        title: \"ההודעה נשלחה בהצלחה\",\n        description: \"נחזור אליך בהקדם האפשרי\",\n      });\n      setMessage(\"\");\n    },\n    onError: () => {\n      toast({\n        variant: \"destructive\",\n        title: \"שגיאה\",\n        description: \"אירעה שגיאה בשליחת ההודעה. אנא נסה שוב.\",\n      });\n    }\n  });\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    if (message.trim()) {\n      submitMessage.mutate(message);\n    }\n  };\n\n  const openWhatsApp = () => {\n    // Replace with the actual WhatsApp number for the organization\n    const whatsappNumber = \"972501234567\"; // Example number\n    const message = \"שלום, אני פונה מאפליקציה רבנות המשטרה\";\n    const whatsappUrl = `https://wa.me/${whatsappNumber}?text=${encodeURIComponent(message)}`;\n    window.open(whatsappUrl, '_blank');\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center mb-6\">\n        <MessageSquare className=\"h-6 w-6 text-police-blue ml-2\" />\n        <h1 className=\"text-xl font-bold text-gray-800\">צור קשר עם מנהלי האפליקציה</h1>\n      </div>\n\n      {/* WhatsApp Contact */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center mb-3\">\n            <SiWhatsapp className=\"h-5 w-5 text-green-600 ml-2\" />\n            <h3 className=\"font-bold text-gray-800\">וואטסאפ רבנות המשטרה</h3>\n          </div>\n          \n          <p className=\"text-gray-600 mb-4 text-sm\">\n            ליצירת קשר מהיר ומיידי עם צוות רבנות המשטרה\n          </p>\n          \n          <Button\n            onClick={openWhatsApp}\n            className=\"w-full bg-green-600 hover:bg-green-700 text-white flex items-center justify-center space-x-reverse space-x-2\"\n          >\n            <SiWhatsapp className=\"h-5 w-5\" />\n            <span>שלח הודעה בוואטסאפ</span>\n            <ExternalLink className=\"h-4 w-4\" />\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Contact Form */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center mb-4\">\n            <Send className=\"h-5 w-5 text-police-blue ml-2\" />\n            <h3 className=\"font-bold text-gray-800\">שלח הודעה למנהלי האתר</h3>\n          </div>\n          \n          {user && (\n            <div className=\"mb-4 p-3 bg-gray-50 rounded-lg\">\n              <p className=\"text-sm text-gray-600\">שולח: {user.fullName}</p>\n              <p className=\"text-sm text-gray-600\">טלפון: {user.phone}</p>\n            </div>\n          )}\n          \n          <form onSubmit={handleSubmit} className=\"space-y-4\">\n            <div>\n              <label className=\"block text-sm font-medium text-gray-700 mb-1\">הודעה</label>\n              <Textarea\n                value={message}\n                onChange={(e) => setMessage(e.target.value)}\n                placeholder=\"כתב את הודעתך כאן...\"\n                className=\"h-32 resize-none text-right\"\n                required\n              />\n            </div>\n            \n            <Button \n              type=\"submit\" \n              className=\"w-full bg-police-blue hover:bg-police-blue-dark text-white\"\n              disabled={submitMessage.isPending}\n            >\n              {submitMessage.isPending ? \"שולח...\" : \"שלח הודעה\"}\n            </Button>\n          </form>\n        </CardContent>\n      </Card>\n\n      {/* Additional Contact Information */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center mb-3\">\n            <MessageSquare className=\"h-5 w-5 text-police-blue ml-2\" />\n            <h3 className=\"font-bold text-gray-800\">פרטי יצירת קשר נוספים</h3>\n          </div>\n          \n          <div className=\"space-y-3 text-sm text-gray-600\">\n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <span>מוקד רבנות המשטרה</span>\n              <span className=\"font-medium text-police-blue\">*6911</span>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <span>שעות פעילות</span>\n              <span className=\"font-medium\">א'-ה' 08:00-16:00</span>\n            </div>\n            \n            <div className=\"flex items-center justify-between p-3 bg-gray-50 rounded-lg\">\n              <span>מקרי חירום</span>\n              <span className=\"font-medium text-red-600\">24/7</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Important Notice */}\n      <Card className=\"shadow-card border-orange-200 bg-orange-50\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold text-orange-800 mb-2\">הודעה חשובה</h3>\n          <div className=\"text-sm text-orange-700 space-y-1\">\n            <p>• למקרי חירום הלכתיים פנה למוקד הטלפוני</p>\n            <p>• התשובה להודעות דרך האפליקציה תתקבל תוך 24-48 שעות</p>\n            <p>• לשאלות דחופות השתמש בוואטסאפ או במוקד הטלפוני</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6794},"client/src/pages/Home.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { AskRabbiModal } from \"@/components/AskRabbiModal\";\nimport { MessageCircleQuestion, Clock, BookOpen, Newspaper, Sun, Calendar, CheckCircle, TriangleAlert, Bell, BellRing } from \"lucide-react\";\nimport type { News, DailyHalacha, Question, Notification } from \"@shared/schema\";\nimport { getHebrewDate } from \"@/utils/hebrewDate\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport logo from \"@assets/bf4d69d1-82e0-4b41-bc8c-ecca5ca6a895_1753886576969.jpeg\";\n\nexport default function Home(): JSX.Element {\n  const { user, isAuthenticated, isLoading, error, deviceId } = useAuth();\n  const queryClient = useQueryClient();\n  const [showAskRabbi, setShowAskRabbi] = useState(false);\n\n  const { data: dailyHalacha } = useQuery({\n    queryKey: [\"/api/daily-halacha\"],\n    retry: false,\n  }) as { data: DailyHalacha | undefined };\n\n  const { data: recentNews } = useQuery({\n    queryKey: [\"/api/news\", { limit: 3 }],\n    queryFn: () => apiRequest(\"/api/news?limit=3\")\n  }) as { data: News[] | undefined };\n\n  const { data: recentQuestions } = useQuery({\n    queryKey: [\"/api/questions\"],\n    retry: false,\n  }) as { data: Question[] | undefined };\n\n  // Get user's notifications\n  const { data: notifications } = useQuery({\n    queryKey: [\"/api/notifications\", user?.id],\n    enabled: !!user,\n  }) as { data: Notification[] | undefined };\n\n  // Get user's questions to check for new answers\n  const { data: userQuestions } = useQuery({\n    queryKey: [\"/api/questions/user\", user?.id],\n    enabled: !!user,\n  }) as { data: Question[] | undefined };\n\n  // Count unread notifications\n  const unreadNotifications = notifications?.filter(n => !n.isRead).length || 0;\n  \n  // Count questions with new answers\n  const questionsWithNewAnswers = userQuestions?.filter(q => \n    q.status === \"answered\" && (q as any).hasNewAnswer\n  ).length || 0;\n  \n  // Debug logging (can be removed in production)\n  console.log('useAuth for regular user:', { user, isAuthenticated, isLoading, error, deviceId });\n  console.log('Questions with new answers:', questionsWithNewAnswers);\n\n  const { data: jewishTimes } = useQuery({\n    queryKey: [\"/api/jewish-times\"],\n    retry: false,\n  }) as { data: { \n    location: string; \n    hebrewDate?: { formatted?: string }; \n    gregorianDate?: { dayOfWeek?: string }; \n    sunrise?: string; \n    sunset?: string; \n  } | undefined };\n\n  // Mark notifications as read\n  const markNotificationsAsRead = useMutation({\n    mutationFn: async (notificationIds: string[]) => {\n      return apiRequest(\"/api/notifications/mark-read\", { method: \"POST\", body: { notificationIds } });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/notifications\"] });\n    }\n  });\n\n  // Mark question answer as viewed\n  const markQuestionAnswerViewed = useMutation({\n    mutationFn: async (questionId: string) => {\n      return apiRequest(`/api/questions/${questionId}/mark-answer-viewed`, { method: \"POST\", body: {} });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions/user\"] });\n    }\n  });\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Notifications Banner */}\n      {(unreadNotifications > 0 || questionsWithNewAnswers > 0) && (\n        <Card className=\"shadow-card bg-blue-50 border-blue-200\">\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-3\">\n                <BellRing className=\"h-6 w-6 text-blue-600\" />\n                <div>\n                  <h3 className=\"font-bold text-blue-800 text-right\">יש לך התראות חדשות!</h3>\n                  <p className=\"text-sm text-blue-600 text-right\">\n                    {questionsWithNewAnswers > 0 && `${questionsWithNewAnswers} שאלות נענו`}\n                    {questionsWithNewAnswers > 0 && unreadNotifications > 0 && \" • \"}\n                    {unreadNotifications > 0 && `${unreadNotifications} התראות חדשות`}\n                  </p>\n                </div>\n              </div>\n              <Button\n                onClick={() => {\n                  window.location.pathname = \"/questions\";\n                  // Mark notifications as read when user clicks\n                  if (notifications && notifications.length > 0) {\n                    const unreadIds = notifications.filter(n => !n.isRead).map(n => n.id);\n                    if (unreadIds.length > 0) {\n                      markNotificationsAsRead.mutate(unreadIds);\n                    }\n                  }\n                }}\n                size=\"sm\"\n                className=\"bg-blue-600 hover:bg-blue-700 text-white\"\n              >\n                צפה בהתראות\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Quick Actions */}\n      <div className=\"grid grid-cols-2 gap-3\">\n        <Button\n          onClick={() => setShowAskRabbi(true)}\n          className=\"bg-police-blue-light hover:bg-blue-100 text-gray-800 p-4 rounded-lg h-auto flex-col space-y-2 relative\"\n          variant=\"ghost\"\n        >\n          <MessageCircleQuestion className=\"h-8 w-8 text-police-blue\" />\n          <span className=\"text-sm font-medium\">שאל את הרב</span>\n          {questionsWithNewAnswers > 0 && (\n            <Badge variant=\"destructive\" className=\"absolute -top-2 -right-2 h-5 w-5 p-0 text-xs flex items-center justify-center\">\n              {questionsWithNewAnswers}\n            </Badge>\n          )}\n        </Button>\n        \n        <Button\n          onClick={() => window.location.href = \"/jewish-times\"}\n          className=\"bg-green-50 hover:bg-green-100 text-gray-800 p-4 rounded-lg h-auto flex-col space-y-2\"\n          variant=\"ghost\"\n        >\n          <Clock className=\"h-8 w-8 text-green-600\" />\n          <span className=\"text-sm font-medium\">זמני היום</span>\n        </Button>\n      </div>\n      {/* Jewish Times Quick View */}\n      {jewishTimes && (\n        <Card \n          className=\"shadow-card cursor-pointer hover:shadow-lg transition-shadow\" \n          onClick={() => window.location.href = \"/jewish-times\"}\n        >\n          <CardContent className=\"p-4\">\n            <div className=\"flex items-center justify-between mb-3\">\n              <div className=\"flex items-center\">\n                <Sun className=\"h-5 w-5 text-yellow-600 ml-2\" />\n                <h3 className=\"font-bold text-gray-800\">זמני היום</h3>\n              </div>\n              <div className=\"text-xs text-gray-500\">לכל זמני היום</div>\n            </div>\n            \n            <div className=\"mb-3 text-center\">\n              <div className=\"text-sm font-medium text-gray-700\">\n                {jewishTimes?.hebrewDate?.formatted || getHebrewDate()}\n              </div>\n              {jewishTimes?.gregorianDate?.dayOfWeek && (\n                <div className=\"text-xs text-gray-500\">\n                  {jewishTimes.gregorianDate.dayOfWeek}\n                </div>\n              )}\n            </div>\n            \n            <div className=\"grid grid-cols-2 gap-3 text-sm\">\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">זריחה:</span>\n                <span className=\"font-medium\">{(jewishTimes as any).sunrise}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">שקיעה:</span>\n                <span className=\"font-medium\">{(jewishTimes as any).sunset}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">סוף זמן ק\"ש:</span>\n                <span className=\"font-medium\">{(jewishTimes as any).shemaLatest}</span>\n              </div>\n              <div className=\"flex justify-between\">\n                <span className=\"text-gray-600\">סוף זמן תפילה:</span>\n                <span className=\"font-medium\">{(jewishTimes as any).tefillaLatest}</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n      {/* Daily Halacha Card */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center\">\n              <BookOpen className=\"h-5 w-5 text-purple-600 ml-2\" />\n              <h3 className=\"font-bold text-gray-800\">הלכה יומית לשוטרים</h3>\n            </div>\n            <Button \n              variant=\"ghost\" \n              className=\"text-police-blue text-sm p-0 h-auto\"\n              onClick={() => window.location.pathname = \"/daily-halacha\"}\n              data-testid=\"button-view-all-halacha\"\n            >\n              צפה בכל\n            </Button>\n          </div>\n          \n          {dailyHalacha ? (\n            <>\n              {dailyHalacha.title && (\n                <h4 className=\"font-semibold text-gray-800 mb-2\">{dailyHalacha.title}</h4>\n              )}\n              <p className=\"text-gray-700 leading-relaxed line-clamp-2 whitespace-pre-line\">\n                {dailyHalacha.content.length > 120 \n                  ? dailyHalacha.content.substring(0, 120) + \"...\" \n                  : dailyHalacha.content}\n              </p>\n              <div className=\"mt-3 flex items-center justify-between\">\n                <div className=\"text-xs text-gray-500 flex items-center\">\n                  <Calendar className=\"h-3 w-3 ml-1\" />\n                  <span>{new Date(dailyHalacha.date).toLocaleDateString('he-IL')}</span>\n                </div>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  className=\"text-xs\"\n                  onClick={() => window.location.pathname = \"/daily-halacha\"}\n                  data-testid=\"button-read-more-halacha\"\n                >\n                  קרא עוד\n                </Button>\n              </div>\n            </>\n          ) : (\n            <div className=\"text-center py-4\">\n              <p className=\"text-gray-500\">אין הלכה יומית זמינה כרגע</p>\n              <Button \n                variant=\"outline\" \n                size=\"sm\"\n                className=\"mt-2\"\n                onClick={() => window.location.pathname = \"/daily-halacha\"}\n                data-testid=\"button-browse-halacha\"\n              >\n                עיין בהלכות קודמות\n              </Button>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      {/* Recent Q&A */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center\">\n              <MessageCircleQuestion className=\"h-5 w-5 text-blue-600 ml-2\" />\n              <h3 className=\"font-bold text-gray-800\">שאלות ותשובות אחרונות</h3>\n            </div>\n            <Button \n              variant=\"ghost\" \n              className=\"text-police-blue text-sm p-0 h-auto\"\n              onClick={() => window.location.pathname = \"/questions\"}\n            >\n              צפה בכל\n            </Button>\n          </div>\n          \n          {recentQuestions && recentQuestions.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentQuestions.slice(0, 2).map((question) => (\n                <div key={question.id} className=\"border-r-3 border-police-blue pr-3\">\n                  <p className=\"text-sm text-gray-700 mb-1\">{question.content}</p>\n                  <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                    <span className=\"flex items-center\">\n                      {question.status === \"answered\" ? (\n                        <>\n                          <CheckCircle className=\"h-3 w-3 text-green-500 ml-1\" />\n                          נענתה\n                        </>\n                      ) : (\n                        <>\n                          <Clock className=\"h-3 w-3 text-yellow-500 ml-1\" />\n                          ממתין לתשובה\n                        </>\n                      )}\n                    </span>\n                    <span>{new Date(question.createdAt).toLocaleDateString('he-IL')}</span>\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <p className=\"text-gray-500\">אין שאלות אחרונות</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      {/* News Feed */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-3\">\n            <div className=\"flex items-center\">\n              <Newspaper className=\"h-5 w-5 text-red-600 ml-2\" />\n              <h3 className=\"font-bold text-gray-800\">חדשות ועדכונים</h3>\n            </div>\n            <Button \n              variant=\"ghost\" \n              className=\"text-police-blue text-sm p-0 h-auto\"\n              onClick={() => window.location.pathname = \"/news\"}\n            >\n              צפה בכל\n            </Button>\n          </div>\n          \n          {recentNews && recentNews.length > 0 ? (\n            <div className=\"space-y-3\">\n              {recentNews.map((item) => (\n                <div key={item.id} className=\"border-b border-gray-100 pb-3 last:border-b-0\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <h4 className=\"font-medium text-gray-800 mb-1\">{item.title}</h4>\n                      {item.excerpt && (\n                        <p className=\"text-sm text-gray-600 mb-2\">{item.excerpt}</p>\n                      )}\n                      <span className=\"text-xs text-gray-500\">\n                        {new Date(item.publishedAt).toLocaleDateString('he-IL')}\n                      </span>\n                    </div>\n                    {item.isUrgent && (\n                      <TriangleAlert className=\"h-4 w-4 text-orange-500 flex-shrink-0\" />\n                    )}\n                  </div>\n                </div>\n              ))}\n            </div>\n          ) : (\n            <div className=\"text-center py-4\">\n              <p className=\"text-gray-500\">אין חדשות זמינות</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n      <AskRabbiModal open={showAskRabbi} onOpenChange={setShowAskRabbi} />\n    </div>\n  );\n}\n","size_bytes":14906},"client/src/pages/JewishTimes.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Sun, Moon, Star, Clock, MapPin, Calendar } from \"lucide-react\";\nimport { getHebrewDate } from \"@/utils/hebrewDate\";\n\nexport default function JewishTimes() {\n  const [location, setLocation] = useState(\"ירושלים\");\n  const [customLocation, setCustomLocation] = useState(\"\");\n  const [isCustomMode, setIsCustomMode] = useState(false);\n\n  const { data: jewishTimes, isLoading } = useQuery({\n    queryKey: [\"/api/jewish-times\", location],\n    retry: false,\n  });\n\n  const handleLocationChange = () => {\n    if (customLocation.trim()) {\n      setLocation(customLocation.trim());\n      setIsCustomMode(false);\n      setCustomLocation(\"\");\n    }\n  };\n\n  const commonLocations = [\n    \"ירושלים\",\n    \"תל אביב\",\n    \"חיפה\",\n    \"באר שבע\",\n    \"אילת\",\n    \"צפת\",\n    \"טבריה\",\n    \"נתניה\"\n  ];\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center mb-6\">\n        <Sun className=\"h-6 w-6 text-yellow-600 ml-2\" />\n        <h1 className=\"text-xl font-bold text-gray-800\">זמני היום</h1>\n      </div>\n\n      {/* Location Selection */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center mb-3\">\n            <MapPin className=\"h-5 w-5 text-police-blue ml-2\" />\n            <h3 className=\"font-bold text-gray-800\">בחירת מיקום</h3>\n          </div>\n          \n          <div className=\"space-y-3\">\n            <div>\n              <Label className=\"text-sm font-medium text-gray-700\">מיקום נוכחי: {location}</Label>\n            </div>\n            \n            {!isCustomMode ? (\n              <div className=\"space-y-3\">\n                <div className=\"grid grid-cols-2 gap-2\">\n                  {commonLocations.map((loc) => (\n                    <Button\n                      key={loc}\n                      variant={location === loc ? \"default\" : \"outline\"}\n                      size=\"sm\"\n                      onClick={() => setLocation(loc)}\n                      className={`text-sm ${location === loc ? \"bg-police-blue text-white\" : \"\"}`}\n                    >\n                      {loc}\n                    </Button>\n                  ))}\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => setIsCustomMode(true)}\n                  className=\"w-full text-police-blue\"\n                >\n                  הכנס מיקום אחר\n                </Button>\n              </div>\n            ) : (\n              <div className=\"space-y-3\">\n                <div className=\"flex space-x-reverse space-x-2\">\n                  <Input\n                    value={customLocation}\n                    onChange={(e) => setCustomLocation(e.target.value)}\n                    placeholder=\"הכנס שם עיר...\"\n                    className=\"text-right flex-1\"\n                  />\n                  <Button\n                    onClick={handleLocationChange}\n                    disabled={!customLocation.trim()}\n                    size=\"sm\"\n                    className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n                  >\n                    עדכן\n                  </Button>\n                </div>\n                \n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={() => {\n                    setIsCustomMode(false);\n                    setCustomLocation(\"\");\n                  }}\n                  className=\"w-full text-gray-600\"\n                >\n                  חזור לרשימה\n                </Button>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Times Display */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-5 w-5 text-police-blue ml-2\" />\n              <h3 className=\"font-bold text-gray-800\">זמנים להיום</h3>\n            </div>\n            <div className=\"text-sm text-gray-600\">\n              {getHebrewDate()}\n            </div>\n          </div>\n          \n          {isLoading ? (\n            <div className=\"text-center py-8\">\n              <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n              <p className=\"text-gray-600\">טוען זמנים...</p>\n            </div>\n          ) : jewishTimes ? (\n            <div className=\"space-y-4\">\n              {/* Basic Times */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center p-3 bg-gradient-to-br from-yellow-50 to-orange-50 rounded-lg border border-yellow-200\">\n                  <Sun className=\"h-6 w-6 text-yellow-600 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600 mb-1\">זריחה</p>\n                  <p className=\"font-bold text-lg text-gray-800\">{(jewishTimes as any).sunrise}</p>\n                </div>\n                \n                <div className=\"text-center p-3 bg-gradient-to-br from-orange-50 to-red-50 rounded-lg border border-orange-200\">\n                  <Sun className=\"h-6 w-6 text-orange-600 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600 mb-1\">שקיעה</p>\n                  <p className=\"font-bold text-lg text-gray-800\">{(jewishTimes as any).sunset}</p>\n                </div>\n              </div>\n\n              {/* Shabbat Times */}\n              <div className=\"grid grid-cols-2 gap-3\">\n                <div className=\"text-center p-3 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg border border-blue-200\">\n                  <Star className=\"h-6 w-6 text-blue-600 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600 mb-1\">כניסת שבת</p>\n                  <p className=\"font-bold text-lg text-gray-800\">{(jewishTimes as any).shabbatIn}</p>\n                </div>\n                \n                <div className=\"text-center p-3 bg-gradient-to-br from-purple-50 to-indigo-50 rounded-lg border border-purple-200\">\n                  <Moon className=\"h-6 w-6 text-purple-600 mx-auto mb-2\" />\n                  <p className=\"text-sm text-gray-600 mb-1\">צאת שבת</p>\n                  <p className=\"font-bold text-lg text-gray-800\">{(jewishTimes as any).shabbatOut}</p>\n                </div>\n              </div>\n\n              {/* Additional Times */}\n              {(jewishTimes as any).additionalTimes && (\n                <div className=\"space-y-2 pt-4 border-t border-gray-200\">\n                  <h4 className=\"font-semibold text-gray-800 text-sm\">זמנים נוספים</h4>\n                  <div className=\"grid grid-cols-1 gap-2 text-sm\">\n                    {(jewishTimes as any).dawn && (\n                      <div className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                        <span className=\"text-gray-600\">עלות השחר</span>\n                        <span className=\"font-medium\">{(jewishTimes as any).dawn}</span>\n                      </div>\n                    )}\n                    {(jewishTimes as any).dusk && (\n                      <div className=\"flex justify-between items-center p-2 bg-gray-50 rounded\">\n                        <span className=\"text-gray-600\">צאת הכוכבים</span>\n                        <span className=\"font-medium\">{(jewishTimes as any).dusk}</span>\n                      </div>\n                    )}\n                  </div>\n                </div>\n              )}\n            </div>\n          ) : (\n            <div className=\"text-center py-8\">\n              <Clock className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-600 mb-2\">לא ניתן לטעון זמנים</h3>\n              <p className=\"text-gray-500\">אנא בדוק את החיבור לאינטרנט ונסה שוב</p>\n            </div>\n          )}\n        </CardContent>\n      </Card>\n\n      {/* Information Card */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold text-gray-800 mb-2\">מידע חשוב</h3>\n          <div className=\"text-sm text-gray-600 space-y-2\">\n            <p>• הזמנים מחושבים לפי מיקום הגיאוגרפי של העיר שנבחרה</p>\n            <p>• זמני השבת מחושבים עם הוספת 18 דקות לכניסה ו-42 דקות ליציאה</p>\n            <p>• במקרה של ספק, יש להתייעץ עם רב מוסמך</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":9041},"client/src/pages/JewishTimesNew.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Clock, Sun, Moon, Calendar, MapPin, RefreshCw, Settings, Globe } from \"lucide-react\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ninterface JewishTimes {\n  location: string;\n  englishLocation?: string;\n  coordinates?: { latitude: number; longitude: number };\n  \n  // Basic times\n  sunrise: string;\n  sunset: string;\n  \n  // Prayer times\n  shacharit?: string;\n  mincha?: string;\n  maariv?: string;\n  \n  // Shema and Tefilla times - separate opinions\n  shemaLatestGra?: string;      // הגר\"א\n  shemaLatestMga?: string;      // מגן אברהם\n  tefillaLatestGra?: string;    // הגר\"א  \n  tefillaLatestMga?: string;    // מגן אברהם\n  \n  // Backward compatibility\n  shemaLatest: string;\n  tefillaLatest: string;\n  \n  // Shabbat times\n  shabbatStart: string;\n  shabbatEnd: string;\n  \n  // Extended times for comprehensive view\n  minchaKetana?: string;\n  plagHamincha?: string;\n  beinHashmashot?: string;\n  fastEnds?: string;\n  kiddushLevana?: string;\n  chatzot?: string;\n  chatzotNight?: string;\n  alotHashachar?: string;\n  misheyakir?: string;\n  misheyakirMachmir?: string;\n  sofZmanShema?: string;\n  sofZmanTefilla?: string;\n  \n  // Additional times\n  dawn?: string;\n  dusk?: string;\n  midday?: string;\n  \n  // Date information\n  date: string;\n  gregorianDate?: {\n    day: number;\n    month: number;\n    year: number;\n    dayOfWeek: string;\n  };\n  hebrewDate?: {\n    day: string;\n    month: string;\n    year: string;\n    formatted: string;\n  };\n  \n  // Shabbat information\n  parsha?: string;\n  \n  lastUpdated?: string;\n  timezone?: string;\n  fallback?: boolean;\n}\n\ninterface City {\n  id: string;\n  name: string;\n  english: string;\n}\n\nexport default function JewishTimesNew() {\n  const [selectedCity, setSelectedCity] = useState(\"ירושלים\");\n  const { toast } = useToast();\n\n  // Fetch available cities\n  const { data: citiesResponse } = useQuery<{ cities: City[] }>({\n    queryKey: [\"/api/jewish-times/cities\"],\n  });\n  \n  const cities = citiesResponse?.cities || [];\n\n  // Fetch Jewish times for selected city with real-time refresh\n  const { data: jewishTimes, isLoading, isError, refetch } = useQuery<JewishTimes>({\n    queryKey: [\"/api/jewish-times\", selectedCity],\n    refetchInterval: 60000, // Refresh every minute for real-time sync\n    refetchOnWindowFocus: true,\n  });\n\n  // Auto-save user's city preference\n  useEffect(() => {\n    localStorage.setItem('preferredCity', selectedCity);\n  }, [selectedCity]);\n\n  // Load saved city preference on component mount\n  useEffect(() => {\n    const savedCity = localStorage.getItem('preferredCity');\n    if (savedCity && cities.length > 0 && cities.some(city => city.id === savedCity)) {\n      setSelectedCity(savedCity);\n    }\n  }, [cities]);\n\n  const handleCityChange = (cityId: string) => {\n    setSelectedCity(cityId);\n    toast({\n      title: \"מיקום עודכן\",\n      description: `הזמנים מוצגים עבור ${cities.find(c => c.id === cityId)?.name || cityId}`,\n    });\n  };\n\n  const formatTimeLabel = (time: string | undefined, label: string, colorClass: string = \"text-police-blue\") => {\n    if (!time || time === \"לא זמין\") return null;\n    return (\n      <div className=\"flex justify-between items-center py-2 border-b border-gray-100 last:border-b-0\">\n        <span className=\"text-sm text-gray-600\">{label}</span>\n        <span className={`font-bold ${colorClass}`}>{time}</span>\n      </div>\n    );\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        <div className=\"flex items-center animate-pulse\">\n          <Sun className=\"h-6 w-6 text-yellow-600 ml-2\" />\n          <h1 className=\"text-xl font-bold text-gray-800\">זמני היום</h1>\n        </div>\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-gray-500\">טוען זמנים יהודיים...</div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  if (isError || !jewishTimes) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        <div className=\"flex items-center\">\n          <Sun className=\"h-6 w-6 text-yellow-600 ml-2\" />\n          <h1 className=\"text-xl font-bold text-gray-800\">זמני היום</h1>\n        </div>\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6\">\n            <div className=\"text-center text-red-500\">\n              שגיאה בטעינת הזמנים היהודיים\n              <br />\n              <Button onClick={() => refetch()} className=\"mt-2\" variant=\"outline\" size=\"sm\">\n                <RefreshCw className=\"h-4 w-4 ml-2\" />\n                נסה שוב\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  const isShabbat = new Date().getDay() === 6;\n  const isFriday = new Date().getDay() === 5;\n\n  return (\n    <div className=\"p-4 space-y-4 max-w-2xl mx-auto\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-6\">\n        <div className=\"flex items-center\">\n          <Sun className=\"h-6 w-6 text-yellow-600 ml-2\" />\n          <h1 className=\"text-xl font-bold text-gray-800\">זמני היום</h1>\n        </div>\n        <Button \n          onClick={() => refetch()} \n          variant=\"outline\" \n          size=\"sm\"\n          className=\"flex items-center gap-2\"\n        >\n          <RefreshCw className=\"h-4 w-4\" />\n          רענן\n        </Button>\n      </div>\n\n      {/* Location Selection */}\n      <Card className=\"shadow-card\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center text-lg\">\n            <MapPin className=\"h-5 w-5 text-police-blue ml-2\" />\n            בחירת מיקום\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            <Select value={selectedCity} onValueChange={handleCityChange}>\n              <SelectTrigger className=\"w-full\">\n                <SelectValue placeholder=\"בחר עיר\" />\n              </SelectTrigger>\n              <SelectContent>\n                {cities.length > 0 ? cities.map((city) => (\n                  <SelectItem key={city.id} value={city.id}>\n                    <div className=\"flex items-center gap-2\">\n                      <span>{city.name}</span>\n                      <span className=\"text-xs text-gray-500\">({city.english})</span>\n                    </div>\n                  </SelectItem>\n                )) : (\n                  <SelectItem value=\"ירושלים\">ירושלים (Jerusalem)</SelectItem>\n                )}\n              </SelectContent>\n            </Select>\n            \n            {jewishTimes.coordinates && (\n              <div className=\"text-xs text-gray-500 text-center\">\n                <Globe className=\"h-3 w-3 inline ml-1\" />\n                {jewishTimes.coordinates.latitude.toFixed(4)}°, {jewishTimes.coordinates.longitude.toFixed(4)}°\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Date Information */}\n      <Card className=\"shadow-card\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center text-lg\">\n            <Calendar className=\"h-5 w-5 text-police-blue ml-2\" />\n            תאריך\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-2\">\n            {jewishTimes.gregorianDate && (\n              <div className=\"text-center\">\n                <div className=\"text-lg font-bold text-gray-800\">\n                  {jewishTimes.gregorianDate?.dayOfWeek || \"\"}\n                </div>\n                <div className=\"text-sm text-gray-600\">\n                  {jewishTimes.date || \"\"}\n                </div>\n              </div>\n            )}\n            \n            {jewishTimes.hebrewDate && (\n              <div className=\"text-center bg-blue-50 p-3 rounded-lg\">\n                <div className=\"text-lg font-bold text-police-blue\">\n                  {jewishTimes.hebrewDate?.formatted || \"לא זמין\"}\n                </div>\n                <div className=\"text-xs text-gray-500\">תאריך עברי</div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Prayer Times */}\n      <Card className=\"shadow-card\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center text-lg\">\n            <Clock className=\"h-5 w-5 text-police-blue ml-2\" />\n            זמני תפילה\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-1\">\n            {formatTimeLabel(jewishTimes.dawn || jewishTimes.alotHashachar, \"עלות השחר\")}\n            {formatTimeLabel(jewishTimes.misheyakir, \"משיכיר\")}\n            {formatTimeLabel(jewishTimes.sunrise, \"זריחה\")}\n            {/* Shema times with opinions breakdown */}\n            {jewishTimes.shemaLatestGra && jewishTimes.shemaLatestMga ? (\n              <div className=\"space-y-1 border-r-2 border-blue-200 pr-2\">\n                <div className=\"text-sm font-semibold text-gray-700 mb-1\">סוף זמן קריאת שמע:</div>\n                {formatTimeLabel(jewishTimes.shemaLatestMga, \"מג\\\"א\", \"text-blue-600\")}\n                {formatTimeLabel(jewishTimes.shemaLatestGra, \"הגר\\\"א\", \"text-purple-600\")}\n              </div>\n            ) : (\n              formatTimeLabel(jewishTimes.shemaLatest || jewishTimes.sofZmanShema, \"סוף זמן קריאת שמע\")\n            )}\n            \n            {/* Tefilla times with opinions breakdown */}\n            {jewishTimes.tefillaLatestGra && jewishTimes.tefillaLatestMga ? (\n              <div className=\"space-y-1 border-r-2 border-green-200 pr-2\">\n                <div className=\"text-sm font-semibold text-gray-700 mb-1\">סוף זמן תפילה:</div>\n                {formatTimeLabel(jewishTimes.tefillaLatestMga, \"מג\\\"א\", \"text-green-600\")}\n                {formatTimeLabel(jewishTimes.tefillaLatestGra, \"הגר\\\"א\", \"text-teal-600\")}\n              </div>\n            ) : (\n              formatTimeLabel(jewishTimes.tefillaLatest || jewishTimes.sofZmanTefilla, \"סוף זמן תפילה\")\n            )}\n            {formatTimeLabel(jewishTimes.midday || jewishTimes.chatzot, \"חצות היום\")}\n            {formatTimeLabel(jewishTimes.mincha, \"מנחה גדולה\")}\n            {formatTimeLabel(jewishTimes.minchaKetana, \"מנחה קטנה\")}\n            {formatTimeLabel(jewishTimes.plagHamincha, \"פלג המנחה\")}\n            {formatTimeLabel(jewishTimes.sunset, \"שקיעה\")}\n            {formatTimeLabel(jewishTimes.beinHashmashot, \"בין השמשות\")}\n            {formatTimeLabel(jewishTimes.maariv || jewishTimes.dusk, \"צאת הכוכבים\")}\n            {formatTimeLabel(jewishTimes.chatzotNight, \"חצות הלילה\")}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Shabbat Times */}\n      <Card className=\"shadow-card\">\n        <CardHeader className=\"pb-3\">\n          <CardTitle className=\"flex items-center text-lg\">\n            <Moon className=\"h-5 w-5 text-police-blue ml-2\" />\n            זמני שבת\n            {(isShabbat || isFriday) && (\n              <Badge variant=\"secondary\" className=\"mr-2 bg-blue-100 text-blue-800\">\n                {isShabbat ? \"שבת קודש\" : \"ערב שבת\"}\n              </Badge>\n            )}\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <div className=\"space-y-3\">\n            {jewishTimes.parsha && (\n              <div className=\"text-center bg-purple-50 p-3 rounded-lg mb-3\">\n                <div className=\"text-lg font-bold text-purple-800\">\n                  {jewishTimes.parsha}\n                </div>\n                <div className=\"text-xs text-gray-500\">פרשת השבוע</div>\n              </div>\n            )}\n            \n            <div className=\"space-y-1\">\n              {formatTimeLabel(jewishTimes.shabbatStart, \"הדלקת נרות\")}\n              {formatTimeLabel(jewishTimes.shabbatEnd, \"צאת השבת\")}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Data Source Info */}\n      <Card className=\"shadow-card bg-gray-50\">\n        <CardContent className=\"p-4\">\n          <div className=\"text-xs text-gray-500 text-center space-y-1\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <span>מקור נתונים: Hebcal API</span>\n              {jewishTimes.fallback && (\n                <Badge variant=\"secondary\" className=\"text-xs\">חישוב מקומי</Badge>\n              )}\n            </div>\n            {jewishTimes.lastUpdated && (\n              <div>\n                עודכן לאחרונה: {new Date(jewishTimes.lastUpdated).toLocaleTimeString('he-IL')}\n              </div>\n            )}\n            <div className=\"text-green-600 font-medium\">\n              ✓ סנכרון בזמן אמת\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":13375},"client/src/pages/Landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { MessageCircleQuestion, MapPin, Video, BookOpen, Clock, UserCheck, Newspaper } from \"lucide-react\";\n// import rabbinateLogoUrl from \"@assets/rabbinate-logo.png\";\n\nexport default function Landing() {\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex flex-col items-center justify-center p-4\" dir=\"rtl\">\n      <div className=\"max-w-4xl w-full text-center\">\n        {/* Logo and Title */}\n        <div className=\"mb-8\">\n          <div className=\"w-24 h-24 bg-police-blue rounded-full flex items-center justify-center mx-auto mb-4\">\n            <UserCheck className=\"h-12 w-12 text-white\" />\n          </div>\n          <h1 className=\"text-4xl font-bold text-police-blue mb-2\">אפליקציית רבנות המשטרה</h1>\n          <p className=\"text-xl text-gray-600\">רבנות המשטרה מתחברת אליכם!</p>\n        </div>\n\n        {/* Features Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6 mb-12\">\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <MessageCircleQuestion className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">שאל את הרב</h3>\n              <p className=\"text-gray-600\">שאלו שאלות הלכתיות וקבלו תשובות מרבני המשטרה</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <MapPin className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">בתי כנסת</h3>\n              <p className=\"text-gray-600\">מצאו בתי כנסת בתחנות משטרה ובבסיסי מג\"ב עם זמני תפילה עדכניים</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Video className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">סרטונים</h3>\n              <p className=\"text-gray-600\">צפו בסרטונים רלוונטיים מרבנות המשטרה</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <BookOpen className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">הלכה יומית</h3>\n              <p className=\"text-gray-600\">הלכות יומיות רלוונטיות לחיי השוטר</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Clock className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">זמנים יהודיים</h3>\n              <p className=\"text-gray-600\">זמני זריחה, שקיעה ושבת לפי מיקומך</p>\n            </CardContent>\n          </Card>\n\n          <Card className=\"shadow-card hover:shadow-lg transition-shadow\">\n            <CardContent className=\"p-6 text-center\">\n              <Newspaper className=\"h-12 w-12 text-police-blue mx-auto mb-4\" />\n              <h3 className=\"font-semibold text-lg mb-2\">חדשות ועדכונים</h3>\n              <p className=\"text-gray-600\">עדכונים חשובים מרבנות המשטרה ומידע רלוונטי לשוטרים</p>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Login/Register Buttons */}\n        <div className=\"mb-8 space-y-4\">\n          <div className=\"flex gap-4 justify-center\">\n            <Button \n              onClick={() => window.location.href = '/login'} \n              size=\"lg\"\n              className=\"bg-police-blue hover:bg-blue-700 text-white px-8 py-4 text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all\"\n            >\n              התחברות\n            </Button>\n            <Button \n              onClick={() => window.location.href = '/register'} \n              size=\"lg\"\n              variant=\"outline\"\n              className=\"border-police-blue text-police-blue hover:bg-police-blue hover:text-white px-8 py-4 text-lg font-semibold rounded-lg shadow-lg hover:shadow-xl transition-all\"\n            >\n              הרשמה\n            </Button>\n          </div>\n          <p className=\"text-sm text-gray-600\">להרשמה או התחברות למערכת אפליקציית רבנות המשטרה</p>\n        </div>\n\n        {/* Info */}\n        <div className=\"text-center\">\n          <p className=\"text-gray-600 max-w-2xl mx-auto\">רבנות המשטרה מספקת שירותי דת מותאמים לצרכים הייחודיים של שוטרים ושוטרות. האפליקציה כוללת שאלות לרב, חדשות, מידע על בתי כנסת, תוכן דתי ועוד.</p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":5353},"client/src/pages/Login.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { performLogout } from \"@/lib/logout\";\nimport logo from \"@assets/bf4d69d1-82e0-4b41-bc8c-ecca5ca6a895_1753886576969.jpeg\";\nimport { loginSchema, type LoginUser } from \"@shared/schema\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\n\n// Admin credentials\nconst ADMIN_EMAIL = \"admin@police.gov.il\";\nconst ADMIN_PASSWORD = \"admin123\";\n\nexport default function Login() {\n  const [_, setLocation] = useLocation();\n  const { toast } = useToast();\n  const { deviceId } = useAuth();\n  const queryClient = useQueryClient();\n  \n  // Check if user is already logged in as admin and show logout option\n  const isAdminLoggedIn = localStorage.getItem('isAdmin') === 'true';\n\n  const form = useForm<LoginUser>({\n    resolver: zodResolver(loginSchema),\n    defaultValues: {\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (data: LoginUser) => {\n      console.log('Starting login with:', { email: data.email, deviceId });\n      \n      const loginPayload = { ...data, deviceId };\n      console.log('Sending login request:', loginPayload);\n      \n      const response = await fetch(\"/api/auth/login\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(loginPayload),\n      });\n      \n      if (!response.ok) {\n        const error = await response.json();\n        console.error('Login error response:', error);\n        throw new Error(error.message);\n      }\n      \n      const result = await response.json();\n      console.log('Login successful:', result);\n      \n      // Store the user's device ID for future requests\n      if (result.user && result.user.deviceId) {\n        localStorage.setItem('deviceId', result.user.deviceId);\n      }\n      \n      // Check if this is an admin user and set appropriate flags\n      if (result.user && result.user.isAdmin) {\n        localStorage.setItem('isAdmin', 'true');\n        localStorage.setItem('adminEmail', result.user.email);\n        return { \n          isAdmin: true, \n          user: result.user\n        };\n      }\n      \n      return result;\n    },\n    onSuccess: async (result) => {\n      if (result.isAdmin) {\n        toast({\n          title: \"התחברות מנהל הצליחה\",\n          description: \"עובר לממשק ניהול\",\n        });\n        \n        // Force refresh of auth state\n        queryClient.invalidateQueries({ queryKey: ['/api/auth/user'] });\n        \n        // Navigate to admin page immediately\n        setLocation(\"/admin\");\n        return;\n      }\n      \n      toast({\n        title: \"התחברות הצליחה\",\n        description: \"ברוך הבא לרבנות המשטרה\",\n      });\n      \n      // Clear any admin localStorage flags\n      localStorage.removeItem('isAdmin');\n      localStorage.removeItem('adminEmail');\n      \n      // Invalidate the auth query to refresh user data\n      await queryClient.invalidateQueries({ queryKey: [\"/api/auth/user\"] });\n      \n      // Navigate to home page after a short delay\n      setTimeout(() => {\n        setLocation(\"/\");\n      }, 1000);\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"שגיאה בהתחברות\",\n        description: error.message || \"פרטי התחברות לא נכונים או החשבון לא אושר\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LoginUser) => {\n    loginMutation.mutate(data);\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <img src={logo} alt=\"לוגו רבנות המשטרה\" className=\"h-16 w-auto mx-auto mb-4\" />\n          <CardTitle className=\"text-xl\">התחברות לרבנות המשטרה</CardTitle>\n          <CardDescription className=\"text-gray-600\">הכנס דואר אלקטרוני וסיסמה להתחברות</CardDescription>\n          \n          \n        </CardHeader>\n        \n        <CardContent>\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">דואר אלקטרוני *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"example@email.com\"\n                        className=\"text-right\"\n                        dir=\"ltr\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">סיסמה *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"password\"\n                        placeholder=\"הכנס סיסמה\"\n                        className=\"text-right\"\n                        dir=\"rtl\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={loginMutation.isPending}\n              >\n                {loginMutation.isPending ? \"מתחבר...\" : \"התחבר\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 space-y-3 text-center\">\n            <button\n              onClick={() => setLocation(\"/register\")}\n              className=\"text-blue-600 hover:text-blue-800 text-sm underline block w-full\"\n            >\n              אין לי חשבון - הרשם למערכת\n            </button>\n            \n\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":6877},"client/src/pages/News.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Newspaper, Calendar, TriangleAlert } from \"lucide-react\";\nimport type { News } from \"@shared/schema\";\n\nexport default function NewsPage(): JSX.Element {\n  const { data: newsList, isLoading } = useQuery({\n    queryKey: [\"/api/news\"],\n    retry: false,\n  }) as { data: News[] | undefined; isLoading: boolean };\n\n  if (isLoading) {\n    return (\n      <div className=\"max-w-4xl mx-auto p-4\">\n        <div className=\"animate-pulse space-y-4\">\n          {[1, 2, 3].map(i => (\n            <Card key={i} className=\"h-32\">\n              <CardContent className=\"p-4\">\n                <div className=\"bg-gray-200 h-4 rounded mb-2\"></div>\n                <div className=\"bg-gray-200 h-3 rounded w-3/4 mb-2\"></div>\n                <div className=\"bg-gray-200 h-3 rounded w-1/2\"></div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"max-w-4xl mx-auto p-4\">\n      <div className=\"flex items-center mb-6\">\n        <Newspaper className=\"h-6 w-6 text-red-600 ml-3\" />\n        <h1 className=\"text-2xl font-bold text-gray-800\">חדשות ועדכונים</h1>\n      </div>\n\n      {newsList && newsList.length > 0 ? (\n        <div className=\"space-y-4\">\n          {newsList.map((newsItem) => (\n            <Card key={newsItem.id} className=\"shadow-card hover:shadow-lg transition-shadow\">\n              <CardHeader className=\"pb-3\">\n                <div className=\"flex items-start justify-between\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-2\">\n                      <CardTitle className=\"text-lg text-gray-800 text-right\">\n                        {newsItem.title}\n                      </CardTitle>\n                      {newsItem.isUrgent && (\n                        <div className=\"flex items-center\">\n                          <TriangleAlert className=\"h-4 w-4 text-orange-500 ml-1\" />\n                          <Badge variant=\"destructive\" className=\"text-xs\">דחוף</Badge>\n                        </div>\n                      )}\n                    </div>\n                    {newsItem.excerpt && (\n                      <p className=\"text-gray-600 text-sm mb-3 text-right\">{newsItem.excerpt}</p>\n                    )}\n                    <div className=\"flex items-center text-xs text-gray-500\">\n                      <Calendar className=\"h-3 w-3 ml-1\" />\n                      <span>{new Date(newsItem.publishedAt).toLocaleDateString('he-IL')}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardHeader>\n              <CardContent className=\"pt-0\">\n                <div className=\"prose prose-sm max-w-none text-right\">\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-wrap\">\n                    {newsItem.content}\n                  </p>\n                </div>\n                {newsItem.createdBy && (\n                  <div className=\"mt-4 pt-3 border-t border-gray-100\">\n                    <p className=\"text-xs text-gray-500 text-right\">\n                      פורסם על ידי: {newsItem.createdBy}\n                    </p>\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-8 text-center\">\n            <Newspaper className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-800 mb-2\">אין חדשות זמינות</h3>\n            <p className=\"text-gray-600\">עדיין לא פורסמו חדשות במערכת</p>\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":3911},"client/src/pages/Profile.tsx":{"content":"import { useState } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { User, Phone, IdCard, Calendar, LogOut, Settings, Bell, Clock, MessageCircle, Video, Mail } from \"lucide-react\";\n\nexport default function Profile() {\n  const { user, logout } = useAuth();\n  const [, setLocation] = useLocation();\n  \n  // Notification settings state\n  const [myQuestionsNotifications, setMyQuestionsNotifications] = useState(true);\n  const [allQuestionsNotifications, setAllQuestionsNotifications] = useState(false);\n  const [videosNotifications, setVideosNotifications] = useState(true);\n  const [newsNotifications, setNewsNotifications] = useState(true);\n  \n  // Timezone setting\n  const [selectedTimezone, setSelectedTimezone] = useState(\"Jerusalem\");\n\n  if (!user) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"text-center py-8\">\n          <p className=\"text-gray-600\">משתמש לא מחבר</p>\n        </div>\n      </div>\n    );\n  }\n\n  const getStatusBadge = (status: string) => {\n    switch (status) {\n      case \"approved\":\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-green-100 text-green-800\">\n            מאושר\n          </span>\n        );\n      case \"pending\":\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-yellow-100 text-yellow-800\">\n            ממתין לאישור\n          </span>\n        );\n      case \"rejected\":\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-red-100 text-red-800\">\n            נדחה\n          </span>\n        );\n      default:\n        return (\n          <span className=\"inline-flex items-center px-2 py-1 rounded-full text-xs font-medium bg-gray-100 text-gray-800\">\n            לא ידוע\n          </span>\n        );\n    }\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center mb-6\">\n        <User className=\"h-6 w-6 text-police-blue ml-2\" />\n        <h1 className=\"text-2xl font-bold text-gray-800\">האזור האישי שלי</h1>\n      </div>\n\n      {/* Welcome Card */}\n      <Card className=\"shadow-card bg-gradient-to-r from-blue-50 to-purple-50\">\n        <CardContent className=\"p-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h2 className=\"text-xl font-bold text-gray-800 mb-2\">\n                שלום, {user.fullName || user.email}\n              </h2>\n              <p className=\"text-gray-600\">ברוך הבא לאזור האישי שלך</p>\n            </div>\n            <Badge variant=\"outline\" className=\"text-police-blue border-police-blue\">\n              משתמש רשום\n            </Badge>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Notification Settings */}\n      <Card className=\"shadow-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Bell className=\"h-5 w-5 text-purple-600 ml-2\" />\n            הגדרות התראות\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <MessageCircle className=\"h-4 w-4 text-gray-500 ml-2\" />\n              <span className=\"text-gray-700\">התראות על השאלות שלי</span>\n            </div>\n            <Switch\n              checked={myQuestionsNotifications}\n              onCheckedChange={setMyQuestionsNotifications}\n              data-testid=\"switch-my-questions\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <MessageCircle className=\"h-4 w-4 text-gray-500 ml-2\" />\n              <span className=\"text-gray-700\">התראות על כל השאלות</span>\n            </div>\n            <Switch\n              checked={allQuestionsNotifications}\n              onCheckedChange={setAllQuestionsNotifications}\n              data-testid=\"switch-all-questions\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Video className=\"h-4 w-4 text-gray-500 ml-2\" />\n              <span className=\"text-gray-700\">התראות על סרטונים חדשים</span>\n            </div>\n            <Switch\n              checked={videosNotifications}\n              onCheckedChange={setVideosNotifications}\n              data-testid=\"switch-videos\"\n            />\n          </div>\n\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center\">\n              <Mail className=\"h-4 w-4 text-gray-500 ml-2\" />\n              <span className=\"text-gray-700\">התראות על חדשות</span>\n            </div>\n            <Switch\n              checked={newsNotifications}\n              onCheckedChange={setNewsNotifications}\n              data-testid=\"switch-news\"\n            />\n          </div>\n\n          <Button \n            className=\"w-full bg-police-blue hover:bg-police-blue/90\"\n            data-testid=\"button-save-notifications\"\n          >\n            שמור הגדרות התראות\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Timezone Settings */}\n      <Card className=\"shadow-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <Clock className=\"h-5 w-5 text-purple-600 ml-2\" />\n            הגדרות אזור זמן\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          <div className=\"space-y-2\">\n            <label className=\"text-sm font-medium text-gray-700\">\n              אזור זמן מועדף לזמני יום\n            </label>\n            <Select value={selectedTimezone} onValueChange={setSelectedTimezone}>\n              <SelectTrigger className=\"text-right\" data-testid=\"select-timezone\">\n                <SelectValue placeholder=\"בחר אזור זמן\" />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"Jerusalem\">ירושלים</SelectItem>\n                <SelectItem value=\"TelAviv\">תל אביב</SelectItem>\n                <SelectItem value=\"Haifa\">חיפה</SelectItem>\n                <SelectItem value=\"Beersheva\">באר שבע</SelectItem>\n                <SelectItem value=\"Eilat\">אילת</SelectItem>\n              </SelectContent>\n            </Select>\n          </div>\n\n          <Button \n            className=\"w-full bg-police-blue hover:bg-police-blue/90\"\n            data-testid=\"button-save-timezone\"\n          >\n            שמור הגדרות אזור זמן\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* Personal Details Update Notice */}\n      <Card className=\"shadow-card border-orange-200 bg-orange-50\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center text-orange-700\">\n            <Settings className=\"h-5 w-5 ml-2\" />\n            עדכון פרטים אישיים\n          </CardTitle>\n        </CardHeader>\n        <CardContent>\n          <p className=\"text-gray-700 mb-4\">\n            לעדכון פרטים אישיים (שם, טלפון, אימייל וכדומה) יש לפנות ישירות למנהל האתר דרך עמוד 'צור קשר'.\n          </p>\n          <Button \n            variant=\"outline\" \n            className=\"w-full border-orange-500 text-orange-700 hover:bg-orange-100\"\n            onClick={() => setLocation(\"/contact\")}\n            data-testid=\"button-contact-admin\"\n          >\n            צור קשר עם המנהל\n          </Button>\n        </CardContent>\n      </Card>\n\n      {/* User Info Display */}\n      <Card className=\"shadow-card\">\n        <CardHeader>\n          <CardTitle className=\"flex items-center\">\n            <User className=\"h-5 w-5 text-purple-600 ml-2\" />\n            פרטים אישיים\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"space-y-3\">\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\n            <div>\n              <span className=\"font-medium text-gray-600\">שם מלא:</span>\n              <p className=\"text-gray-800\">{user.fullName || \"לא הוגדר\"}</p>\n            </div>\n            <div>\n              <span className=\"font-medium text-gray-600\">אימייל:</span>\n              <p className=\"text-gray-800\">{user.email}</p>\n            </div>\n            <div>\n              <span className=\"font-medium text-gray-600\">טלפון:</span>\n              <p className=\"text-gray-800\">{user.phone || \"לא הוגדר\"}</p>\n            </div>\n            <div>\n              <span className=\"font-medium text-gray-600\">סטטוס:</span>\n              {getStatusBadge(user.status)}\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Original User Details Card - keep for backward compatibility */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-6\">\n          {/* User Avatar */}\n          <div className=\"text-center mb-6\">\n            <div className=\"w-20 h-20 bg-police-blue-light rounded-full flex items-center justify-center mx-auto mb-3\">\n              <User className=\"h-10 w-10 text-police-blue\" />\n            </div>\n            <h2 className=\"text-xl font-bold text-gray-800\">{user.fullName}</h2>\n            <div className=\"mt-2\">{getStatusBadge(user.status)}</div>\n          </div>\n\n          {/* User Details */}\n          <div className=\"space-y-4\">\n            <div className=\"flex items-center\">\n              <IdCard className=\"h-5 w-5 text-gray-500 ml-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">מספר אישי</p>\n                <p className=\"font-medium text-gray-800\">{user.personalId}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center\">\n              <Phone className=\"h-5 w-5 text-gray-500 ml-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">טלפון</p>\n                <p className=\"font-medium text-gray-800\">{user.phone}</p>\n              </div>\n            </div>\n\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-5 w-5 text-gray-500 ml-3\" />\n              <div>\n                <p className=\"text-sm text-gray-600\">תאריך הצטרפות</p>\n                <p className=\"font-medium text-gray-800\">\n                  {new Date(user.createdAt).toLocaleDateString('he-IL')}\n                </p>\n              </div>\n            </div>\n\n            {user.approvedAt && (\n              <div className=\"flex items-center\">\n                <Calendar className=\"h-5 w-5 text-gray-500 ml-3\" />\n                <div>\n                  <p className=\"text-sm text-gray-600\">תאריך אישור</p>\n                  <p className=\"font-medium text-gray-800\">\n                    {new Date(user.approvedAt).toLocaleDateString('he-IL')}\n                  </p>\n                </div>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Account Management */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold text-gray-800 mb-4\">ניהול חשבון</h3>\n          \n          <div className=\"space-y-3\">\n            <Button\n              variant=\"outline\"\n              className=\"w-full justify-start text-police-blue border-police-blue hover:bg-blue-50\"\n              onClick={() => setLocation(\"/admin\")}\n            >\n              <Settings className=\"h-4 w-4 ml-2\" />\n              אזור ניהול\n            </Button>\n            <button\n              onClick={logout}\n              className=\"w-full bg-gradient-to-r from-red-600 via-red-700 to-red-800 hover:from-red-700 hover:via-red-800 hover:to-red-900 text-white px-6 py-4 rounded-xl text-lg font-bold shadow-2xl hover:shadow-red-600/40 transition-all duration-300 transform hover:scale-105 hover:-translate-y-1 border-2 border-red-400 hover:border-red-300\"\n              style={{\n                background: 'linear-gradient(135deg, #dc2626, #b91c1c, #991b1b, #7f1d1d)',\n                boxShadow: '0 12px 25px rgba(220, 38, 38, 0.4), 0 5px 10px rgba(220, 38, 38, 0.2)',\n              }}\n            >\n              <span className=\"flex items-center justify-center gap-3\">\n                <LogOut className=\"h-5 w-5\" />\n                <span className=\"tracking-wide drop-shadow-lg\">התנתק מהמערכת</span>\n              </span>\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* App Info */}\n      <Card className=\"shadow-card\">\n        <CardContent className=\"p-4\">\n          <h3 className=\"font-bold text-gray-800 mb-4\">מידע על האפליקציה</h3>\n          \n          <div className=\"text-sm text-gray-600 space-y-1\">\n            <p><strong>גרסה:</strong> 1.0.0</p>\n            <p><strong>פיתוח:</strong> רבנות המשטרה</p>\n            <p><strong>תמיכה:</strong> support@police-rabbinate.gov.il</p>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":13684},"client/src/pages/QuestionDetail.tsx":{"content":"import { useParams, useLocation } from \"wouter\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useEffect } from \"react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowRight, Clock, CheckCircle, AlertCircle, Lock, User, Calendar } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Question, Answer } from \"@shared/schema\";\n\ninterface QuestionWithAnswer extends Question {\n  answers: Answer[];\n  user: { fullName: string };\n}\n\nexport default function QuestionDetail() {\n  const { id } = useParams();\n  const [, navigate] = useLocation();\n  const { user } = useAuth();\n  const queryClient = useQueryClient();\n\n  const { data: question, isLoading } = useQuery({\n    queryKey: [\"/api/questions\", id],\n    enabled: !!id,\n  }) as { data: QuestionWithAnswer | undefined; isLoading: boolean };\n\n  // Mark question answer as viewed\n  const markQuestionAnswerViewed = useMutation({\n    mutationFn: async (questionId: string) => {\n      return apiRequest(`/api/questions/${questionId}/mark-answer-viewed`, {\n        method: \"POST\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    }\n  });\n\n  // Mark as viewed if it has new answer and belongs to current user\n  useEffect(() => {\n    if (question && (question as any).hasNewAnswer && question.userId === user?.id) {\n      markQuestionAnswerViewed.mutate(question.id);\n    }\n  }, [question, user?.id, markQuestionAnswerViewed]);\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"answered\":\n        return <CheckCircle className=\"h-5 w-5 text-green-500\" />;\n      case \"pending\":\n        return <Clock className=\"h-5 w-5 text-yellow-500\" />;\n      default:\n        return <AlertCircle className=\"h-5 w-5 text-gray-500\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"answered\":\n        return \"נענתה\";\n      case \"pending\":\n        return \"ממתין לתשובה\";\n      case \"closed\":\n        return \"סגורה\";\n      default:\n        return \"לא ידוע\";\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">טוען פרטי השאלה...</p>\n        </div>\n      </div>\n    );\n  }\n\n  if (!question) {\n    return (\n      <div className=\"p-4\">\n        <div className=\"text-center py-8\">\n          <AlertCircle className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-600 mb-2\">השאלה לא נמצאה</h3>\n          <Button\n            onClick={() => navigate(\"/questions\")}\n            className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n          >\n            חזור לשאלות\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\" dir=\"rtl\">\n      {/* Header */}\n      <div className=\"flex items-center mb-4\">\n        <Button\n          variant=\"ghost\"\n          onClick={() => navigate(\"/questions\")}\n          className=\"ml-2\"\n        >\n          <ArrowRight className=\"h-4 w-4\" />\n        </Button>\n        <h1 className=\"text-xl font-bold text-gray-800\">פרטי השאלה</h1>\n      </div>\n\n      {/* Question Card */}\n      <Card className=\"shadow-card\">\n        <CardHeader>\n          <div className=\"flex items-center justify-between\">\n            <CardTitle className=\"text-lg\">השאלה</CardTitle>\n            <div className=\"flex items-center space-x-reverse space-x-2\">\n              {getStatusIcon(question.status)}\n              <span className=\"text-sm font-medium\">{getStatusText(question.status)}</span>\n            </div>\n          </div>\n        </CardHeader>\n        <CardContent className=\"space-y-4\">\n          {/* Question metadata */}\n          <div className=\"flex flex-wrap gap-2 mb-4\">\n            <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n              {question.category}\n            </span>\n            {question.isUrgent && (\n              <span className=\"text-xs bg-red-100 text-red-600 px-2 py-1 rounded\">\n                דחוף\n              </span>\n            )}\n            {question.isPrivate && (\n              <span className=\"text-xs bg-purple-100 text-purple-600 px-2 py-1 rounded flex items-center\">\n                <Lock className=\"h-3 w-3 ml-1\" />\n                פרטי\n              </span>\n            )}\n          </div>\n\n          {/* Question content */}\n          <div className=\"bg-gray-50 p-4 rounded-lg\">\n            <p className=\"text-gray-800 leading-relaxed whitespace-pre-wrap\">{question.content}</p>\n          </div>\n\n          {/* Question details */}\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4 text-sm text-gray-600\">\n            <div className=\"flex items-center\">\n              <User className=\"h-4 w-4 ml-2\" />\n              <span>נשאל על ידי: {question.user?.fullName || \"משתמש\"}</span>\n            </div>\n            <div className=\"flex items-center\">\n              <Calendar className=\"h-4 w-4 ml-2\" />\n              <span>תאריך: {new Date(question.createdAt).toLocaleDateString('he-IL', {\n                year: 'numeric',\n                month: 'long',\n                day: 'numeric',\n                hour: '2-digit',\n                minute: '2-digit'\n              })}</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Answer Card */}\n      {question.answers && question.answers.length > 0 ? (\n        <Card className=\"shadow-card\">\n          <CardHeader>\n            <CardTitle className=\"text-lg text-green-700\">התשובה</CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4\">\n            {question.answers.map((answer) => (\n              <div key={answer.id}>\n                <div className=\"bg-green-50 p-4 rounded-lg border-r-4 border-green-500\">\n                  <p className=\"text-gray-800 leading-relaxed whitespace-pre-wrap\">{answer.content}</p>\n                </div>\n                \n                <div className=\"flex items-center justify-between text-sm text-gray-600 mt-2\">\n                  <div className=\"flex items-center\">\n                    <User className=\"h-4 w-4 ml-2\" />\n                    <span>נענה על ידי: {answer.answeredBy}</span>\n                  </div>\n                  <div className=\"flex items-center\">\n                    <Calendar className=\"h-4 w-4 ml-2\" />\n                    <span>תאריך תשובה: {new Date(answer.createdAt).toLocaleDateString('he-IL', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}</span>\n                  </div>\n                </div>\n                \n                {answer.updatedAt && answer.updatedAt !== answer.createdAt && (\n                  <div className=\"text-xs text-gray-500 mt-1\">\n                    עודכן: {new Date(answer.updatedAt).toLocaleDateString('he-IL', {\n                      year: 'numeric',\n                      month: 'long',\n                      day: 'numeric',\n                      hour: '2-digit',\n                      minute: '2-digit'\n                    })}\n                  </div>\n                )}\n              </div>\n            ))}\n          </CardContent>\n        </Card>\n      ) : question.status === \"pending\" ? (\n        <Card className=\"shadow-card\">\n          <CardContent className=\"p-6 text-center\">\n            <Clock className=\"h-12 w-12 text-yellow-500 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-600 mb-2\">ממתין לתשובה</h3>\n            <p className=\"text-gray-500\">השאלה נמצאת בתהליך עיבוד ותענה בהקדם האפשרי</p>\n          </CardContent>\n        </Card>\n      ) : null}\n\n      {/* Back Button */}\n      <div className=\"pt-4\">\n        <Button\n          onClick={() => navigate(\"/questions\")}\n          className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n        >\n          חזור לרשימת השאלות\n        </Button>\n      </div>\n    </div>\n  );\n}","size_bytes":8603},"client/src/pages/Questions.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { AskRabbiModal } from \"@/components/AskRabbiModal\";\nimport { MessageCircleQuestion, Search, Plus, CheckCircle, Clock, AlertCircle, Lock, Filter, ArrowUpDown, Bell } from \"lucide-react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport type { Question } from \"@shared/schema\";\n\nexport default function Questions() {\n  const { user } = useAuth();\n  const [, navigate] = useLocation();\n  const queryClient = useQueryClient();\n  const [showAskRabbi, setShowAskRabbi] = useState(false);\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n  const [filterBy, setFilterBy] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n\n  // Get public answered questions for all users + user's own questions\n  const { data: publicQuestions, isLoading: publicLoading } = useQuery({\n    queryKey: [\"/api/questions\"],\n    enabled: !!user,\n  }) as { data: Question[] | undefined; isLoading: boolean };\n\n  const { data: userQuestions, isLoading: userLoading } = useQuery({\n    queryKey: [\"/api/questions/user\", user?.id],\n    enabled: !!user,\n  }) as { data: Question[] | undefined; isLoading: boolean };\n\n  const { data: searchResults } = useQuery({\n    queryKey: [\"/api/questions/search\", `q=${searchQuery}`],\n    enabled: searchQuery.length > 2,\n  }) as { data: Question[] | undefined };\n\n  const isLoading = publicLoading || userLoading;\n  \n  // Combine public questions with user's own questions (avoiding duplicates)\n  const allQuestions = publicQuestions && userQuestions ? [\n    ...publicQuestions,\n    ...userQuestions.filter(uq => !publicQuestions.some(pq => pq.id === uq.id))\n  ] : (publicQuestions || userQuestions || []);\n\n  // Filter and sort questions\n  let displayQuestions = searchQuery.length > 2 ? searchResults : allQuestions;\n  \n  if (displayQuestions) {\n    // Apply filters\n    displayQuestions = displayQuestions.filter(question => {\n      if (filterBy === \"mine\" && question.userId !== user?.id) return false;\n      if (filterBy === \"unanswered\" && question.status !== \"pending\") return false;\n      if (categoryFilter !== \"all\" && question.category !== categoryFilter) return false;\n      return true;\n    });\n\n    // Apply sorting\n    displayQuestions = [...displayQuestions].sort((a, b) => {\n      switch (sortBy) {\n        case \"newest\":\n          return new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime();\n        case \"oldest\":\n          return new Date(a.createdAt).getTime() - new Date(b.createdAt).getTime();\n        case \"category\":\n          return a.category.localeCompare(b.category, 'he');\n        default:\n          return 0;\n      }\n    });\n  }\n\n  const getStatusIcon = (status: string) => {\n    switch (status) {\n      case \"answered\":\n        return <CheckCircle className=\"h-4 w-4 text-green-500\" />;\n      case \"pending\":\n        return <Clock className=\"h-4 w-4 text-yellow-500\" />;\n      default:\n        return <AlertCircle className=\"h-4 w-4 text-gray-500\" />;\n    }\n  };\n\n  const getStatusText = (status: string) => {\n    switch (status) {\n      case \"answered\":\n        return \"נענתה\";\n      case \"pending\":\n        return \"ממתין לתשובה\";\n      case \"closed\":\n        return \"סגורה\";\n      default:\n        return \"לא ידוע\";\n    }\n  };\n\n  // Mark question answer as viewed\n  const markQuestionAnswerViewed = useMutation({\n    mutationFn: async (questionId: string) => {\n      return apiRequest(`/api/questions/${questionId}/mark-answer-viewed`, {\n        method: \"POST\"\n      });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions/user\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/questions\"] });\n    }\n  });\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between\">\n        <h1 className=\"text-xl font-bold text-gray-800\">שאל את הרב</h1>\n        <Button\n          onClick={() => setShowAskRabbi(true)}\n          className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n          size=\"sm\"\n        >\n          <Plus className=\"h-4 w-4 ml-2\" />\n          שאלה חדשה\n        </Button>\n      </div>\n\n      {/* Search and Filters */}\n      <div className=\"space-y-3\">\n        <div className=\"relative\">\n          <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"חפש שאלות...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pr-10 text-right\"\n          />\n        </div>\n        \n        <div className=\"flex flex-wrap gap-2\">\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"w-[140px]\">\n              <ArrowUpDown className=\"h-4 w-4 ml-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"newest\">החדשות ביותר</SelectItem>\n              <SelectItem value=\"oldest\">הישנות ביותר</SelectItem>\n              <SelectItem value=\"category\">לפי קטגוריה</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={filterBy} onValueChange={setFilterBy}>\n            <SelectTrigger className=\"w-[120px]\">\n              <Filter className=\"h-4 w-4 ml-2\" />\n              <SelectValue />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">הכל</SelectItem>\n              <SelectItem value=\"mine\">רק שלי</SelectItem>\n              <SelectItem value=\"unanswered\">לא נענו</SelectItem>\n            </SelectContent>\n          </Select>\n\n          <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n            <SelectTrigger className=\"w-[120px]\">\n              <SelectValue placeholder=\"קטגוריה\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">כל הקטגוריות</SelectItem>\n              <SelectItem value=\"שבת וחגים\">שבת וחגים</SelectItem>\n              <SelectItem value=\"כשרות\">כשרות</SelectItem>\n              <SelectItem value=\"שיטור ובטחון\">שיטור ובטחון</SelectItem>\n              <SelectItem value=\"תפילה\">תפילה</SelectItem>\n              <SelectItem value=\"אחר\">אחר</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n      </div>\n\n      {/* Questions List */}\n      <div className=\"space-y-3\">\n        {isLoading ? (\n          <div className=\"text-center py-8\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n            <p className=\"text-gray-600\">טוען שאלות...</p>\n          </div>\n        ) : displayQuestions && displayQuestions.length > 0 ? (\n          displayQuestions.map((question) => (\n            <Card \n              key={question.id} \n              className=\"shadow-card cursor-pointer hover:shadow-lg transition-shadow relative\"\n              onClick={() => {\n                if (question.status === \"answered\") {\n                  // Mark as viewed if it has new answer\n                  if ((question as any).hasNewAnswer && question.userId === user?.id) {\n                    markQuestionAnswerViewed.mutate(question.id);\n                  }\n                  navigate(`/questions/${question.id}`);\n                }\n              }}\n            >\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-2\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center mb-2 gap-2\">\n                      <span className=\"text-xs bg-gray-100 text-gray-600 px-2 py-1 rounded\">\n                        {question.category}\n                      </span>\n                      {/* Show notification badge for answered questions with new answers */}\n                      {question.status === \"answered\" && \n                       (question as any).hasNewAnswer && \n                       question.userId === user?.id && (\n                        <Badge variant=\"destructive\" className=\"text-xs flex items-center gap-1\">\n                          <Bell className=\"h-3 w-3\" />\n                          תשובה חדשה!\n                        </Badge>\n                      )}\n                    </div>\n                    <p className=\"text-gray-800 mb-3 line-clamp-3\">{question.content}</p>\n                    <div className=\"flex items-center justify-between text-xs text-gray-500\">\n                      <div className=\"flex items-center\">\n                        {getStatusIcon(question.status)}\n                        <span className=\"mr-1\">{getStatusText(question.status)}</span>\n                        {question.status === \"answered\" && (\n                          <span className=\"mr-2 text-blue-600 cursor-pointer\">לחץ לצפייה</span>\n                        )}\n                      </div>\n                      <span>{new Date(question.createdAt).toLocaleDateString('he-IL')}</span>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))\n        ) : (\n          <div className=\"text-center py-8\">\n            <MessageCircleQuestion className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n            <h3 className=\"text-lg font-medium text-gray-600 mb-2\">\n              {searchQuery ? \"לא נמצאו תוצאות\" : \"אין שאלות עדיין\"}\n            </h3>\n            <p className=\"text-gray-500 mb-4\">\n              {searchQuery ? \"נסה מונח חיפוש אחר\" : \"התחל בשאילת השאלה הראשונה שלך\"}\n            </p>\n            {!searchQuery && (\n              <Button\n                onClick={() => setShowAskRabbi(true)}\n                className=\"bg-police-blue hover:bg-police-blue-dark text-white\"\n              >\n                שאל את הרב\n              </Button>\n            )}\n          </div>\n        )}\n      </div>\n\n      <AskRabbiModal open={showAskRabbi} onOpenChange={setShowAskRabbi} />\n    </div>\n  );\n}\n","size_bytes":10732},"client/src/pages/Register.tsx":{"content":"import { useState } from \"react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useLocation } from \"wouter\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport logo from \"@assets/bf4d69d1-82e0-4b41-bc8c-ecca5ca6a895_1753886576969.jpeg\";\n\nexport default function Register() {\n  const [_, setLocation] = useLocation();\n  const { toast } = useToast();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const form = useForm<InsertUser>({\n    resolver: zodResolver(insertUserSchema),\n    defaultValues: {\n      fullName: \"\",\n      personalId: \"\",\n      phone: \"\",\n      email: \"\",\n      password: \"\",\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: InsertUser) => {\n      const response = await fetch(\"/api/auth/register\", {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify(userData),\n      });\n      if (!response.ok) {\n        const error = await response.json();\n        throw new Error(error.message);\n      }\n      return response.json();\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      toast({\n        title: \"בקשה נשלחה בהצלחה\",\n        description: \"בקשתך נשלחה לאישור מנהל המערכת. תקבל הודעה כשהבקשה תאושר.\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"שגיאה ברישום\",\n        description: error.message || \"אירעה שגיאה בעת שליחת הבקשה\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertUser) => {\n    registerMutation.mutate(data);\n  };\n\n  if (isSubmitted) {\n    return (\n      <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4\">\n        <Card className=\"w-full max-w-md mx-auto\">\n          <CardHeader className=\"text-center\">\n            <img src={logo} alt=\"לוגו רבנות המשטרה\" className=\"h-16 w-auto mx-auto mb-4\" />\n            <CardTitle className=\"text-green-600\">✓ בקשה נשלחה בהצלחה</CardTitle>\n          </CardHeader>\n          <CardContent className=\"text-center space-y-4\">\n            <p className=\"text-gray-600\">\n              בקשתך נשלחה למנהל המערכת לאישור.\n            </p>\n            <p className=\"text-sm text-gray-500\">\n              תקבל הודעה כשהבקשה תאושר ותוכל להתחבר לאפליקציה.\n            </p>\n            <Button \n              onClick={() => setLocation(\"/login\")} \n              variant=\"outline\"\n              className=\"w-full\"\n            >\n              יש לי כבר חשבון - התחבר\n            </Button>\n          </CardContent>\n        </Card>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-blue-50 to-blue-100 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md mx-auto\">\n        <CardHeader className=\"text-center\">\n          <img src={logo} alt=\"לוגו רבנות המשטרה\" className=\"h-16 w-auto mx-auto mb-4\" />\n          <CardTitle className=\"text-xl\">רישום לרבנות המשטרה</CardTitle>\n          <CardDescription className=\"text-gray-600\">\n            מלא את הפרטים הנדרשים להצטרפות למערכת\n          </CardDescription>\n        </CardHeader>\n        \n        <CardContent>\n          <Alert className=\"mb-6 border-blue-200 bg-blue-50\">\n            <AlertDescription className=\"text-sm text-blue-800\">\n              <strong>הודעת פרטיות:</strong> הנתונים שלך ישמשו אך ורק לצורך אימות המשתמש ולא יועברו לגורמים חיצוניים. \n              המידע נשמר בצורה מאובטחת במערכת המשטרה.\n            </AlertDescription>\n          </Alert>\n\n          <Form {...form}>\n            <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n              <FormField\n                control={form.control}\n                name=\"fullName\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">שם מלא *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"הכנס שם מלא\"\n                        className=\"text-right\"\n                        dir=\"rtl\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"personalId\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">מספר אישי *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"הכנס מספר אישי (7 ספרות)\"\n                        className=\"text-right\"\n                        dir=\"rtl\"\n                        maxLength={7}\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"phone\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">מספר טלפון *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        placeholder=\"05X-XXXXXXX\"\n                        className=\"text-right\"\n                        dir=\"rtl\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"email\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">דואר אלקטרוני *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"email\"\n                        placeholder=\"example@email.com\"\n                        className=\"text-right\"\n                        dir=\"ltr\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={form.control}\n                name=\"password\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel className=\"text-right\">בחר סיסמה *</FormLabel>\n                    <FormControl>\n                      <Input \n                        {...field} \n                        type=\"password\"\n                        placeholder=\"בחר סיסמה (לפחות 6 תווים)\"\n                        className=\"text-right\"\n                        dir=\"rtl\"\n                      />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Button \n                type=\"submit\" \n                className=\"w-full bg-blue-600 hover:bg-blue-700 text-white\"\n                disabled={registerMutation.isPending}\n              >\n                {registerMutation.isPending ? \"שולח בקשה...\" : \"שלח בקשה לאישור\"}\n              </Button>\n            </form>\n          </Form>\n\n          <div className=\"mt-6 text-center\">\n            <button\n              onClick={() => setLocation(\"/login\")}\n              className=\"text-blue-600 hover:text-blue-800 text-sm underline\"\n            >\n              כבר יש לי חשבון - התחבר\n            </button>\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","size_bytes":8710},"client/src/pages/Synagogues.tsx":{"content":"import { useState, useMemo } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { MapPin, Search, Filter, Navigation, Clock, SortAsc } from \"lucide-react\";\nimport { SiWaze, SiGooglemaps } from \"react-icons/si\";\nimport type { Synagogue } from \"@shared/schema\";\n\nexport default function Synagogues() {\n  const { data: synagogues, isLoading } = useQuery({\n    queryKey: [\"/api/synagogues\"],\n  }) as { data: Synagogue[] | undefined; isLoading: boolean };\n\n  // Search and filter states\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedCity, setSelectedCity] = useState(\"\");\n  const [selectedRegion, setSelectedRegion] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"name\");\n  const [timeFilter, setTimeFilter] = useState(\"\");\n  const [userLocation, setUserLocation] = useState<{ latitude: number; longitude: number } | null>(null);\n\n  // Get user location\n  const getCurrentLocation = () => {\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition(\n        (position) => {\n          setUserLocation({\n            latitude: position.coords.latitude,\n            longitude: position.coords.longitude\n          });\n        },\n        (error) => {\n          console.error(\"Error getting location:\", error);\n        }\n      );\n    }\n  };\n\n  // Extract unique cities and regions from synagogues\n  const cities = useMemo(() => {\n    if (!synagogues) return [];\n    const citySet = new Set<string>();\n    synagogues.forEach(synagogue => {\n      // Extract city from address (assuming format like \"רחוב 123, עיר\")\n      const addressParts = synagogue.address.split(',');\n      if (addressParts.length > 1) {\n        const city = addressParts[addressParts.length - 1].trim();\n        citySet.add(city);\n      }\n    });\n    return Array.from(citySet).sort();\n  }, [synagogues]);\n\n  // Calculate distance between two points\n  const calculateDistance = (lat1: number, lon1: number, lat2: number, lon2: number) => {\n    const R = 6371; // Earth's radius in kilometers\n    const dLat = (lat2 - lat1) * Math.PI / 180;\n    const dLon = (lon2 - lon1) * Math.PI / 180;\n    const a = Math.sin(dLat/2) * Math.sin(dLat/2) +\n      Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) *\n      Math.sin(dLon/2) * Math.sin(dLon/2);\n    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\n    return R * c;\n  };\n\n  // Filter and sort synagogues\n  const filteredAndSortedSynagogues = useMemo(() => {\n    if (!synagogues) return [];\n\n    let filtered = synagogues.filter(synagogue => {\n      // Text search\n      const searchLower = searchTerm.toLowerCase();\n      const matchesSearch = !searchTerm || \n        synagogue.name.toLowerCase().includes(searchLower) ||\n        synagogue.address.toLowerCase().includes(searchLower) ||\n        (synagogue.contact && synagogue.contact.toLowerCase().includes(searchLower)) ||\n        (synagogue.notes && synagogue.notes.toLowerCase().includes(searchLower));\n\n      // City filter\n      const matchesCity = !selectedCity || selectedCity === \"all\" || \n        synagogue.address.toLowerCase().includes(selectedCity.toLowerCase());\n\n      // Region filter (basic implementation based on common cities)\n      let matchesRegion = true;\n      if (selectedRegion && selectedRegion !== \"all\") {\n        const address = synagogue.address.toLowerCase();\n        switch (selectedRegion) {\n          case \"center\":\n            matchesRegion = address.includes(\"תל אביב\") || address.includes(\"רמת גן\") || \n                          address.includes(\"גבעתיים\") || address.includes(\"חולון\") || \n                          address.includes(\"בת ים\") || address.includes(\"רמת השרון\");\n            break;\n          case \"jerusalem\":\n            matchesRegion = address.includes(\"ירושלים\") || address.includes(\"בית שמש\") ||\n                          address.includes(\"מעלה אדומים\");\n            break;\n          case \"north\":\n            matchesRegion = address.includes(\"חיפה\") || address.includes(\"נהריה\") || \n                          address.includes(\"עכו\") || address.includes(\"צפת\") ||\n                          address.includes(\"טבריה\") || address.includes(\"נצרת\");\n            break;\n          case \"south\":\n            matchesRegion = address.includes(\"באר שבע\") || address.includes(\"אשדוד\") || \n                          address.includes(\"אשקלון\") || address.includes(\"אילת\") ||\n                          address.includes(\"קריית גת\");\n            break;\n        }\n      }\n\n      // Time filter\n      let matchesTime = true;\n      if (timeFilter && timeFilter !== \"all\") {\n        switch (timeFilter) {\n          case \"morning\":\n            matchesTime = !!synagogue.shacharit;\n            break;\n          case \"afternoon\":\n            matchesTime = !!synagogue.mincha;\n            break;\n          case \"evening\":\n            matchesTime = !!synagogue.maariv;\n            break;\n          case \"all-prayers\":\n            matchesTime = !!(synagogue.shacharit && synagogue.mincha && synagogue.maariv);\n            break;\n        }\n      }\n\n      return matchesSearch && matchesCity && matchesRegion && matchesTime;\n    });\n\n    // Sort\n    filtered.sort((a, b) => {\n      switch (sortBy) {\n        case \"name\":\n          return a.name.localeCompare(b.name, 'he');\n        case \"city\":\n          return a.address.localeCompare(b.address, 'he');\n        case \"distance\":\n          if (!userLocation) return 0;\n          const distA = a.latitude && a.longitude ? \n            calculateDistance(userLocation.latitude, userLocation.longitude, parseFloat(a.latitude), parseFloat(a.longitude)) : \n            Infinity;\n          const distB = b.latitude && b.longitude ? \n            calculateDistance(userLocation.latitude, userLocation.longitude, parseFloat(b.latitude), parseFloat(b.longitude)) : \n            Infinity;\n          return distA - distB;\n        default:\n          return 0;\n      }\n    });\n\n    return filtered;\n  }, [synagogues, searchTerm, selectedCity, selectedRegion, sortBy, timeFilter, userLocation]);\n\n  const openWaze = (address: string) => {\n    const wazeUrl = `https://waze.com/ul?q=${encodeURIComponent(address)}`;\n    window.open(wazeUrl, '_blank');\n  };\n\n  const openMaps = (address: string, latitude?: string, longitude?: string) => {\n    let mapsUrl: string;\n    if (latitude && longitude) {\n      mapsUrl = `https://www.google.com/maps/search/?api=1&query=${latitude},${longitude}`;\n    } else {\n      mapsUrl = `https://www.google.com/maps/search/?api=1&query=${encodeURIComponent(address)}`;\n    }\n    window.open(mapsUrl, '_blank');\n  };\n\n  // Clear filters\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setSelectedCity(\"\");\n    setSelectedRegion(\"\");\n    setSortBy(\"name\");\n    setTimeFilter(\"\");\n    setUserLocation(null);\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <div className=\"flex items-center justify-between mb-4\">\n        <h1 className=\"text-xl font-bold text-gray-800\">בתי כנסת משטרתיים</h1>\n        <Badge variant=\"outline\" className=\"text-xs\">\n          {filteredAndSortedSynagogues.length} {filteredAndSortedSynagogues.length === 1 ? 'בית כנסת' : 'בתי כנסת'}\n        </Badge>\n      </div>\n\n      {/* Search and Filter Controls */}\n      <div className=\"space-y-4 bg-white p-4 rounded-lg shadow-sm border\">\n        {/* Search Bar */}\n        <div className=\"relative\">\n          <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            placeholder=\"חפש בית כנסת לפי שם, כתובת או איש קשר...\"\n            value={searchTerm}\n            onChange={(e) => setSearchTerm(e.target.value)}\n            className=\"pr-10 text-right\"\n            data-testid=\"input-search-synagogue\"\n          />\n        </div>\n\n        {/* Filter Controls */}\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3\">\n          {/* Region Filter */}\n          <Select value={selectedRegion} onValueChange={setSelectedRegion}>\n            <SelectTrigger className=\"text-right\" data-testid=\"select-region\">\n              <SelectValue placeholder=\"אזור\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">כל האזורים</SelectItem>\n              <SelectItem value=\"center\">מרכז</SelectItem>\n              <SelectItem value=\"jerusalem\">ירושלים והסביבה</SelectItem>\n              <SelectItem value=\"north\">צפון</SelectItem>\n              <SelectItem value=\"south\">דרום</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* City Filter */}\n          <Select value={selectedCity} onValueChange={setSelectedCity}>\n            <SelectTrigger className=\"text-right\" data-testid=\"select-city\">\n              <SelectValue placeholder=\"עיר\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">כל הערים</SelectItem>\n              {cities.map(city => (\n                <SelectItem key={city} value={city}>{city}</SelectItem>\n              ))}\n            </SelectContent>\n          </Select>\n\n          {/* Time Filter */}\n          <Select value={timeFilter} onValueChange={setTimeFilter}>\n            <SelectTrigger className=\"text-right\" data-testid=\"select-time-filter\">\n              <SelectValue placeholder=\"זמני תפילה\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"all\">כל זמני התפילה</SelectItem>\n              <SelectItem value=\"morning\">שחרית בלבד</SelectItem>\n              <SelectItem value=\"afternoon\">מנחה בלבד</SelectItem>\n              <SelectItem value=\"evening\">מעריב בלבד</SelectItem>\n              <SelectItem value=\"all-prayers\">כל התפילות</SelectItem>\n            </SelectContent>\n          </Select>\n\n          {/* Sort Options */}\n          <Select value={sortBy} onValueChange={setSortBy}>\n            <SelectTrigger className=\"text-right\" data-testid=\"select-sort\">\n              <SelectValue placeholder=\"מיון\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectItem value=\"name\">לפי שם</SelectItem>\n              <SelectItem value=\"city\">לפי עיר</SelectItem>\n              <SelectItem value=\"distance\">לפי מרחק</SelectItem>\n            </SelectContent>\n          </Select>\n        </div>\n\n        {/* Action Buttons */}\n        <div className=\"flex gap-2 justify-between\">\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={getCurrentLocation}\n              className=\"flex items-center gap-2\"\n              data-testid=\"button-get-location\"\n            >\n              <Navigation className=\"h-4 w-4\" />\n              מצא קרוב אלי\n            </Button>\n            {userLocation && (\n              <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                <MapPin className=\"h-3 w-3\" />\n                מיקום זוהה\n              </Badge>\n            )}\n          </div>\n          \n          {(searchTerm || selectedCity || selectedRegion || timeFilter || sortBy !== \"name\") && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearFilters}\n              className=\"text-gray-500 hover:text-gray-700\"\n              data-testid=\"button-clear-filters\"\n            >\n              נקה סינון\n            </Button>\n          )}\n        </div>\n      </div>\n\n      {isLoading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">טוען בתי כנסת...</p>\n        </div>\n      ) : filteredAndSortedSynagogues.length > 0 ? (\n        <div className=\"space-y-4\">\n          {filteredAndSortedSynagogues.map((synagogue) => {\n            // Calculate distance if user location is available\n            const distance = userLocation && synagogue.latitude && synagogue.longitude ?\n              calculateDistance(\n                userLocation.latitude, \n                userLocation.longitude, \n                parseFloat(synagogue.latitude), \n                parseFloat(synagogue.longitude)\n              ).toFixed(1) : null;\n\n            return (\n            <Card key={synagogue.id} className=\"shadow-card\" data-testid={`card-synagogue-${synagogue.id}`}>\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start justify-between mb-3\">\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2 mb-1\">\n                      <h3 className=\"font-bold text-gray-800\">{synagogue.name}</h3>\n                      {distance && (\n                        <Badge variant=\"outline\" className=\"text-xs\">\n                          {distance} ק\"מ\n                        </Badge>\n                      )}\n                    </div>\n                    <div className=\"flex items-center text-sm text-gray-600 mb-2\">\n                      <MapPin className=\"h-4 w-4 ml-1\" />\n                      <span>{synagogue.address}</span>\n                    </div>\n                    {(synagogue.contact || synagogue.contactPhone) && (\n                      <div className=\"text-sm text-gray-600\">\n                        <strong>איש קשר:</strong>\n                        {synagogue.contact && <span> {synagogue.contact}</span>}\n                        {synagogue.contact && synagogue.contactPhone && <span> | </span>}\n                        {synagogue.contactPhone && <span>טלפון: {synagogue.contactPhone}</span>}\n                      </div>\n                    )}\n                    {synagogue.notes && (\n                      <p className=\"text-sm text-gray-600 mt-1\">{synagogue.notes}</p>\n                    )}\n                  </div>\n                  <div className=\"flex space-x-reverse space-x-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => openWaze(synagogue.address)}\n                      className=\"text-blue-600 hover:bg-blue-50 flex items-center space-x-reverse space-x-1\"\n                      title=\"פתח בוויז\"\n                    >\n                      <SiWaze className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Waze</span>\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"ghost\"\n                      onClick={() => openMaps(synagogue.address, synagogue.latitude || undefined, synagogue.longitude || undefined)}\n                      className=\"text-green-600 hover:bg-green-50 flex items-center space-x-reverse space-x-1\"\n                      title=\"פתח במפות גוגל\"\n                    >\n                      <SiGooglemaps className=\"h-4 w-4\" />\n                      <span className=\"text-xs\">Maps</span>\n                    </Button>\n                  </div>\n                </div>\n\n                {/* Prayer Times */}\n                {(synagogue.shacharit || synagogue.mincha || synagogue.maariv) && (\n                  <div className=\"grid grid-cols-3 gap-2 text-xs\">\n                    {synagogue.shacharit && (\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <p className=\"text-gray-600\">שחרית</p>\n                        <p className=\"font-bold text-gray-800\">{synagogue.shacharit}</p>\n                      </div>\n                    )}\n                    {synagogue.mincha && (\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <p className=\"text-gray-600\">מנחה</p>\n                        <p className=\"font-bold text-gray-800\">{synagogue.mincha}</p>\n                      </div>\n                    )}\n                    {synagogue.maariv && (\n                      <div className=\"text-center p-2 bg-gray-50 rounded\">\n                        <p className=\"text-gray-600\">מעריב</p>\n                        <p className=\"font-bold text-gray-800\">{synagogue.maariv}</p>\n                      </div>\n                    )}\n                  </div>\n                )}\n              </CardContent>\n            </Card>\n            );\n          })}\n        </div>\n      ) : synagogues && synagogues.length > 0 ? (\n        <div className=\"text-center py-8\">\n          <Search className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-600 mb-2\">לא נמצאו בתי כנסת מתאימים</h3>\n          <p className=\"text-gray-500 mb-4\">נסה לשנות את הפילטרים או החיפוש</p>\n          <Button\n            variant=\"outline\"\n            onClick={clearFilters}\n            className=\"mx-auto\"\n            data-testid=\"button-clear-filters-empty\"\n          >\n            נקה את כל הפילטרים\n          </Button>\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <MapPin className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-600 mb-2\">אין בתי כנסת זמינים</h3>\n          <p className=\"text-gray-500\">בתי כנסת יתווספו בקרוב</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":17829},"client/src/pages/Videos.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Play, ExternalLink } from \"lucide-react\";\nimport type { Video } from \"@shared/schema\";\n\n// Extract YouTube ID from various URL formats or use as-is if it's already an ID\nconst extractYouTubeId = (input: string): string => {\n  // If it's already a clean ID (11 characters, alphanumeric), use it\n  if (/^[a-zA-Z0-9_-]{11}$/.test(input)) {\n    return input;\n  }\n\n  // Try to extract from various YouTube URL formats\n  const patterns = [\n    /(?:youtube\\.com\\/watch\\?v=|youtu\\.be\\/|youtube\\.com\\/embed\\/)([a-zA-Z0-9_-]{11})/,\n    /youtube\\.com\\/v\\/([a-zA-Z0-9_-]{11})/,\n    /youtube\\.com\\/watch\\?.*v=([a-zA-Z0-9_-]{11})/\n  ];\n\n  for (const pattern of patterns) {\n    const match = input.match(pattern);\n    if (match) {\n      return match[1];\n    }\n  }\n\n  // If no pattern matches, return the input as-is (fallback)\n  return input;\n};\n\nexport default function Videos() {\n  const { data: videos, isLoading } = useQuery({\n    queryKey: [\"/api/videos\"],\n  }) as { data: Video[] | undefined; isLoading: boolean };\n\n  const openYouTube = (youtubeIdOrUrl: string) => {\n    const videoId = extractYouTubeId(youtubeIdOrUrl);\n    const youtubeUrl = `https://www.youtube.com/watch?v=${videoId}`;\n    window.open(youtubeUrl, '_blank');\n  };\n\n  const getYouTubeThumbnail = (youtubeIdOrUrl: string) => {\n    const videoId = extractYouTubeId(youtubeIdOrUrl);\n    return `https://img.youtube.com/vi/${videoId}/mqdefault.jpg`;\n  };\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      <h1 className=\"text-xl font-bold text-gray-800\">סרטוני הרבנות</h1>\n\n      {isLoading ? (\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto mb-4\"></div>\n          <p className=\"text-gray-600\">טוען סרטונים...</p>\n        </div>\n      ) : videos && videos.length > 0 ? (\n        <div className=\"space-y-4\">\n          {videos.map((video) => (\n            <Card key={video.id} className=\"shadow-card\">\n              <CardContent className=\"p-4\">\n                <div className=\"flex items-start space-x-reverse space-x-3\">\n                  {/* Thumbnail */}\n                  <div className=\"relative flex-shrink-0\">\n                    <img\n                      src={video.thumbnail || getYouTubeThumbnail(video.youtubeId)}\n                      alt={video.title}\n                      className=\"w-24 h-16 object-cover rounded\"\n                      onError={(e) => {\n                        const img = e.target as HTMLImageElement;\n                        img.src = getYouTubeThumbnail(video.youtubeId);\n                      }}\n                    />\n                    <div className=\"absolute inset-0 flex items-center justify-center\">\n                      <div className=\"bg-black bg-opacity-70 rounded-full p-2\">\n                        <Play className=\"h-4 w-4 text-white\" />\n                      </div>\n                    </div>\n                  </div>\n\n                  {/* Content */}\n                  <div className=\"flex-1\">\n                    <h3 className=\"font-bold text-gray-800 mb-1\">{video.title}</h3>\n                    {video.description && (\n                      <p className=\"text-sm text-gray-600 mb-2 line-clamp-2\">\n                        {video.description}\n                      </p>\n                    )}\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-xs text-gray-500\">\n                        {video.publishedAt && new Date(video.publishedAt).toLocaleDateString('he-IL')}\n                      </span>\n                      <Button\n                        size=\"sm\"\n                        onClick={() => openYouTube(video.youtubeId)}\n                        className=\"bg-red-600 hover:bg-red-700 text-white\"\n                      >\n                        <ExternalLink className=\"h-3 w-3 ml-1\" />\n                        צפה\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <div className=\"text-center py-8\">\n          <Play className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n          <h3 className=\"text-lg font-medium text-gray-600 mb-2\">אין סרטונים זמינים</h3>\n          <p className=\"text-gray-500\">סרטונים יתווספו בקרוב</p>\n        </div>\n      )}\n    </div>\n  );\n}\n","size_bytes":4626},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6 text-center\">\n          <div className=\"flex justify-center mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n          </div>\n          <h1 className=\"text-2xl font-bold text-gray-900 mb-4\">דף לא נמצא</h1>\n\n          <p className=\"mt-4 text-sm text-gray-600 mb-6\">\n            הדף שחיפשת לא קיים במערכת\n          </p>\n          \n          <Button \n            onClick={() => {\n              // Clear all data and go to landing page\n              localStorage.clear();\n              window.location.href = \"/\";\n            }}\n            className=\"w-full bg-police-blue hover:bg-police-blue-dark text-white\"\n          >\n            חזור לדף הראשי\n          </Button>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":1157},"client/src/utils/hebrewDate.ts":{"content":"// Hebrew date conversion utilities\n\nconst hebrewDays = ['א', 'ב', 'ג', 'ד', 'ה', 'ו', 'ש'];\nconst hebrewMonths = [\n  'תשרי', 'חשון', 'כסלו', 'טבת', 'שבט', 'אדר', 'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'\n];\n\nconst hebrewNumbers = {\n  1: 'א', 2: 'ב', 3: 'ג', 4: 'ד', 5: 'ה', 6: 'ו', 7: 'ז', 8: 'ח', 9: 'ט', 10: 'י',\n  11: 'יא', 12: 'יב', 13: 'יג', 14: 'יד', 15: 'טו', 16: 'טז', 17: 'יז', 18: 'יח', 19: 'יט', 20: 'כ',\n  21: 'כא', 22: 'כב', 23: 'כג', 24: 'כד', 25: 'כה', 26: 'כו', 27: 'כז', 28: 'כח', 29: 'כט', 30: 'ל'\n};\n\nfunction getHebrewNumber(num: number): string {\n  return hebrewNumbers[num as keyof typeof hebrewNumbers] || num.toString();\n}\n\nfunction getHebrewYear(year: number): string {\n  // Convert Gregorian year to approximate Hebrew year\n  const hebrewYear = year + 3760;\n  \n  // Convert to Hebrew letters format (simplified)\n  const thousands = Math.floor(hebrewYear / 1000);\n  const remainder = hebrewYear % 1000;\n  const hundreds = Math.floor(remainder / 100);\n  const tens = Math.floor((remainder % 100) / 10);\n  const ones = remainder % 10;\n  \n  let result = '';\n  \n  // Add thousands (ה for 5000s)\n  if (thousands === 5) result += 'ה';\n  \n  // Add hundreds\n  if (hundreds > 0) {\n    const hundredsMap: { [key: number]: string } = {\n      1: 'ק', 2: 'ר', 3: 'ש', 4: 'ת', 5: 'תק', 6: 'תר', 7: 'תש', 8: 'תת', 9: 'תתק'\n    };\n    result += hundredsMap[hundreds] || '';\n  }\n  \n  // Add tens and ones\n  if (tens === 1 && ones === 5) {\n    result += 'טו'; // Special case for 15\n  } else if (tens === 1 && ones === 6) {\n    result += 'טז'; // Special case for 16\n  } else {\n    const tensMap: { [key: number]: string } = {\n      1: 'י', 2: 'כ', 3: 'ל', 4: 'מ', 5: 'נ', 6: 'ס', 7: 'ע', 8: 'פ', 9: 'צ'\n    };\n    if (tens > 0) result += tensMap[tens] || '';\n    \n    const onesMap: { [key: number]: string } = {\n      1: 'א', 2: 'ב', 3: 'ג', 4: 'ד', 5: 'ה', 6: 'ו', 7: 'ז', 8: 'ח', 9: 'ט'\n    };\n    if (ones > 0) result += onesMap[ones] || '';\n  }\n  \n  return result + '\"';\n}\n\nexport function getHebrewDate(): string {\n  const now = new Date();\n  const dayOfWeek = now.getDay(); // 0 = Sunday\n  const date = now.getDate();\n  const month = now.getMonth(); // 0-11\n  const year = now.getFullYear();\n  \n  // Get Hebrew day of week (Sunday = א)\n  const hebrewDay = hebrewDays[dayOfWeek];\n  \n  // Get Hebrew date\n  const hebrewDate = getHebrewNumber(date);\n  \n  // Get Hebrew month (approximate mapping)\n  const hebrewMonth = hebrewMonths[month];\n  \n  // Get Hebrew year\n  const hebrewYear = getHebrewYear(year);\n  \n  return `${hebrewDay} ${hebrewDate} ${hebrewMonth} ${hebrewYear}`;\n}\n\n// Format a Hebrew date from API response or date string using Hebcal API\nexport async function formatHebrewDate(dateInput: string | Date): Promise<string> {\n  try {\n    const date = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    // Call the accurate Hebrew date API (Hebcal)\n    const response = await fetch(`https://www.hebcal.com/converter?cfg=json&gy=${year}&gm=${month}&gd=${day}&g2h=1`);\n    \n    if (response.ok) {\n      const data = await response.json();\n      \n      if (data && data.hebrew) {\n        // Return the precise Hebrew date from Hebcal API\n        return data.hebrew;\n      }\n    }\n    \n    // If API fails, fallback to local calculation\n    return formatHebrewDateLocal(dateInput instanceof Date ? dateInput : new Date(dateInput));\n  } catch (error) {\n    console.error('Error formatting Hebrew date:', error);\n    return formatHebrewDateLocal(dateInput instanceof Date ? dateInput : new Date(dateInput));\n  }\n}\n\n// Local Hebrew date calculation as fallback\nfunction formatHebrewDateLocal(date: Date): string {\n  const dayOfWeek = date.getDay();\n  const dateNum = date.getDate();\n  const month = date.getMonth();\n  const year = date.getFullYear();\n  \n  const hebrewDays = ['א׳', 'ב׳', 'ג׳', 'ד׳', 'ה׳', 'ו׳', 'ש׳'];\n  \n  // Approximate Hebrew month mapping (Tishrei starts around September)\n  const hebrewMonths = [\n    'תשרי', 'חשוון', 'כסלו', 'טבת', 'שבט', 'אדר',\n    'ניסן', 'אייר', 'סיון', 'תמוז', 'אב', 'אלול'\n  ];\n  \n  const hebrewNumbers = {\n    1: 'א׳', 2: 'ב׳', 3: 'ג׳', 4: 'ד׳', 5: 'ה׳', 6: 'ו׳', 7: 'ז׳', 8: 'ח׳', 9: 'ט׳', 10: 'י׳',\n    11: 'יא׳', 12: 'יב׳', 13: 'יג׳', 14: 'יד׳', 15: 'טו׳', 16: 'טז׳', 17: 'יז׳', 18: 'יח׳', 19: 'יט׳', 20: 'כ׳',\n    21: 'כא׳', 22: 'כב׳', 23: 'כג׳', 24: 'כד׳', 25: 'כה׳', 26: 'כו׳', 27: 'כז׳', 28: 'כח׳', 29: 'כט׳', 30: 'ל׳'\n  };\n  \n  const hebrewDay = hebrewDays[dayOfWeek];\n  const hebrewDate = hebrewNumbers[dateNum as keyof typeof hebrewNumbers] || dateNum.toString();\n  \n  // Adjust month for Hebrew calendar (rough approximation)\n  let hebrewMonthIndex = (month + 6) % 12; // Rough conversion\n  const hebrewMonth = hebrewMonths[hebrewMonthIndex];\n  \n  return `${hebrewDay} ${hebrewDate} ${hebrewMonth} תשפ״ה`;\n}\n\n// Cache for Hebrew dates to avoid repeated API calls\nconst hebrewDateCache = new Map<string, string>();\n\n// Synchronous version that uses cache and API when needed\nexport function formatHebrewDateSync(dateInput: string | Date, jewishTimesData?: any): string {\n  try {\n    const inputDate = typeof dateInput === 'string' ? new Date(dateInput) : dateInput;\n    const today = new Date();\n    \n    // Create cache key\n    const cacheKey = `${inputDate.getFullYear()}-${inputDate.getMonth() + 1}-${inputDate.getDate()}`;\n    \n    // Check cache first\n    if (hebrewDateCache.has(cacheKey)) {\n      return hebrewDateCache.get(cacheKey)!;\n    }\n    \n    // Check if the input date is today and we have accurate jewish times data\n    if (jewishTimesData?.hebrewDate?.formatted && \n        inputDate.toDateString() === today.toDateString()) {\n      const result = jewishTimesData.hebrewDate.formatted;\n      hebrewDateCache.set(cacheKey, result);\n      return result;\n    }\n    \n    // For non-today dates, call API asynchronously and return immediate result\n    fetchAndCacheHebrewDate(inputDate, cacheKey);\n    \n    // Return immediate calculation while API loads in background\n    return formatHebrewDateLocal(inputDate);\n  } catch (error) {\n    console.error('Error formatting Hebrew date sync:', error);\n    return formatHebrewDateLocal(typeof dateInput === 'string' ? new Date(dateInput) : dateInput);\n  }\n}\n\n// Background function to fetch and cache Hebrew dates\nasync function fetchAndCacheHebrewDate(date: Date, cacheKey: string) {\n  try {\n    const year = date.getFullYear();\n    const month = date.getMonth() + 1;\n    const day = date.getDate();\n    \n    const response = await fetch(`https://www.hebcal.com/converter?cfg=json&gy=${year}&gm=${month}&gd=${day}&g2h=1`);\n    \n    if (response.ok) {\n      const data = await response.json();\n      if (data && data.hebrew) {\n        hebrewDateCache.set(cacheKey, data.hebrew);\n        // Trigger re-render if component is still mounted\n        window.dispatchEvent(new CustomEvent('hebrewDateUpdated', { detail: { cacheKey, date: data.hebrew } }));\n      }\n    }\n  } catch (error) {\n    console.error('Background Hebrew date fetch error:', error);\n  }\n}","size_bytes":7399},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-4 z-[100] flex max-h-screen w-full flex-col-reverse p-2 sm:bottom-4 sm:right-4 sm:top-auto sm:flex-col md:max-w-[320px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-3 pr-4 shadow-md transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full max-w-sm\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-xs font-medium\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-xs opacity-80\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4852},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-0.5 flex-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            {/* Hide close button - toasts auto-dismiss */}\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":814},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/DailyHalacha.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { BookOpen, Search, Calendar, Clock, Filter } from \"lucide-react\";\nimport type { DailyHalacha } from \"@shared/schema\";\n\nexport default function DailyHalachaPage() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [selectedDate, setSelectedDate] = useState(\"\");\n  const [sortBy, setSortBy] = useState(\"newest\");\n\n  const { data: halachot, isLoading } = useQuery({\n    queryKey: [\"/api/daily-halacha/all\"],\n  }) as { data: DailyHalacha[] | undefined; isLoading: boolean };\n\n  const { data: todayHalacha } = useQuery({\n    queryKey: [\"/api/daily-halacha\"],\n  }) as { data: DailyHalacha | undefined };\n\n  // Filter and sort halachot\n  const filteredAndSortedHalachot = halachot?.filter(halacha => {\n    const matchesSearch = !searchTerm || \n      halacha.content.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      (halacha.title && halacha.title.toLowerCase().includes(searchTerm.toLowerCase()));\n    \n    const matchesDate = !selectedDate || \n      new Date(halacha.date).toISOString().split('T')[0] === selectedDate;\n\n    return matchesSearch && matchesDate;\n  }).sort((a, b) => {\n    switch (sortBy) {\n      case \"newest\":\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      case \"oldest\":\n        return new Date(a.date).getTime() - new Date(b.date).getTime();\n      case \"title\":\n        return (a.title || \"\").localeCompare(b.title || \"\");\n      default:\n        return 0;\n    }\n  }) || [];\n\n  const clearFilters = () => {\n    setSearchTerm(\"\");\n    setSelectedDate(\"\");\n    setSortBy(\"newest\");\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"p-4 space-y-4\">\n        <div className=\"text-center py-8\">\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-police-blue mx-auto\"></div>\n          <p className=\"mt-4 text-gray-600\">טוען הלכות...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"p-4 space-y-4\">\n      {/* Header */}\n      <div className=\"flex items-center justify-between mb-4\">\n        <div className=\"flex items-center\">\n          <BookOpen className=\"h-6 w-6 text-purple-600 ml-2\" />\n          <h1 className=\"text-2xl font-bold text-gray-800\">הלכה יומית לשוטרים</h1>\n        </div>\n      </div>\n\n      {/* Today's Halacha - Highlighted */}\n      {todayHalacha && (\n        <Card className=\"shadow-lg border-2 border-purple-200 bg-gradient-to-r from-purple-50 to-blue-50\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center mb-4\">\n              <Badge variant=\"default\" className=\"bg-purple-600 text-white mb-2\">\n                הלכה יומית - היום\n              </Badge>\n            </div>\n            {todayHalacha.title && (\n              <h2 className=\"text-xl font-bold text-gray-800 mb-3\">{todayHalacha.title}</h2>\n            )}\n            <p className=\"text-gray-700 leading-relaxed text-lg mb-4 whitespace-pre-line\">{todayHalacha.content}</p>\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <Calendar className=\"h-4 w-4 ml-1\" />\n              <span>{new Date(todayHalacha.date).toLocaleDateString('he-IL')}</span>\n            </div>\n          </CardContent>\n        </Card>\n      )}\n\n      {/* Search and Filter Controls */}\n      <Card className=\"shadow-sm\">\n        <CardContent className=\"p-4\">\n          <div className=\"space-y-4\">\n            {/* Search Bar */}\n            <div className=\"relative\">\n              <Search className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n              <Input\n                placeholder=\"חפש בהלכות לפי נושא או תוכן...\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n                className=\"pr-10 text-right\"\n                data-testid=\"input-search-halacha\"\n              />\n            </div>\n\n            {/* Filters */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-3\">\n              {/* Date Filter */}\n              <Input\n                type=\"date\"\n                value={selectedDate}\n                onChange={(e) => setSelectedDate(e.target.value)}\n                className=\"text-right\"\n                data-testid=\"input-date-filter\"\n              />\n\n              {/* Sort Options */}\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"text-right\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"מיון\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"newest\">החדשות ביותר</SelectItem>\n                  <SelectItem value=\"oldest\">הישנות ביותר</SelectItem>\n                  <SelectItem value=\"title\">לפי כותרת</SelectItem>\n                </SelectContent>\n              </Select>\n\n              {/* Clear Filters */}\n              {(searchTerm || selectedDate || sortBy !== \"newest\") && (\n                <Button\n                  variant=\"outline\"\n                  onClick={clearFilters}\n                  className=\"flex items-center\"\n                  data-testid=\"button-clear-filters\"\n                >\n                  <Filter className=\"h-4 w-4 ml-1\" />\n                  נקה סינונים\n                </Button>\n              )}\n            </div>\n\n            {/* Results Counter */}\n            <div className=\"flex items-center text-sm text-gray-600\">\n              <Badge variant=\"outline\" className=\"text-gray-600\">\n                {filteredAndSortedHalachot.length} {filteredAndSortedHalachot.length === 1 ? 'הלכה' : 'הלכות'}\n              </Badge>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Halachot List */}\n      {filteredAndSortedHalachot.length > 0 ? (\n        <div className=\"space-y-4\">\n          {filteredAndSortedHalachot.map((halacha) => (\n            <Card key={halacha.id} className=\"shadow-sm hover:shadow-md transition-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"space-y-3\">\n                  {/* Header with date */}\n                  <div className=\"flex items-center justify-between\">\n                    {halacha.title && (\n                      <h3 className=\"text-lg font-semibold text-gray-800\">{halacha.title}</h3>\n                    )}\n                    <div className=\"flex items-center text-sm text-gray-500\">\n                      <Calendar className=\"h-4 w-4 ml-1\" />\n                      <span>{new Date(halacha.date).toLocaleDateString('he-IL')}</span>\n                    </div>\n                  </div>\n\n                  {/* Content */}\n                  <p className=\"text-gray-700 leading-relaxed whitespace-pre-line\">{halacha.content}</p>\n\n                  {/* Footer */}\n                  <div className=\"flex items-center justify-end pt-2 border-t border-gray-100\">\n                    {new Date(halacha.date).toDateString() === new Date().toDateString() && (\n                      <Badge variant=\"default\" className=\"bg-purple-600 text-white text-xs\">\n                        היום\n                      </Badge>\n                    )}\n                  </div>\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n      ) : (\n        <Card className=\"shadow-sm\">\n          <CardContent className=\"p-8 text-center\">\n            <BookOpen className=\"h-12 w-12 text-gray-300 mx-auto mb-4\" />\n            <p className=\"text-gray-500\">לא נמצאו הלכות המתאימות לחיפוש</p>\n            {(searchTerm || selectedDate) && (\n              <Button\n                variant=\"outline\"\n                onClick={clearFilters}\n                className=\"mt-3\"\n                data-testid=\"button-clear-search\"\n              >\n                נקה חיפוש\n              </Button>\n            )}\n          </CardContent>\n        </Card>\n      )}\n    </div>\n  );\n}","size_bytes":8375}},"version":1}